{"version":3,"file":"scheme.js","sourceRoot":"../src/","sources":["styles/scheme.ts"],"names":[],"mappings":";;;AAAA,iDAA8E;AAG9E;;;;;;;GAOG;AACH,2BACE,MAAoB,EACpB,OAA2B,EAC3B,aAAsB;IAEtB,IAAI,UAA0C,CAAC;IAC/C,IAAM,YAAY,GAAuB,OAAO,CAAC,cAAc,CAAC,QAAQ,CAAC,KAAK,CAAC;IAC/E,2EAA2E;IAC3E,IAAM,YAAY,GAChB,YAAY,IAAI,YAAY,CAAC,OAAO,IAAI,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,aAAa,CAAC;IACtG,IAAM,WAAW,GACf,YAAY,IAAI,YAAY,CAAC,OAAO,IAAI,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;IAElH,mIAAmI;IACnI,kIAAkI;IAClI,8HAA8H;IAC9H,kIAAkI;IAClI,qBAAqB;IACrB,IAAI,YAAY,IAAI,YAAY,CAAC,OAAO,IAAI,WAAW,EAAE;QACvD,uDAAuD;QACvD,IAAM,QAAQ,wBAAgB,WAAW,CAAE,CAAC;QAC5C,QAAQ,CAAC,OAAO,wBAAQ,YAAY,CAAC,OAAO,CAAE,CAAC;QAC/C,UAAU,GAAG,+BAAmB,CAAC,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,EAAE,OAAO,CAAC,CAAC;KAC9E;IACD,OAAO,UAAU,CAAC;AACpB,CAAC;AAzBD,8CAyBC","sourcesContent":["import { mergeCustomizations, ICustomizerContext } from '@uifabric/utilities';\r\nimport { ISchemeNames, ITheme } from '../interfaces/index';\r\n\r\n/**\r\n * Modify context to activate the specified scheme, using scheme in context (if available)\r\n * and falling back to settingsTheme. If no scheme is available, undefined context will be returned.\r\n *\r\n * @param scheme - Scheme to get customizations for.\r\n * @param context - Context in which to get schemed customizations.\r\n * @param settingsTheme - Themes setting fallback if context does not have schemed theme.\r\n */\r\nexport function getSchemedContext(\r\n  scheme: ISchemeNames,\r\n  context: ICustomizerContext,\r\n  settingsTheme?: ITheme\r\n): ICustomizerContext | undefined {\r\n  let newContext: ICustomizerContext | undefined;\r\n  const contextTheme: ITheme | undefined = context.customizations.settings.theme;\r\n  // Grab scheme theme from context (if it exists) with fallback to settings.\r\n  const schemeSource: ITheme | undefined =\r\n    contextTheme && contextTheme.schemes && contextTheme.schemes[scheme] ? contextTheme : settingsTheme;\r\n  const schemeTheme: ITheme | undefined =\r\n    schemeSource && schemeSource.schemes && schemeSource.schemes[scheme] ? schemeSource.schemes[scheme] : undefined;\r\n\r\n  // These first two checks are logically redundant but TS doesn't infer schemeSource.schemes is defined when schemeTheme is defined.\r\n  // TODO: This should be optimized (whether here or outside of this function TBD) so that this code block is not executing on every\r\n  //        render if scheme name and theme data has not changed. This needs to be carefully implemented to consider scheme data\r\n  //        changing when scheme name doesn't, to account for the fact that mergeCustomizations makes new objects (shallow ref won't\r\n  //        work), etc.\r\n  if (schemeSource && schemeSource.schemes && schemeTheme) {\r\n    // TODO: are either or both of these spreads necessary?\r\n    const newTheme: ITheme = { ...schemeTheme };\r\n    newTheme.schemes = { ...schemeSource.schemes };\r\n    newContext = mergeCustomizations({ settings: { theme: newTheme } }, context);\r\n  }\r\n  return newContext;\r\n}\r\n"]}