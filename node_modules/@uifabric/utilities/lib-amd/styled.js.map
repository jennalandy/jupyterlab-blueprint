{"version":3,"file":"styled.js","sourceRoot":"../src/","sources":["styled.tsx"],"names":[],"mappings":";;;IAsBA,IAAM,aAAa,GAAG,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IAE1C;;;;;;;;;;;;;;;OAeG;IACH,gBAKE,SAA4F,EAC5F,UAA0D,EAC1D,QAA+D,EAC/D,YAAiC;QAEjC,IAAM,OAAO,GAA8C,UAAC,cAA+B;YACzF,YAAY,GAAG,YAAY,IAAI,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,SAAS,EAAE,CAAC;YAExD,IAAA,0BAAK,EAAE,wBAAsB,EAAtB,2CAAsB,CAAkB;YAEvD,OAAO,CACL,oBAAC,8BAAiB,CAAC,QAAQ,QACxB,UAAC,OAA2B;gBAC3B,IAAM,QAAQ,GAAG,+BAAc,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,cAAc,CAAC,CAAC;gBAC3E,IAAA,kCAAwB,EAAE,2CAAO,CAAc;gBACvD,IAAM,MAAM,GAAG,UAAC,UAAuB,IAAK,OAAA,QAAQ,CAAC,UAAU,EAAE,UAAU,EAAE,gBAAgB,EAAE,cAAc,CAAC,MAAM,CAAC,EAAzE,CAAyE,CAAC;gBAEtH,IAAM,eAAe,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC;gBACxE,OAAO,oBAAC,SAAS,uBAAK,IAAI,EAAM,eAAe,EAAM,cAAc,IAAE,MAAM,EAAE,MAAM,IAAI,CAAC;YAC1F,CAAC,CAC0B,CAC9B,CAAC;QACJ,CAAC,CAAC;QAEF,OAAO,CAAC,WAAW,GAAG,YAAS,SAAS,CAAC,WAAW,IAAI,SAAS,CAAC,IAAI,CAAE,CAAC;QAEzE,OAAO,OAAkD,CAAC;IAC5D,CAAC;IAhCD,wBAgCC;IAED,kBACE,UAAuB;QACvB,mBAA4E;aAA5E,UAA4E,EAA5E,qBAA4E,EAA5E,IAA4E;YAA5E,kCAA4E;;QAE5E,IAAM,MAAM,GAAyB,EAAE,CAAC;QAExC,KAAqB,UAAS,EAAT,uBAAS,EAAT,uBAAS,EAAT,IAAS;YAAzB,IAAM,MAAM,kBAAA;YACf,IAAI,MAAM,EAAE;gBACV,MAAM,CAAC,IAAI,CAAC,OAAO,MAAM,KAAK,UAAU,CAAC,CAAC,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;aACzE;SACF;QACD,IAAI,MAAM,CAAC,MAAM,EAAE;YACjB,mEAAmE;YACnE,2DAA2D;YAC3D,yGAAyG;YACzG,yBAAyB;YACzB,kCAAkC;YAClC,OAAO,8BAAe,eAAK,MAAc,CAAqC,CAAC;SAChF;QAED,OAAO,SAAS,CAAC;IACnB,CAAC","sourcesContent":["import * as React from 'react';\r\nimport { concatStyleSets, IStyleSet, IStyleFunctionOrObject, IConcatenatedStyleSet } from '@uifabric/merge-styles';\r\nimport { Customizations } from './Customizations';\r\nimport { CustomizerContext, ICustomizerContext } from './Customizer';\r\n\r\nexport interface IPropsWithStyles<TStyleProps, TStyleSet extends IStyleSet<TStyleSet>> {\r\n  styles?: IStyleFunctionOrObject<TStyleProps, TStyleSet>;\r\n}\r\n\r\nexport interface ICustomizableProps {\r\n  /**\r\n   * Name of scope, which can be targeted using the Customizer.\r\n   */\r\n  scope: string;\r\n\r\n  /**\r\n   * List of fields which can be customized.\r\n   * @defaultvalue [ 'theme', 'styles' ]\r\n   */\r\n  fields?: string[];\r\n}\r\n\r\nconst DefaultFields = ['theme', 'styles'];\r\n\r\n/**\r\n * The styled HOC wrapper allows you to create a functional wrapper around a given component which will resolve\r\n * getStyles functional props, and mix customized props passed in using concatStyleSets.\r\n *\r\n * @example\r\n * ```tsx\r\n * export const Toggle = styled(\r\n *   ToggleBase,\r\n *   props => ({ root: { background: 'red' }})\r\n * );\r\n * ```\r\n * @param Component - The unstyled base component to render, which receives styles.\r\n * @param baseStyles - The styles which should be curried with the component.\r\n * @param getProps - A helper which provides default props.\r\n * @param customizable - An object which defines which props can be customized using the Customizer.\r\n */\r\nexport function styled<\r\n  TComponentProps extends IPropsWithStyles<TStyleProps, TStyleSet>,\r\n  TStyleProps,\r\n  TStyleSet extends IStyleSet<TStyleSet>\r\n>(\r\n  Component: React.ComponentClass<TComponentProps> | React.StatelessComponent<TComponentProps>,\r\n  baseStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet>,\r\n  getProps?: (props: TComponentProps) => Partial<TComponentProps>,\r\n  customizable?: ICustomizableProps\r\n): (props: TComponentProps) => JSX.Element {\r\n  const Wrapped: React.StatelessComponent<TComponentProps> = (componentProps: TComponentProps) => {\r\n    customizable = customizable || { scope: '', fields: undefined };\r\n\r\n    const { scope, fields = DefaultFields } = customizable;\r\n\r\n    return (\r\n      <CustomizerContext.Consumer>\r\n        {(context: ICustomizerContext) => {\r\n          const settings = Customizations.getSettings(fields, scope, context.customizations);\r\n          const { styles: customizedStyles, ...rest } = settings;\r\n          const styles = (styleProps: TStyleProps) => _resolve(styleProps, baseStyles, customizedStyles, componentProps.styles);\r\n\r\n          const additionalProps = getProps ? getProps(componentProps) : undefined;\r\n          return <Component {...rest} {...additionalProps} {...componentProps} styles={styles} />;\r\n        }}\r\n      </CustomizerContext.Consumer>\r\n    );\r\n  };\r\n\r\n  Wrapped.displayName = `Styled${Component.displayName || Component.name}`;\r\n\r\n  return Wrapped as (props: TComponentProps) => JSX.Element;\r\n}\r\n\r\nfunction _resolve<TStyleProps, TStyleSet extends IStyleSet<TStyleSet>>(\r\n  styleProps: TStyleProps,\r\n  ...allStyles: (IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined)[]\r\n): IConcatenatedStyleSet<TStyleSet> | undefined {\r\n  const result: Partial<TStyleSet>[] = [];\r\n\r\n  for (const styles of allStyles) {\r\n    if (styles) {\r\n      result.push(typeof styles === 'function' ? styles(styleProps) : styles);\r\n    }\r\n  }\r\n  if (result.length) {\r\n    // cliffkoh: I cannot figure out how to avoid the cast to any here.\r\n    // It is something to do with the use of Omit in IStyleSet.\r\n    // It might not be necessary once  Omit becomes part of lib.d.ts (when we remove our own Omit and rely on\r\n    // the official version).\r\n    // tslint:disable-next-line:no-any\r\n    return concatStyleSets(...(result as any)) as IConcatenatedStyleSet<TStyleSet>;\r\n  }\r\n\r\n  return undefined;\r\n}\r\n"]}