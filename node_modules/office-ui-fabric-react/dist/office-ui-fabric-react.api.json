{
  "kind": "package",
  "name": "office-ui-fabric-react",
  "summary": [],
  "remarks": [],
  "exports": {
    "ActionButton": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "_skipComponentRefResolution": {
          "kind": "property",
          "signature": "protected _skipComponentRefResolution: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Tell BaseComponent to bypass resolution of componentRef."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ActivityItem": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IActivityItemProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IActivityItemProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ActivityItem"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "ActivityItem",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "addDirectionalKeyCode": {
      "kind": "function",
      "signature": "export function addDirectionalKeyCode(which: number): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "which": {
          "name": "which",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Adds a keycode to the list of keys that, when pressed, should cause the focus outlines to be visible. This can be used to add global shortcut keys that directionally move from section to section within an app or between focus trap zones."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "addElementAtIndex": {
      "kind": "function",
      "signature": "export function addElementAtIndex<T>(array: T[], index: number, itemToAdd: T): T[];",
      "returnValue": {
        "type": "T[]",
        "description": []
      },
      "parameters": {
        "array": {
          "name": "array",
          "description": [
            {
              "kind": "text",
              "text": "The array to operate on"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "T[]"
        },
        "index": {
          "name": "index",
          "description": [
            {
              "kind": "text",
              "text": "The index where an element should be inserted"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "itemToAdd": {
          "name": "itemToAdd",
          "description": [
            {
              "kind": "text",
              "text": "The element to insert"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "T"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Given an array, this function returns a new array where an element has been inserted at the given index."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "arraysEqual": {
      "kind": "function",
      "signature": "export function arraysEqual<T>(array1: T[], array2: T[]): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": [
          {
            "kind": "text",
            "text": "True if the arrays are the same length and have the same values in the same positions, false otherwise."
          }
        ]
      },
      "parameters": {
        "array1": {
          "name": "array1",
          "description": [
            {
              "kind": "text",
              "text": "First array to compare"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "T[]"
        },
        "array2": {
          "name": "array2",
          "description": [
            {
              "kind": "text",
              "text": "Second array to compare"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "T[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Returns a boolean indicating if the two given arrays are equal in length and values."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "asAsync": {
      "kind": "function",
      "signature": "export function asAsync<TProps>(options: IAsAsyncOptions<TProps>): React.ComponentType<TProps & {\n    asyncPlaceholder?: React.ReactType;\n}>;",
      "returnValue": {
        "type": "React.ComponentType<TProps & {\n    asyncPlaceholder?: React.ReactType;\n}>",
        "description": []
      },
      "parameters": {
        "options": {
          "name": "options",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "IAsAsyncOptions<TProps>"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Produces a component which internally loads the target component before first mount. The component passes all props through to the loaded component."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "This overload accepts a module with a default export for the component."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "assertNever": {
      "kind": "function",
      "signature": "export function assertNever(x: never): never;",
      "returnValue": {
        "type": "never",
        "description": []
      },
      "parameters": {
        "x": {
          "name": "x",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "never"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "AssertNever is a utility function that can be used for exhaustiveness checks in switch statements."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "assign": {
      "kind": "function",
      "signature": "export function assign(target: any, ...args: any[]): any;",
      "returnValue": {
        "type": "any",
        "description": [
          {
            "kind": "text",
            "text": "Resulting merged target."
          }
        ]
      },
      "parameters": {
        "target": {
          "name": "target",
          "description": [
            {
              "kind": "text",
              "text": "Target object to merge following object arguments into."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "any"
        },
        "args": {
          "name": "args",
          "description": [
            {
              "kind": "text",
              "text": "One or more objects that will be mixed into the target in the order they are provided."
            }
          ],
          "isOptional": false,
          "isSpread": true,
          "type": "any[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Makes a resulting merge of a bunch of objects. Pass in the target object followed by 1 or more objects as arguments and they will be merged sequentially into the target. Note that this will shallow merge; it will not create new cloned values for target members."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "Async": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Bugs often appear in async code when stuff gets disposed, but async operations don't get canceled. This Async helper class solves these issues by tying async code to the lifetime of a disposable object."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Usage: Anything class extending from BaseModel can access this helper via this.async. Otherwise create a new instance of the class and remember to call dispose() during your code's dispose handler."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(parent?: object, onError?: (e: any) => void);",
          "parameters": {
            "parent": {
              "name": "parent",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "object"
            },
            "onError": {
              "name": "onError",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "(e: any) => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Async"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "Async",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "_logError": {
          "kind": "method",
          "signature": "protected _logError(e: any): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "e": {
              "name": "e",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "any"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "cancelAnimationFrame": {
          "kind": "method",
          "signature": "cancelAnimationFrame(id: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "id": {
              "name": "id",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "clearImmediate": {
          "kind": "method",
          "signature": "clearImmediate(id: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "id": {
              "name": "id",
              "description": [
                {
                  "kind": "text",
                  "text": "Id to cancel."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Clears the immediate."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "clearInterval": {
          "kind": "method",
          "signature": "clearInterval(id: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "id": {
              "name": "id",
              "description": [
                {
                  "kind": "text",
                  "text": "Id to cancel."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Clears the interval."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "clearTimeout": {
          "kind": "method",
          "signature": "clearTimeout(id: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "id": {
              "name": "id",
              "description": [
                {
                  "kind": "text",
                  "text": "Id to cancel."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Clears the timeout."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "debounce": {
          "kind": "method",
          "signature": "debounce<T extends Function>(func: T, wait?: number, options?: {\n        leading?: boolean;\n        maxWait?: number;\n        trailing?: boolean;\n    }): ICancelable<T> & (() => void);",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "ICancelable<T> & (() => void)",
            "description": [
              {
                "kind": "text",
                "text": "The new debounced function."
              }
            ]
          },
          "parameters": {
            "func": {
              "name": "func",
              "description": [
                {
                  "kind": "text",
                  "text": "The function to debounce."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "T"
            },
            "wait": {
              "name": "wait",
              "description": [
                {
                  "kind": "text",
                  "text": "The number of milliseconds to delay."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "options": {
              "name": "options",
              "description": [
                {
                  "kind": "text",
                  "text": "The options object."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "{\n        leading?: boolean;\n        maxWait?: number;\n        trailing?: boolean;\n    }"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a function that will delay the execution of func until after wait milliseconds have elapsed since the last time it was invoked. Provide an options object to indicate that func should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls to the debounced function will return the result of the last func call."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Note: If leading and trailing options are true func will be called on the trailing edge of the timeout only if the the debounced function is invoked more than once during the wait timeout."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "dispose": {
          "kind": "method",
          "signature": "dispose(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Dispose function, clears all async operations."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "requestAnimationFrame": {
          "kind": "method",
          "signature": "requestAnimationFrame(callback: () => void): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": []
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setImmediate": {
          "kind": "method",
          "signature": "setImmediate(callback: () => void): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "The setTimeout id."
              }
            ]
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Callback to execute."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "SetImmediate override, which will auto cancel the immediate during dispose."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setInterval": {
          "kind": "method",
          "signature": "setInterval(callback: () => void, duration: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "The setTimeout id."
              }
            ]
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Callback to execute."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            },
            "duration": {
              "name": "duration",
              "description": [
                {
                  "kind": "text",
                  "text": "Duration in milliseconds."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "SetInterval override, which will auto cancel the timeout during dispose."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setTimeout": {
          "kind": "method",
          "signature": "setTimeout(callback: () => void, duration: number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": [
              {
                "kind": "text",
                "text": "The setTimeout id."
              }
            ]
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "Callback to execute."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            },
            "duration": {
              "name": "duration",
              "description": [
                {
                  "kind": "text",
                  "text": "Duration in milliseconds."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "SetTimeout override, which will auto cancel the timeout during dispose."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "throttle": {
          "kind": "method",
          "signature": "throttle<T extends Function>(func: T, wait?: number, options?: {\n        leading?: boolean;\n        trailing?: boolean;\n    }): T | (() => void);",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "T | (() => void)",
            "description": [
              {
                "kind": "text",
                "text": "The new throttled function."
              }
            ]
          },
          "parameters": {
            "func": {
              "name": "func",
              "description": [
                {
                  "kind": "text",
                  "text": "The function to throttle."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "T"
            },
            "wait": {
              "name": "wait",
              "description": [
                {
                  "kind": "text",
                  "text": "The number of milliseconds to throttle executions to. Defaults to 0."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "options": {
              "name": "options",
              "description": [
                {
                  "kind": "text",
                  "text": "The options object."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "{\n        leading?: boolean;\n        trailing?: boolean;\n    }"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Creates a function that, when executed, will only call the func function at most once per every wait milliseconds. Provide an options object to indicate that func should be invoked on the leading and/or trailing edge of the wait timeout. Subsequent calls to the throttled function will return the result of the last func call."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Note: If leading and trailing options are true func will be called on the trailing edge of the timeout only if the the throttled function is invoked more than once during the wait timeout."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "autobind": {
      "kind": "function",
      "signature": "export function autobind<T extends Function>(target: any, key: string, descriptor: TypedPropertyDescriptor<T>): {\n    configurable: boolean;\n    get(): T;\n    set(newValue: any): void;\n} | void;",
      "returnValue": {
        "type": "{\n    configurable: boolean;\n    get(): T;\n    set(newValue: any): void;\n} | void",
        "description": []
      },
      "parameters": {
        "target": {
          "name": "target",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "any"
        },
        "key": {
          "name": "key",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        },
        "descriptor": {
          "name": "descriptor",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "TypedPropertyDescriptor<T>"
        }
      },
      "deprecatedMessage": [
        {
          "kind": "text",
          "text": "This has been deprecated in favor of using arrow function properties"
        }
      ],
      "summary": [
        {
          "kind": "text",
          "text": "Autobind is a utility for binding methods in a class. This simplifies tagging methods as being \"bound\" to the this pointer so that they can be used in scenarios that simply require a function callback."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "Autofill": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "IAutofill",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IAutofillProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IAutofillProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Autofill"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "Autofill",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "clear": {
          "kind": "method",
          "signature": "clear(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(nextProps: IAutofillProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "nextProps": {
              "name": "nextProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IAutofillProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "cursorLocation": {
          "kind": "property",
          "signature": "readonly cursorLocation: number | null;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "{\n        enableAutofillOnKeyPress: KeyCodes[];\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "inputElement": {
          "kind": "property",
          "signature": "readonly inputElement: HTMLInputElement | null;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "HTMLInputElement | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isValueSelected": {
          "kind": "property",
          "signature": "readonly isValueSelected: boolean;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "selectionEnd": {
          "kind": "property",
          "signature": "readonly selectionEnd: number | null;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectionStart": {
          "kind": "property",
          "signature": "readonly selectionStart: number | null;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "readonly value: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "AutoScroll": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "AutoScroll simply hooks up mouse events given a parent element, and scrolls the container up/down depending on how close the mouse is to the top/bottom of the container."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Once you don't want autoscroll any more, just dispose the helper and it will unhook events."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(element: HTMLElement);",
          "parameters": {
            "element": {
              "name": "element",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "HTMLElement"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "AutoScroll"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "AutoScroll",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "dispose": {
          "kind": "method",
          "signature": "dispose(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "BaseAutoFill": {
      "kind": "class",
      "extends": "Autofill",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [
        {
          "kind": "text",
          "text": "do not use."
        }
      ],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "BaseButton": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "IButton",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IBaseButtonProps, rootClassName: string);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IBaseButtonProps"
            },
            "rootClassName": {
              "name": "rootClassName",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "BaseButton"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "BaseButton",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(prevProps: IBaseButtonProps, prevState: IBaseButtonState): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "prevProps": {
              "name": "prevProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IBaseButtonProps"
            },
            "prevState": {
              "name": "prevState",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IBaseButtonState"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: Partial<IBaseButtonProps>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "Partial<IBaseButtonProps>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dismissMenu": {
          "kind": "method",
          "signature": "dismissMenu(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "openMenu": {
          "kind": "method",
          "signature": "openMenu(shouldFocusOnContainer?: boolean, shouldFocusOnMount?: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "shouldFocusOnContainer": {
              "name": "shouldFocusOnContainer",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            },
            "shouldFocusOnMount": {
              "name": "shouldFocusOnMount",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "BaseComponent": {
      "kind": "class",
      "extends": "React.Component",
      "implements": "",
      "typeParameters": [
        "TProps extends IBaseProps = {}",
        "TState = {}"
      ],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "BaseComponent class, which provides basic helpers for all components."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: TProps, context?: any);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [
                {
                  "kind": "text",
                  "text": "The props for the component."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "TProps"
            },
            "context": {
              "name": "context",
              "description": [
                {
                  "kind": "text",
                  "text": "The context for the component."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "any"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "BaseComponent constructor"
            }
          ],
          "remarks": []
        },
        "_async": {
          "kind": "property",
          "signature": "protected readonly _async: Async;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "Async",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the async instance associated with the component, created on demand. The async instance gives subclasses a way to execute setTimeout/setInterval async calls safely, where the callbacks will be cleared/ignored automatically after unmounting. The helpers within the async object also preserve the this pointer so that you don't need to \"bind\" the callbacks."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "_disposables": {
          "kind": "property",
          "signature": "protected readonly _disposables: IDisposable[];",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "IDisposable[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Allows subclasses to push things to this._disposables to be auto disposed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "_events": {
          "kind": "property",
          "signature": "protected readonly _events: EventGroup;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "EventGroup",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the event group instance assocaited with the component, created on demand. The event instance provides on/off methods for listening to DOM (or regular javascript object) events. The event callbacks will be automatically disconnected after unmounting. The helpers within the events object also preserve the this reference so that you don't need to \"bind\" the callbacks."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "_resolveRef": {
          "kind": "method",
          "signature": "protected _resolveRef(refName: string): (ref: React.ReactNode) => React.ReactNode;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "(ref: React.ReactNode) => React.ReactNode",
            "description": [
              {
                "kind": "text",
                "text": "A function instance keyed from the given refname."
              }
            ]
          },
          "parameters": {
            "refName": {
              "name": "refName",
              "description": [
                {
                  "kind": "text",
                  "text": "Name of the member to assign the ref to."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "createRef",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " from React.createRef."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Helper to return a memoized ref resolver function."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "_skipComponentRefResolution": {
          "kind": "property",
          "signature": "protected _skipComponentRefResolution: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Controls whether the componentRef prop will be resolved by this component instance. If you are implementing a passthrough (higher-order component), you would set this to false and pass through the props to the inner component, allowing it to resolve the componentRef."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "_updateComponentRef": {
          "kind": "method",
          "signature": "protected _updateComponentRef(currentProps: IBaseProps, newProps?: IBaseProps): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "currentProps": {
              "name": "currentProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IBaseProps"
            },
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "IBaseProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Updates the componentRef (by calling it with \"this\" when necessary.)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "_warnConditionallyRequiredProps": {
          "kind": "method",
          "signature": "protected _warnConditionallyRequiredProps(requiredProps: string[], conditionalPropName: string, condition: boolean): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "requiredProps": {
              "name": "requiredProps",
              "description": [
                {
                  "kind": "text",
                  "text": "The name of the props that are required when the condition is met."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string[]"
            },
            "conditionalPropName": {
              "name": "conditionalPropName",
              "description": [
                {
                  "kind": "text",
                  "text": "The name of the prop that the condition is based on."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "condition": {
              "name": "condition",
              "description": [
                {
                  "kind": "text",
                  "text": "Whether the condition is met."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Warns when props are required if a condition is met."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "_warnDeprecations": {
          "kind": "method",
          "signature": "protected _warnDeprecations(deprecationMap: ISettingsMap<TProps>): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "deprecationMap": {
              "name": "deprecationMap",
              "description": [
                {
                  "kind": "text",
                  "text": "The map of deprecations, where key is the prop name and the value is either null or a replacement prop name."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ISettingsMap<TProps>"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Warns when a deprecated props are being used."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "_warnMutuallyExclusive": {
          "kind": "method",
          "signature": "protected _warnMutuallyExclusive(mutuallyExclusiveMap: ISettingsMap<TProps>): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "mutuallyExclusiveMap": {
              "name": "mutuallyExclusiveMap",
              "description": [
                {
                  "kind": "text",
                  "text": "The map of mutually exclusive props."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ISettingsMap<TProps>"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Warns when props which are mutually exclusive with each other are both used."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "className": {
          "kind": "property",
          "signature": "readonly className: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the object's class name."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "When the component has mounted, update the componentRef."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: Readonly<TProps>, newContext: any): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Readonly<TProps>"
            },
            "newContext": {
              "name": "newContext",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "any"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "When the component will receive props, make sure the componentRef is updated."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If we have disposables, dispose them automatically on unmount."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "onError": {
          "kind": "property",
          "signature": "static onError: ((errorMessage?: string, ex?: any) => void);",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "((errorMessage?: string, ex?: any) => void)",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use React's error boundaries instead."
            }
          ],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "BaseExtendedPeoplePicker": {
      "kind": "class",
      "extends": "BaseExtendedPicker",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "BaseExtendedPicker": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "IBaseExtendedPicker",
      "typeParameters": [
        "T",
        "P extends IBaseExtendedPickerProps<T>"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(basePickerProps: P);",
          "parameters": {
            "basePickerProps": {
              "name": "basePickerProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "P"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "BaseExtendedPicker"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "BaseExtendedPicker",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "_onSelectedItemsChanged": {
          "kind": "property",
          "signature": "protected _onSelectedItemsChanged: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "_onSuggestionSelected": {
          "kind": "property",
          "signature": "protected _onSuggestionSelected: (item: T) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: T) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "canAddItems": {
          "kind": "method",
          "signature": "protected canAddItems(): boolean;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "clearInput": {
          "kind": "method",
          "signature": "clearInput(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: P): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "P"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "floatingPicker": {
          "kind": "property",
          "signature": "floatingPicker:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        (component: BaseFloatingPicker<T, IBaseFloatingPickerProps<T>> | null): void;\n        current: BaseFloatingPicker<T, IBaseFloatingPickerProps<T>> | null;\n        value: BaseFloatingPicker<T, IBaseFloatingPickerProps<T>> | null;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "floatingPickerProps": {
          "kind": "property",
          "signature": "protected floatingPickerProps: IBaseFloatingPickerProps<T>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IBaseFloatingPickerProps<T>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "highlightedItems": {
          "kind": "property",
          "signature": "readonly highlightedItems: T[];",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "T[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "input": {
          "kind": "property",
          "signature": "protected input:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        (component: Autofill | null): void;\n        current: Autofill | null;\n        value: Autofill | null;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputElement": {
          "kind": "property",
          "signature": "readonly inputElement: HTMLInputElement | null;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "HTMLInputElement | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "items": {
          "kind": "property",
          "signature": "readonly items: any;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onBackspace": {
          "kind": "property",
          "signature": "protected onBackspace: (ev: React.KeyboardEvent<HTMLElement>) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.KeyboardEvent<HTMLElement>) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onCopy": {
          "kind": "property",
          "signature": "protected onCopy: (ev: React.ClipboardEvent<HTMLElement>) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.ClipboardEvent<HTMLElement>) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onInputChange": {
          "kind": "property",
          "signature": "protected onInputChange: (value: string) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(value: string) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onInputClick": {
          "kind": "property",
          "signature": "protected onInputClick: (ev: React.MouseEvent<HTMLInputElement | Autofill>) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.MouseEvent<HTMLInputElement | Autofill>) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onInputFocus": {
          "kind": "property",
          "signature": "protected onInputFocus: (ev: React.FocusEvent<HTMLInputElement | Autofill>) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.FocusEvent<HTMLInputElement | Autofill>) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onPaste": {
          "kind": "property",
          "signature": "protected onPaste: (ev: React.ClipboardEvent<HTMLInputElement | Autofill>) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.ClipboardEvent<HTMLInputElement | Autofill>) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onSelectionChange": {
          "kind": "property",
          "signature": "protected onSelectionChange: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "renderSelectedItemsList": {
          "kind": "method",
          "signature": "protected renderSelectedItemsList(): JSX.Element;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "renderSuggestions": {
          "kind": "method",
          "signature": "protected renderSuggestions(): JSX.Element;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "root": {
          "kind": "property",
          "signature": "protected root:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        (component: HTMLDivElement | null): void;\n        current: HTMLDivElement | null;\n        value: HTMLDivElement | null;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedItemsList": {
          "kind": "property",
          "signature": "selectedItemsList:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        (component: BaseSelectedItemsList<T, IBaseSelectedItemsListProps<T>> | null): void;\n        current: BaseSelectedItemsList<T, IBaseSelectedItemsListProps<T>> | null;\n        value: BaseSelectedItemsList<T, IBaseSelectedItemsListProps<T>> | null;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedItemsListProps": {
          "kind": "property",
          "signature": "protected selectedItemsListProps: IBaseSelectedItemsListProps<T>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IBaseSelectedItemsListProps<T>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selection": {
          "kind": "property",
          "signature": "protected selection: Selection;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Selection",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "BaseFloatingPeoplePicker": {
      "kind": "class",
      "extends": "BaseFloatingPicker",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "BaseFloatingPicker": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "IBaseFloatingPicker",
      "typeParameters": [
        "T",
        "P extends IBaseFloatingPickerProps<T>"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(basePickerProps: P);",
          "parameters": {
            "basePickerProps": {
              "name": "basePickerProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "P"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "BaseFloatingPicker"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "BaseFloatingPicker",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "completeSuggestion": {
          "kind": "property",
          "signature": "completeSuggestion: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: P): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "P"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "currentPromise": {
          "kind": "property",
          "signature": "protected currentPromise: PromiseLike<any>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PromiseLike<any>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "currentSelectedSuggestionIndex": {
          "kind": "property",
          "signature": "readonly currentSelectedSuggestionIndex: number;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "forceResolveSuggestion": {
          "kind": "method",
          "signature": "forceResolveSuggestion(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "hidePicker": {
          "kind": "property",
          "signature": "hidePicker: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputText": {
          "kind": "property",
          "signature": "readonly inputText: string;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isSuggestionsShown": {
          "kind": "property",
          "signature": "readonly isSuggestionsShown: boolean;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChange": {
          "kind": "method",
          "signature": "protected onChange(item: T): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "item": {
              "name": "item",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "T"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "onKeyDown": {
          "kind": "property",
          "signature": "protected onKeyDown: (ev: MouseEvent) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: MouseEvent) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onQueryStringChanged": {
          "kind": "property",
          "signature": "onQueryStringChanged: (queryString: string) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(queryString: string) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onSelectionChange": {
          "kind": "method",
          "signature": "protected onSelectionChange(): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "onSuggestionClick": {
          "kind": "property",
          "signature": "protected onSuggestionClick: (ev: React.MouseEvent<HTMLElement>, item: T, index: number) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.MouseEvent<HTMLElement>, item: T, index: number) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onSuggestionRemove": {
          "kind": "property",
          "signature": "protected onSuggestionRemove: (ev: React.MouseEvent<HTMLElement>, item: T, index: number) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.MouseEvent<HTMLElement>, item: T, index: number) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "renderSuggestions": {
          "kind": "method",
          "signature": "protected renderSuggestions(): JSX.Element | null;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element | null",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "root": {
          "kind": "property",
          "signature": "protected root:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        (component: HTMLDivElement | null): void;\n        current: HTMLDivElement | null;\n        value: HTMLDivElement | null;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selection": {
          "kind": "property",
          "signature": "protected selection: Selection;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Selection",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showPicker": {
          "kind": "property",
          "signature": "showPicker: (updateValue?: boolean) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(updateValue?: boolean) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestions": {
          "kind": "property",
          "signature": "readonly suggestions: any[];",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "any[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsControl": {
          "kind": "property",
          "signature": "protected suggestionsControl: SuggestionsControl<T>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SuggestionsControl<T>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "SuggestionsControlOfProperType": {
          "kind": "property",
          "signature": "protected SuggestionsControlOfProperType: new (props: ISuggestionsControlProps<T>) => SuggestionsControl<T>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "new (props: ISuggestionsControlProps<T>) => SuggestionsControl<T>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionStore": {
          "kind": "property",
          "signature": "protected suggestionStore: SuggestionsStore<T>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SuggestionsStore<T>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "updateSuggestions": {
          "kind": "method",
          "signature": "updateSuggestions(suggestions: T[], forceUpdate?: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "suggestions": {
              "name": "suggestions",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "T[]"
            },
            "forceUpdate": {
              "name": "forceUpdate",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "updateSuggestionsList": {
          "kind": "method",
          "signature": "protected updateSuggestionsList(suggestions: T[] | PromiseLike<T[]>): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "suggestions": {
              "name": "suggestions",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "T[] | PromiseLike<T[]>"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "updateSuggestionWithZeroState": {
          "kind": "method",
          "signature": "protected updateSuggestionWithZeroState(): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "updateValue": {
          "kind": "method",
          "signature": "protected updateValue(updatedValue: string): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "updatedValue": {
              "name": "updatedValue",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "BasePeoplePicker": {
      "kind": "class",
      "extends": "BasePicker",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "BasePeopleSelectedItemsList": {
      "kind": "class",
      "extends": "BaseSelectedItemsList",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "BasePicker": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "IBasePicker",
      "typeParameters": [
        "T",
        "P extends IBasePickerProps<T>"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(basePickerProps: P);",
          "parameters": {
            "basePickerProps": {
              "name": "basePickerProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "P"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "BasePicker"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "BasePicker",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "_ariaMap": {
          "kind": "property",
          "signature": "protected _ariaMap: IPickerAriaIds;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IPickerAriaIds",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "_isFocusZoneInnerKeystroke": {
          "kind": "property",
          "signature": "protected _isFocusZoneInnerKeystroke: (ev: React.KeyboardEvent<HTMLElement>) => boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.KeyboardEvent<HTMLElement>) => boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "addItem": {
          "kind": "property",
          "signature": "protected addItem: (item: T) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: T) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "addItemByIndex": {
          "kind": "property",
          "signature": "protected addItemByIndex: (index: number) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(index: number) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "canAddItems": {
          "kind": "method",
          "signature": "protected canAddItems(): boolean;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "completeSuggestion": {
          "kind": "method",
          "signature": "completeSuggestion(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: P): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "P"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUpdate": {
          "kind": "method",
          "signature": "componentWillUpdate(newProps: P, newState: IBasePickerState): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "P"
            },
            "newState": {
              "name": "newState",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IBasePickerState"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "currentPromise": {
          "kind": "property",
          "signature": "protected currentPromise: PromiseLike<any> | undefined;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PromiseLike<any> | undefined",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dismissSuggestions": {
          "kind": "property",
          "signature": "dismissSuggestions: (ev?: any) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: any) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "focusInput": {
          "kind": "method",
          "signature": "focusInput(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "focusZone": {
          "kind": "property",
          "signature": "protected focusZone:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        (component: IFocusZone | null): void;\n        current: IFocusZone | null;\n        value: IFocusZone | null;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getActiveDescendant": {
          "kind": "method",
          "signature": "protected getActiveDescendant(): string | undefined;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string | undefined",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getSuggestionsAlert": {
          "kind": "method",
          "signature": "protected getSuggestionsAlert(): JSX.Element | undefined;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element | undefined",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "input": {
          "kind": "property",
          "signature": "protected input:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        (component: IAutofill | null): void;\n        current: IAutofill | null;\n        value: IAutofill | null;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "items": {
          "kind": "property",
          "signature": "readonly items: T[];",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "T[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onBackspace": {
          "kind": "method",
          "signature": "protected onBackspace(ev: React.KeyboardEvent<HTMLElement>): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "ev": {
              "name": "ev",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "React.KeyboardEvent<HTMLElement>"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "onChange": {
          "kind": "method",
          "signature": "protected onChange(items?: T[]): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "items": {
              "name": "items",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "T[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "onEmptyInputFocus": {
          "kind": "method",
          "signature": "protected onEmptyInputFocus(): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "onGetMoreResults": {
          "kind": "property",
          "signature": "protected onGetMoreResults: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onInputBlur": {
          "kind": "property",
          "signature": "protected onInputBlur: (ev: React.FocusEvent<HTMLInputElement | Autofill>) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.FocusEvent<HTMLInputElement | Autofill>) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onInputChange": {
          "kind": "property",
          "signature": "protected onInputChange: (value: string) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(value: string) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onInputFocus": {
          "kind": "property",
          "signature": "protected onInputFocus: (ev: React.FocusEvent<HTMLInputElement | Autofill>) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.FocusEvent<HTMLInputElement | Autofill>) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onItemChange": {
          "kind": "property",
          "signature": "protected onItemChange: (changedItem: T, index: number) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(changedItem: T, index: number) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onKeyDown": {
          "kind": "property",
          "signature": "protected onKeyDown: (ev: React.KeyboardEvent<HTMLElement>) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.KeyboardEvent<HTMLElement>) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onSelectionChange": {
          "kind": "method",
          "signature": "protected onSelectionChange(): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "onSuggestionClick": {
          "kind": "property",
          "signature": "protected onSuggestionClick: (ev: React.MouseEvent<HTMLElement>, item: any, index: number) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.MouseEvent<HTMLElement>, item: any, index: number) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onSuggestionRemove": {
          "kind": "property",
          "signature": "protected onSuggestionRemove: (ev: React.MouseEvent<HTMLElement>, item: IPersonaProps, index: number) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.MouseEvent<HTMLElement>, item: IPersonaProps, index: number) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onSuggestionSelect": {
          "kind": "method",
          "signature": "protected onSuggestionSelect(): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "refocusSuggestions": {
          "kind": "property",
          "signature": "refocusSuggestions: (keyCode: KeyCodes) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(keyCode: KeyCodes) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "removeItem": {
          "kind": "property",
          "signature": "protected removeItem: (item: IPickerItemProps<T>, focusNextItem?: boolean | undefined) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: IPickerItemProps<T>, focusNextItem?: boolean | undefined) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "removeItems": {
          "kind": "property",
          "signature": "protected removeItems: (itemsToRemove: any[]) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(itemsToRemove: any[]) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "renderItems": {
          "kind": "method",
          "signature": "protected renderItems(): JSX.Element[];",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element[]",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "renderSuggestions": {
          "kind": "method",
          "signature": "protected renderSuggestions(): JSX.Element | null;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element | null",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "resetFocus": {
          "kind": "method",
          "signature": "protected resetFocus(index?: number): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "resolveNewValue": {
          "kind": "method",
          "signature": "protected resolveNewValue(updatedValue: string, suggestions: T[]): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "updatedValue": {
              "name": "updatedValue",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "suggestions": {
              "name": "suggestions",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "T[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "root": {
          "kind": "property",
          "signature": "protected root:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        (component: HTMLDivElement | null): void;\n        current: HTMLDivElement | null;\n        value: HTMLDivElement | null;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selection": {
          "kind": "property",
          "signature": "protected selection: Selection;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Selection",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionElement": {
          "kind": "property",
          "signature": "protected suggestionElement:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        (component: Suggestions<T> | null): void;\n        current: Suggestions<T> | null;\n        value: Suggestions<T> | null;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "SuggestionOfProperType": {
          "kind": "property",
          "signature": "protected SuggestionOfProperType: new (props: ISuggestionsProps<T>) => Suggestions<T>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "new (props: ISuggestionsProps<T>) => Suggestions<T>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionStore": {
          "kind": "property",
          "signature": "protected suggestionStore: SuggestionsController<T>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SuggestionsController<T>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "updateSuggestions": {
          "kind": "method",
          "signature": "protected updateSuggestions(suggestions: any[]): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "suggestions": {
              "name": "suggestions",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "any[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "updateSuggestionsList": {
          "kind": "method",
          "signature": "protected updateSuggestionsList(suggestions: T[] | PromiseLike<T[]>, updatedValue?: string): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "suggestions": {
              "name": "suggestions",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "T[] | PromiseLike<T[]>"
            },
            "updatedValue": {
              "name": "updatedValue",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "updateValue": {
          "kind": "method",
          "signature": "protected updateValue(updatedValue: string): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "updatedValue": {
              "name": "updatedValue",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "BasePickerListBelow": {
      "kind": "class",
      "extends": "BasePicker",
      "implements": "",
      "typeParameters": [
        "T",
        "P extends IBasePickerProps<T>"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "onBackspace": {
          "kind": "method",
          "signature": "protected onBackspace(ev: React.KeyboardEvent<HTMLElement>): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "ev": {
              "name": "ev",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "React.KeyboardEvent<HTMLElement>"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "BaseSelectedItemsList": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "IBaseSelectedItemsList",
      "typeParameters": [
        "T",
        "P extends IBaseSelectedItemsListProps<T>"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(basePickerProps: P);",
          "parameters": {
            "basePickerProps": {
              "name": "basePickerProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "P"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "BaseSelectedItemsList"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "BaseSelectedItemsList",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "addItems": {
          "kind": "property",
          "signature": "addItems: (items: T[]) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(items: T[]) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: P): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "P"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUpdate": {
          "kind": "method",
          "signature": "componentWillUpdate(newProps: P, newState: IBaseSelectedItemsListState): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "P"
            },
            "newState": {
              "name": "newState",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IBaseSelectedItemsListState"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "copyItems": {
          "kind": "method",
          "signature": "protected copyItems(items: T[]): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "items": {
              "name": "items",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "T[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "hasSelectedItems": {
          "kind": "method",
          "signature": "hasSelectedItems(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "highlightedItems": {
          "kind": "method",
          "signature": "highlightedItems(): T[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "T[]",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "items": {
          "kind": "property",
          "signature": "readonly items: T[];",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "T[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChange": {
          "kind": "method",
          "signature": "protected onChange(items?: T[]): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "items": {
              "name": "items",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "T[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "onCopy": {
          "kind": "property",
          "signature": "onCopy: (ev: React.ClipboardEvent<HTMLElement>) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.ClipboardEvent<HTMLElement>) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onItemChange": {
          "kind": "property",
          "signature": "protected onItemChange: (changedItem: T, index: number) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(changedItem: T, index: number) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onSelectionChanged": {
          "kind": "property",
          "signature": "protected onSelectionChanged: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "removeItem": {
          "kind": "property",
          "signature": "removeItem: (item: ISelectedItemProps<T>) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: ISelectedItemProps<T>) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "removeItemAt": {
          "kind": "property",
          "signature": "removeItemAt: (index: number) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(index: number) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "removeItems": {
          "kind": "property",
          "signature": "removeItems: (itemsToRemove: any[]) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(itemsToRemove: any[]) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "removeSelectedItems": {
          "kind": "method",
          "signature": "removeSelectedItems(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): any;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "any",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "renderItems": {
          "kind": "property",
          "signature": "protected renderItems: () => JSX.Element[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => JSX.Element[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "protected root: HTMLElement;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "HTMLElement",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selection": {
          "kind": "property",
          "signature": "protected selection: Selection;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Selection",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "unselectAll": {
          "kind": "method",
          "signature": "unselectAll(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "updateItems": {
          "kind": "method",
          "signature": "updateItems(items: T[], focusIndex?: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "items": {
              "name": "items",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "T[]"
            },
            "focusIndex": {
              "name": "focusIndex",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Controls what happens whenever there is an action that impacts the selected items. If selectedItems is provided as a property then this will act as a controlled component and it will not update it's own state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "BaseSlots": {
      "kind": "enum",
      "values": {
        "backgroundColor": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "foregroundColor": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "primaryColor": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "BreadcrumbBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IBreadcrumbProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IBreadcrumbProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "BreadcrumbBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "BreadcrumbBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(nextProps: IBreadcrumbProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "nextProps": {
              "name": "nextProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IBreadcrumbProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IBreadcrumbProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IBreadcrumbProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the first breadcrumb link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "buildClassMap": {
      "kind": "function",
      "signature": "export function buildClassMap<T>(styles: T): {\n    [key in keyof T]?: string;\n};",
      "returnValue": {
        "type": "{\n    [key in keyof T]?: string;\n}",
        "description": [
          {
            "kind": "text",
            "text": "Map of property name to class name."
          }
        ]
      },
      "parameters": {
        "styles": {
          "name": "styles",
          "description": [
            {
              "kind": "text",
              "text": "Map of unprocessed styles."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "T"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Builds a class names object from a given map."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "buildColumns": {
      "kind": "function",
      "signature": "export function buildColumns(items: any[], canResizeColumns?: boolean, onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => any, sortedColumnKey?: string, isSortedDescending?: boolean, groupedColumnKey?: string, isMultiline?: boolean): IColumn[];",
      "returnValue": {
        "type": "IColumn[]",
        "description": []
      },
      "parameters": {
        "items": {
          "name": "items",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "any[]"
        },
        "canResizeColumns": {
          "name": "canResizeColumns",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        },
        "onColumnClick": {
          "name": "onColumnClick",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "(ev: React.MouseEvent<HTMLElement>, column: IColumn) => any"
        },
        "sortedColumnKey": {
          "name": "sortedColumnKey",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "string"
        },
        "isSortedDescending": {
          "name": "isSortedDescending",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        },
        "groupedColumnKey": {
          "name": "groupedColumnKey",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "string"
        },
        "isMultiline": {
          "name": "isMultiline",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "Button": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [
        {
          "kind": "text",
          "text": "Use the individual *Button components instead."
        }
      ],
      "summary": [
        {
          "kind": "text",
          "text": "This class is deprecated. Use the individual *Button components instead."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IButtonProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IButtonProps"
            }
          },
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use the individual *Button components instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Button"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "Button",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "_skipComponentRefResolution": {
          "kind": "property",
          "signature": "protected _skipComponentRefResolution: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use the individual *Button components instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Set this BaseComponent._skipComponentRefResolution to true, bypassing resolution of componentRef."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use the individual *Button components instead."
            }
          ],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ButtonType": {
      "kind": "enum",
      "values": {
        "command": {
          "kind": "enum value",
          "value": "4",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "compound": {
          "kind": "enum value",
          "value": "3",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "default": {
          "kind": "enum value",
          "value": "6",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "hero": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "icon": {
          "kind": "enum value",
          "value": "5",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "normal": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "primary": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "calculatePrecision": {
      "kind": "function",
      "signature": "export function calculatePrecision(value: number | string): number;",
      "returnValue": {
        "type": "number",
        "description": []
      },
      "parameters": {
        "value": {
          "name": "value",
          "description": [
            {
              "kind": "text",
              "text": "the value to determine the precision of"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "number | string"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Calculates a number's precision based on the number of trailing zeros if the number does not have a decimal indicated by a negative precision. Otherwise, it calculates the number of digits after the decimal point indicated by a positive precision."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "Calendar": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "ICalendar",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: ICalendarProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ICalendarProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Calendar"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "Calendar",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(nextProps: ICalendarProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "nextProps": {
              "name": "nextProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ICalendarProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: ICalendarProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "ICalendarProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "Callout": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: ICalloutProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ICalloutProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Callout"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "Callout",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "canAnyMenuItemsCheck": {
      "kind": "function",
      "signature": "export function canAnyMenuItemsCheck(items: IContextualMenuItem[]): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {
        "items": {
          "name": "items",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "IContextualMenuItem[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Returns true if a list of menu items can contain a checkbox"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "CheckBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: ICheckProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "ICheckProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "shouldComponentUpdate": {
          "kind": "method",
          "signature": "shouldComponentUpdate(newProps: ICheckProps): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ICheckProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "CheckboxBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "ICheckbox",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: ICheckboxProps, context?: any);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [
                {
                  "kind": "text",
                  "text": "Props for the component"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "ICheckboxProps"
            },
            "context": {
              "name": "context",
              "description": [
                {
                  "kind": "text",
                  "text": "Context or initial state for the base component."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "any"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Initialize a new instance of the TopHeaderV2"
            }
          ],
          "remarks": []
        },
        "checked": {
          "kind": "property",
          "signature": "readonly checked: boolean;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: ICheckboxProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ICheckboxProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: ICheckboxProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "ICheckboxProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Render the Checkbox based on passed props"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "CheckboxVisibility": {
      "kind": "enum",
      "values": {
        "always": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Visible always."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "hidden": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Hide checkboxes."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "onHover": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Visible on hover."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "ChoiceGroupBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IChoiceGroupProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IChoiceGroupProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ChoiceGroupBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "ChoiceGroupBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: IChoiceGroupProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IChoiceGroupProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IChoiceGroupProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IChoiceGroupProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "classNamesFunction": {
      "kind": "function",
      "signature": "export function classNamesFunction<TStyleProps extends {}, TStyleSet extends IStyleSet<TStyleSet>>(): (getStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined, styleProps?: TStyleProps) => IProcessedStyleSet<TStyleSet>;",
      "returnValue": {
        "type": "(getStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet> | undefined, styleProps?: TStyleProps) => IProcessedStyleSet<TStyleSet>",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Creates a getClassNames function which calls getStyles given the props, and injects them into mergeStyleSets."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "Coachmark": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "ICoachmark",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: ICoachmarkProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ICoachmarkProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Coachmark"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "Coachmark",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(prevProps: ICoachmarkProps, prevState: ICoachmarkState): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "prevProps": {
              "name": "prevProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ICoachmarkProps"
            },
            "prevState": {
              "name": "prevState",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ICoachmarkState"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: ICoachmarkProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ICoachmarkProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: Partial<ICoachmarkProps>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "Partial<ICoachmarkProps>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dismiss": {
          "kind": "property",
          "signature": "dismiss: (ev?: Event | React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement> | undefined) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: Event | React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement> | undefined) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "shouldComponentUpdate": {
          "kind": "method",
          "signature": "shouldComponentUpdate(newProps: ICoachmarkProps, newState: ICoachmarkState): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ICoachmarkProps"
            },
            "newState": {
              "name": "newState",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ICoachmarkState"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "CollapseAllVisibility": {
      "kind": "enum",
      "values": {
        "hidden": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "visible": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "ColorPickerBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IColorPickerProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IColorPickerProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ColorPickerBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "ColorPickerBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: IColorPickerProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IColorPickerProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "{\n        hexLabel: string;\n        redLabel: string;\n        greenLabel: string;\n        blueLabel: string;\n        alphaLabel: string;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ColorPickerGridCellBase": {
      "kind": "class",
      "extends": "React.Component",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IColorPickerGridCellProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IColorPickerGridCellProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ColumnActionsMode": {
      "kind": "enum",
      "values": {
        "clickable": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Renders the column header is clickable."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "disabled": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Renders the column header as disabled."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "hasDropdown": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Renders the column header ias clickable and displays the dropdown cheveron."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Enum to describe how a particular column header behaves.... This enum is used to to specify the property IColumn:columnActionsMode. If IColumn:columnActionsMode is undefined, then it's equivalent to ColumnActionsMode.clickable"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "ColumnDragEndLocation": {
      "kind": "enum",
      "values": {
        "header": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Drag ended on Header"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "outside": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Drag ended outside of current list"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "surface": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Drag ended on current List"
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Enum to describe where the column has been dropped, after starting the drag"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "ComboBox": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IComboBoxProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IComboBoxProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ComboBox"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "ComboBox",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(prevProps: IComboBoxProps, prevState: IComboBoxState): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "prevProps": {
              "name": "prevProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IComboBoxProps"
            },
            "prevState": {
              "name": "prevState",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IComboBoxState"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: IComboBoxProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IComboBoxProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IComboBoxProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IComboBoxProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dismissMenu": {
          "kind": "property",
          "signature": "dismissMenu: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Close menu callout if it is open"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "property",
          "signature": "focus: (shouldOpenOnFocus?: boolean | undefined, useFocusAsync?: boolean | undefined) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(shouldOpenOnFocus?: boolean | undefined, useFocusAsync?: boolean | undefined) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "CommandBarBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "ICommandBar",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: ICommandBarProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "ICommandBarProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "remeasure": {
          "kind": "method",
          "signature": "remeasure(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "CommandBarButton": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "_skipComponentRefResolution": {
          "kind": "property",
          "signature": "protected _skipComponentRefResolution: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Tell BaseComponent to bypass resolution of componentRef."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "CompactPeoplePicker": {
      "kind": "class",
      "extends": "BasePeoplePicker",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Compact layout. It uses small personas when displaying search results."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "{\n        onRenderItem: (props: IPeoplePickerItemProps) => JSX.Element;\n        onRenderSuggestionsItem: (props: IPersonaProps, itemProps?: IBasePickerSuggestionsProps | undefined) => JSX.Element;\n        createGenericItem: typeof createGenericItem;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "CompoundButton": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "_skipComponentRefResolution": {
          "kind": "property",
          "signature": "protected _skipComponentRefResolution: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Tell BaseComponent to bypass resolution of componentRef."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "concatStyleSets": {
      "kind": "function",
      "signature": "export function concatStyleSets(...styleSets: (IStyleSet<any> | false | null | undefined)[]): IConcatenatedStyleSet<any>;",
      "returnValue": {
        "type": "IConcatenatedStyleSet<any>",
        "description": []
      },
      "parameters": {
        "styleSets": {
          "name": "styleSets",
          "description": [
            {
              "kind": "text",
              "text": "One or more stylesets to be merged (each param can also be falsy)."
            }
          ],
          "isOptional": false,
          "isSpread": true,
          "type": "(IStyleSet<any> | false | null | undefined)[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Combine a set of styles together (but does not register css classes)."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "ConstrainMode": {
      "kind": "enum",
      "values": {
        "horizontalConstrained": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If specified, constrains the list to the given layout space."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "unconstrained": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If specified, lets the content grow which allows the page to manage scrolling."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "ContextualMenuBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IContextualMenuProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IContextualMenuProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ContextualMenuBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "ContextualMenuBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillMount": {
          "kind": "method",
          "signature": "componentWillMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUpdate": {
          "kind": "method",
          "signature": "componentWillUpdate(newProps: IContextualMenuProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IContextualMenuProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IContextualMenuProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IContextualMenuProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dismiss": {
          "kind": "property",
          "signature": "dismiss: (ev?: any, dismissAll?: boolean | undefined) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: any, dismissAll?: boolean | undefined) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element | null;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element | null",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ContextualMenuItemBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "dismissMenu": {
          "kind": "property",
          "signature": "dismissMenu: (dismissAll?: boolean | undefined) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(dismissAll?: boolean | undefined) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dismissSubMenu": {
          "kind": "property",
          "signature": "dismissSubMenu: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "openSubMenu": {
          "kind": "property",
          "signature": "openSubMenu: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ContextualMenuItemType": {
      "kind": "enum",
      "values": {
        "Divider": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Header": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Normal": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Section": {
          "kind": "enum value",
          "value": "3",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "createArray": {
      "kind": "function",
      "signature": "export function createArray<T>(size: number, getItem: (index: number) => T): T[];",
      "returnValue": {
        "type": "T[]",
        "description": []
      },
      "parameters": {
        "size": {
          "name": "size",
          "description": [
            {
              "kind": "text",
              "text": "Size of array."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "getItem": {
          "name": "getItem",
          "description": [
            {
              "kind": "text",
              "text": "Callback to populate given cell index."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "(index: number) => T"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Creates an array of a given size and helper method to populate."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "createFontStyles": {
      "kind": "function",
      "signature": "export function createFontStyles(localeCode: string | null): IFontStyles;",
      "returnValue": {
        "type": "IFontStyles",
        "description": []
      },
      "parameters": {
        "localeCode": {
          "name": "localeCode",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string | null"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "createGenericItem": {
      "kind": "function",
      "signature": "export function createGenericItem(name: string, currentValidationState: ValidationState, allowPhoneInitials: boolean): IGenericItem & {\n    key: React.Key;\n};",
      "returnValue": {
        "type": "IGenericItem & {\n    key: React.Key;\n}",
        "description": []
      },
      "parameters": {
        "name": {
          "name": "name",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        },
        "currentValidationState": {
          "name": "currentValidationState",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "ValidationState"
        },
        "allowPhoneInitials": {
          "name": "allowPhoneInitials",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "createItem": {
      "kind": "function",
      "signature": "export function createItem(name: string, isValid: boolean): ISuggestionModel<IPersonaProps>;",
      "returnValue": {
        "type": "ISuggestionModel<IPersonaProps>",
        "description": []
      },
      "parameters": {
        "name": {
          "name": "name",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        },
        "isValid": {
          "name": "isValid",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "createRef": {
      "kind": "function",
      "signature": "export function createRef<T>(): RefObject<T>;",
      "returnValue": {
        "type": "RefObject<T>",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [
        {
          "kind": "text",
          "text": "Use React.createRef. May be removed in 6 months (Jan '19)."
        }
      ],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "createTheme": {
      "kind": "function",
      "signature": "export function createTheme(theme: IPartialTheme, depComments?: boolean): ITheme;",
      "returnValue": {
        "type": "ITheme",
        "description": []
      },
      "parameters": {
        "theme": {
          "name": "theme",
          "description": [
            {
              "kind": "text",
              "text": "Partial theme object."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "IPartialTheme"
        },
        "depComments": {
          "name": "depComments",
          "description": [
            {
              "kind": "text",
              "text": "Whether to include deprecated tags as comments for deprecated slots."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Creates a custom theme definition which can be used with the Customizer."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "css": {
      "kind": "function",
      "signature": "export function css(...args: ICssInput[]): string;",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {
        "args": {
          "name": "args",
          "description": [],
          "isOptional": false,
          "isSpread": true,
          "type": "ICssInput[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Concatination helper, which can merge class names together. Skips over falsey values."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "cssColor": {
      "kind": "function",
      "signature": "export function cssColor(color: string): IRGB | undefined;",
      "returnValue": {
        "type": "IRGB | undefined",
        "description": []
      },
      "parameters": {
        "color": {
          "name": "color",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "customizable": {
      "kind": "function",
      "signature": "export function customizable(scope: string, fields: string[], concatStyles?: boolean): <P>(ComposedComponent: React.ComponentType<P>) => any;",
      "returnValue": {
        "type": "<P>(ComposedComponent: React.ComponentType<P>) => any",
        "description": []
      },
      "parameters": {
        "scope": {
          "name": "scope",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        },
        "fields": {
          "name": "fields",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string[]"
        },
        "concatStyles": {
          "name": "concatStyles",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "Customizations": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "applyScopedSettings": {
          "kind": "method",
          "signature": "static applyScopedSettings(scopeName: string, settings: Settings): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "scopeName": {
              "name": "scopeName",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "settings": {
              "name": "settings",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Settings"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "applySettings": {
          "kind": "method",
          "signature": "static applySettings(settings: Settings): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "settings": {
              "name": "settings",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Settings"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getSettings": {
          "kind": "method",
          "signature": "static getSettings(properties: string[], scopeName?: string, localSettings?: ICustomizations): any;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "any",
            "description": []
          },
          "parameters": {
            "properties": {
              "name": "properties",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string[]"
            },
            "scopeName": {
              "name": "scopeName",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "string"
            },
            "localSettings": {
              "name": "localSettings",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "ICustomizations"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "observe": {
          "kind": "method",
          "signature": "static observe(onChange: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "onChange": {
              "name": "onChange",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "reset": {
          "kind": "method",
          "signature": "static reset(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "unobserve": {
          "kind": "method",
          "signature": "static unobserve(onChange: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "onChange": {
              "name": "onChange",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "Customizer": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The Customizer component allows for default props to be mixed into components which are decorated with the customizable() decorator, or use the styled HOC. This enables injection scenarios like:"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "1. render svg icons instead of the icon font within all buttons 2. inject a custom theme object into a component"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Props are provided via the settings prop which should be one of the following: - A json map which contains 1 or more name/value pairs representing injectable props. - A function that receives the current settings and returns the new ones that apply to the scope"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): React.ReactElement<{}>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "React.ReactElement<{}>",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DatePickerBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "IDatePicker",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IDatePickerProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDatePickerProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "DatePickerBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "DatePickerBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(prevProps: IDatePickerProps, prevState: IDatePickerState): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "prevProps": {
              "name": "prevProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDatePickerProps"
            },
            "prevState": {
              "name": "prevState",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDatePickerState"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(nextProps: IDatePickerProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "nextProps": {
              "name": "nextProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDatePickerProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IDatePickerProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IDatePickerProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "reset": {
          "kind": "method",
          "signature": "reset(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DateRangeType": {
      "kind": "enum",
      "values": {
        "Day": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Month": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Week": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WorkWeek": {
          "kind": "enum value",
          "value": "3",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The supported date range types"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "DayOfWeek": {
      "kind": "enum",
      "values": {
        "Friday": {
          "kind": "enum value",
          "value": "5",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Monday": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Saturday": {
          "kind": "enum value",
          "value": "6",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Sunday": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Thursday": {
          "kind": "enum value",
          "value": "4",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Tuesday": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Wednesday": {
          "kind": "enum value",
          "value": "3",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The days of the week"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "DefaultButton": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "_skipComponentRefResolution": {
          "kind": "property",
          "signature": "protected _skipComponentRefResolution: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Tell BaseComponent to bypass resolution of componentRef."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DelayedRender": {
      "kind": "class",
      "extends": "React.Component",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Utility component for delaying the render of a child component after a given delay. This component requires a single child component; don't pass in many components. Wrap multiple components in a DIV if necessary."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IDelayedRenderProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDelayedRenderProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "DelayedRender"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "DelayedRender",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "{\n        delay: number;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): React.ReactElement<{}> | null;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "React.ReactElement<{}> | null",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DetailsListBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "IDetailsList",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IDetailsListProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDetailsListProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "DetailsListBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "DetailsListBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "_onRenderRow": {
          "kind": "property",
          "signature": "protected _onRenderRow: (props: IDetailsRowProps, defaultRender?: any) => JSX.Element;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(props: IDetailsRowProps, defaultRender?: any) => JSX.Element",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(prevProps: any, prevState: any): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "prevProps": {
              "name": "prevProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "any"
            },
            "prevState": {
              "name": "prevState",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "any"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: IDetailsListProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDetailsListProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUpdate": {
          "kind": "method",
          "signature": "componentWillUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "{\n        layoutMode: DetailsListLayoutMode;\n        selectionMode: SelectionMode;\n        constrainMode: ConstrainMode;\n        checkboxVisibility: CheckboxVisibility;\n        isHeaderVisible: boolean;\n        enableShimmer: boolean;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focusIndex": {
          "kind": "method",
          "signature": "focusIndex(index: number, forceIntoFirstElement?: boolean, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "forceIntoFirstElement": {
              "name": "forceIntoFirstElement",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            },
            "measureItem": {
              "name": "measureItem",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "(itemIndex: number) => number"
            },
            "scrollToMode": {
              "name": "scrollToMode",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "ScrollToMode"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "forceUpdate": {
          "kind": "method",
          "signature": "forceUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getStartItemIndexInView": {
          "kind": "method",
          "signature": "getStartItemIndexInView(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scrollToIndex": {
          "kind": "method",
          "signature": "scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "measureItem": {
              "name": "measureItem",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "(itemIndex: number) => number"
            },
            "scrollToMode": {
              "name": "scrollToMode",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "ScrollToMode"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DetailsListLayoutMode": {
      "kind": "enum",
      "values": {
        "fixedColumns": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Lets the user resize columns and makes not attempt to fit them."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "justified": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Manages which columns are visible, tries to size them according to their min/max rules and drops off columns that can't fit and have isCollapsable set."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "DetailsRowBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IDetailsRowBaseProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDetailsRowBaseProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "DetailsRowBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "DetailsRowBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "_onRenderCheck": {
          "kind": "method",
          "signature": "protected _onRenderCheck(props: IDetailsRowCheckProps): JSX.Element;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDetailsRowCheckProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(previousProps: IDetailsRowBaseProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "previousProps": {
              "name": "previousProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDetailsRowBaseProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: IDetailsRowBaseProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDetailsRowBaseProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(forceIntoFirstElement?: boolean): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "forceIntoFirstElement": {
              "name": "forceIntoFirstElement",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "measureCell": {
          "kind": "method",
          "signature": "measureCell(index: number, onMeasureDone: (width: number) => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [
                {
                  "kind": "text",
                  "text": "The cell index"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "onMeasureDone": {
              "name": "onMeasureDone",
              "description": [
                {
                  "kind": "text",
                  "text": "The call back function when finish measure"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "(width: number) => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "measure cell at index. and call the call back with the measured cell width when finish measure"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "shouldComponentUpdate": {
          "kind": "method",
          "signature": "shouldComponentUpdate(nextProps: IDetailsRowBaseProps, nextState: IDetailsRowState): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "nextProps": {
              "name": "nextProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDetailsRowBaseProps"
            },
            "nextState": {
              "name": "nextState",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDetailsRowState"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DialogBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IDialogProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDialogProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "DialogBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "DialogBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IDialogProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IDialogProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DialogContentBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IDialogContentProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDialogContentProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "DialogContentBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "DialogContentBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IDialogContentProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IDialogContentProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DialogFooterBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DialogType": {
      "kind": "enum",
      "values": {
        "close": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Dialog with an 'x' close button in the upper-right corner"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "largeHeader": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Dialog with large header banner"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "normal": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Standard dialog"
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "DirectionalHint": {
      "kind": "enum",
      "values": {
        "bottomAutoEdge": {
          "kind": "enum value",
          "value": "7",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Appear below the target element, aligning with the target element such that the callout tends toward the center of the screen."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "bottomCenter": {
          "kind": "enum value",
          "value": "5",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Appear below the target element, with the centers of the callout and target aligning."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "bottomLeftEdge": {
          "kind": "enum value",
          "value": "4",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Appear below the target element, with the left edges of the callout and target aligning."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "bottomRightEdge": {
          "kind": "enum value",
          "value": "6",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Appear below the target element, with the right edges of the callout and target aligning."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "leftBottomEdge": {
          "kind": "enum value",
          "value": "10",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Appear to the left of the target element, with the bottom edges of the callout and target aligning."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "leftCenter": {
          "kind": "enum value",
          "value": "9",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Appear to the left of the target element, with the centers of the callout and target aligning."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "leftTopEdge": {
          "kind": "enum value",
          "value": "8",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Appear to the left of the target element, with the top edges of the callout and target aligning."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "rightBottomEdge": {
          "kind": "enum value",
          "value": "13",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Appear to the right of the target element, with the bottom edges of the callout and target aligning."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "rightCenter": {
          "kind": "enum value",
          "value": "12",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Appear to the right of the target element, with the centers of the callout and target aligning."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "rightTopEdge": {
          "kind": "enum value",
          "value": "11",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Appear to the right of the target element, with the top edges of the callout and target aligning."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "topAutoEdge": {
          "kind": "enum value",
          "value": "3",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Appear above the target element, aligning with the target element such that the callout tends toward the center of the screen."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "topCenter": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Appear above the target element, with the centers of the callout and target aligning."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "topLeftEdge": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Appear above the target element, with the left edges of the callout and target aligning."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "topRightEdge": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Appear above the target element, with the right edges of the callout and target aligning."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "disableBodyScroll": {
      "kind": "function",
      "signature": "export function disableBodyScroll(): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Disables the body scrolling."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "DocumentCard": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IDocumentCardProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDocumentCardProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "DocumentCard"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "DocumentCard",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IDocumentCardProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IDocumentCardProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DocumentCardActions": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DocumentCardActivity": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element | null;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element | null",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DocumentCardLocation": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DocumentCardLogo": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DocumentCardPreview": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DocumentCardStatus": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IDocumentCardStatusProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDocumentCardStatusProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "DocumentCardStatus"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "DocumentCardStatus",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DocumentCardTitle": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IDocumentCardTitleProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDocumentCardTitleProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "DocumentCardTitle"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "DocumentCardTitle",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: IDocumentCardTitleProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDocumentCardTitleProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DocumentCardType": {
      "kind": "enum",
      "values": {
        "compact": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Compact layout. Displays the preview beside the details, rather than above."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "normal": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Standard DocumentCard."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "doesElementContainFocus": {
      "kind": "function",
      "signature": "export function doesElementContainFocus(element: HTMLElement): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {
        "element": {
          "name": "element",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Determines if an element, or any of its children, contain focus."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "DropdownBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IDropdownProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDropdownProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "DropdownBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "DropdownBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(prevProps: IDropdownProps, prevState: IDropdownState): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "prevProps": {
              "name": "prevProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDropdownProps"
            },
            "prevState": {
              "name": "prevState",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDropdownState"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: IDropdownProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDropdownProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "{\n        options: any[];\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(shouldOpenOnFocus?: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "shouldOpenOnFocus": {
              "name": "shouldOpenOnFocus",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setSelectedIndex": {
          "kind": "method",
          "signature": "setSelectedIndex(event: React.FormEvent<HTMLDivElement>, index: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "event": {
              "name": "event",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "React.FormEvent<HTMLDivElement>"
            },
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "DropdownMenuItemType": {
      "kind": "enum",
      "values": {
        "Divider": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Header": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Normal": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "elementContains": {
      "kind": "function",
      "signature": "export function elementContains(parent: HTMLElement | null, child: HTMLElement | null, allowVirtualParents?: boolean): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {
        "parent": {
          "name": "parent",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement | null"
        },
        "child": {
          "name": "child",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement | null"
        },
        "allowVirtualParents": {
          "name": "allowVirtualParents",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Determines whether or not a parent element contains a given child element. If "
        },
        {
          "kind": "code",
          "text": "allowVirtualParents",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " is true, this method may return "
        },
        {
          "kind": "code",
          "text": "true",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " if the child has the parent in its virtual element hierarchy."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "elementContainsAttribute": {
      "kind": "function",
      "signature": "export function elementContainsAttribute(element: HTMLElement, attribute: string): string | null;",
      "returnValue": {
        "type": "string | null",
        "description": [
          {
            "kind": "text",
            "text": "the value of the first instance found"
          }
        ]
      },
      "parameters": {
        "element": {
          "name": "element",
          "description": [
            {
              "kind": "text",
              "text": "element to start searching at"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        },
        "attribute": {
          "name": "attribute",
          "description": [
            {
              "kind": "text",
              "text": "the attribute to search for"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Determines if an element, or any of its ancestors, contain the given attribute"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "ElementType": {
      "kind": "enum",
      "values": {
        "anchor": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "html-tag",
              "token": "<a>"
            },
            {
              "kind": "text",
              "text": " element."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "button": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "html-tag",
              "token": "<button>"
            },
            {
              "kind": "text",
              "text": " element."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "enableBodyScroll": {
      "kind": "function",
      "signature": "export function enableBodyScroll(): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Enables the body scrolling."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "EventGroup": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "An instance of EventGroup allows anything with a handle to it to trigger events on it. If the target is an HTMLElement, the event will be attached to the element and can be triggered as usual (like clicking for onclick). The event can be triggered by calling EventGroup.raise() here. If the target is an HTMLElement, the event gets raised and is handled by the browser. Otherwise, it gets handled here in EventGroup, and the handler is called in the context of the parent (which is passed in in the constructor)."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(parent: any);",
          "parameters": {
            "parent": {
              "name": "parent",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "any"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "parent: the context in which events attached to non-HTMLElements are called"
            }
          ],
          "remarks": []
        },
        "declare": {
          "kind": "method",
          "signature": "declare(event: string | string[]): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "event": {
              "name": "event",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string | string[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Declare an event as being supported by this instance of EventGroup."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "dispose": {
          "kind": "method",
          "signature": "dispose(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isDeclared": {
          "kind": "method",
          "signature": "static isDeclared(target: any, eventName: string): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "target": {
              "name": "target",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "any"
            },
            "eventName": {
              "name": "eventName",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Check to see if the target has declared support of the given event."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isObserved": {
          "kind": "method",
          "signature": "static isObserved(target: any, eventName: string): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "target": {
              "name": "target",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "any"
            },
            "eventName": {
              "name": "eventName",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "off": {
          "kind": "method",
          "signature": "off(target?: any, eventName?: string, callback?: (args?: any) => void, useCapture?: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "target": {
              "name": "target",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "any"
            },
            "eventName": {
              "name": "eventName",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "string"
            },
            "callback": {
              "name": "callback",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "(args?: any) => void"
            },
            "useCapture": {
              "name": "useCapture",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "on": {
          "kind": "method",
          "signature": "on(target: any, eventName: string, callback: (args?: any) => void, useCapture?: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "target": {
              "name": "target",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "any"
            },
            "eventName": {
              "name": "eventName",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "callback": {
              "name": "callback",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "(args?: any) => void"
            },
            "useCapture": {
              "name": "useCapture",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "On the target, attach an event whose handler will be called in the context of the parent of this instance of EventGroup."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "onAll": {
          "kind": "method",
          "signature": "onAll(target: any, events: {\n        [key: string]: (args?: any) => void;\n    }, useCapture?: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "target": {
              "name": "target",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "any"
            },
            "events": {
              "name": "events",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "{\n        [key: string]: (args?: any) => void;\n    }"
            },
            "useCapture": {
              "name": "useCapture",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "On the target, attach a set of events, where the events object is a name to function mapping."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "raise": {
          "kind": "method",
          "signature": "static raise(target: any, eventName: string, eventArgs?: any, bubbleEvent?: boolean): boolean | undefined;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "boolean | undefined",
            "description": []
          },
          "parameters": {
            "target": {
              "name": "target",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "any"
            },
            "eventName": {
              "name": "eventName",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "eventArgs": {
              "name": "eventArgs",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "any"
            },
            "bubbleEvent": {
              "name": "bubbleEvent",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "For IE8, bubbleEvent is ignored here and must be dealt with by the handler. Events raised here by default have bubbling set to false and cancelable set to true. This applies also to built-in events being raised manually here on HTMLElements, which may lead to unexpected behavior if it differs from the defaults."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "stopPropagation": {
          "kind": "method",
          "signature": "static stopPropagation(event: any): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "event": {
              "name": "event",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "any"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ExpandingCardBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IExpandingCardProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IExpandingCardProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ExpandingCardBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "ExpandingCardBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "{\n        compactCardHeight: number;\n        expandedCardHeight: number;\n        directionalHintFixed: boolean;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ExpandingCardMode": {
      "kind": "enum",
      "values": {
        "compact": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "To have top compact card only"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "expanded": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "To have both top compact and bottom expanded card"
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "ExtendedPeoplePicker": {
      "kind": "class",
      "extends": "BaseExtendedPeoplePicker",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "ExtendedSelectedItem": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: ISelectedPeopleItemProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ISelectedPeopleItemProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ExtendedSelectedItem"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "ExtendedSelectedItem",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "persona": {
          "kind": "property",
          "signature": "protected persona:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        (component: HTMLDivElement | null): void;\n        current: HTMLDivElement | null;\n        value: HTMLDivElement | null;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "FabricBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IFabricProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IFabricProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "FabricBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "FabricBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "FabricPerformance": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Performance helper class for measuring things."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "measure": {
          "kind": "method",
          "signature": "static measure(name: string, func: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "name": {
              "name": "name",
              "description": [
                {
                  "kind": "text",
                  "text": "The name of this measurement"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "func": {
              "name": "func",
              "description": [
                {
                  "kind": "text",
                  "text": "The logic to be measured for execution time"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Measures execution time of the given syncronous function. If the same logic is executed multiple times, each individual measurement will be collected as well the overall numbers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "reset": {
          "kind": "method",
          "signature": "static reset(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setPeriodicReset": {
          "kind": "method",
          "signature": "static setPeriodicReset(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "summary": {
          "kind": "property",
          "signature": "static summary: IPerfSummary;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IPerfSummary",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "FabricSlots": {
      "kind": "enum",
      "values": {
        "black": {
          "kind": "enum value",
          "value": "20",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "neutralDark": {
          "kind": "enum value",
          "value": "19",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "neutralLight": {
          "kind": "enum value",
          "value": "11",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "neutralLighter": {
          "kind": "enum value",
          "value": "10",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "neutralLighterAlt": {
          "kind": "enum value",
          "value": "9",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "neutralPrimary": {
          "kind": "enum value",
          "value": "18",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "neutralPrimaryAlt": {
          "kind": "enum value",
          "value": "17",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "neutralQuaternary": {
          "kind": "enum value",
          "value": "13",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "neutralQuaternaryAlt": {
          "kind": "enum value",
          "value": "12",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "neutralSecondary": {
          "kind": "enum value",
          "value": "16",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "neutralTertiary": {
          "kind": "enum value",
          "value": "15",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "neutralTertiaryAlt": {
          "kind": "enum value",
          "value": "14",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "themeDark": {
          "kind": "enum value",
          "value": "7",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "themeDarkAlt": {
          "kind": "enum value",
          "value": "6",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "themeDarker": {
          "kind": "enum value",
          "value": "8",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "themeLight": {
          "kind": "enum value",
          "value": "3",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "themeLighter": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "themeLighterAlt": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "themePrimary": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "themeSecondary": {
          "kind": "enum value",
          "value": "5",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "themeTertiary": {
          "kind": "enum value",
          "value": "4",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "white": {
          "kind": "enum value",
          "value": "21",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "FacepileBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "FacePile with no default styles. [Use the "
        },
        {
          "kind": "code",
          "text": "styles",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " API to add your own styles.](https://github.com/OfficeDev/office-ui-fabric-react/wiki/Component-Styling)"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IFacepileProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IFacepileProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "FacepileBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "FacepileBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IFacepileProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IFacepileProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderAriaDescription": {
          "kind": "method",
          "signature": "protected onRenderAriaDescription(): \"\" | JSX.Element | undefined;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "\"\" | JSX.Element | undefined",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "filteredAssign": {
      "kind": "function",
      "signature": "export function filteredAssign(isAllowed: (propName: string) => boolean, target: any, ...args: any[]): any;",
      "returnValue": {
        "type": "any",
        "description": [
          {
            "kind": "text",
            "text": "Resulting merged target."
          }
        ]
      },
      "parameters": {
        "isAllowed": {
          "name": "isAllowed",
          "description": [
            {
              "kind": "text",
              "text": "Callback to determine if the given propName is allowed in the result."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "(propName: string) => boolean"
        },
        "target": {
          "name": "target",
          "description": [
            {
              "kind": "text",
              "text": "Target object to merge following object arguments into."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "any"
        },
        "args": {
          "name": "args",
          "description": [
            {
              "kind": "text",
              "text": "One or more objects that will be mixed into the target in the order they are provided."
            }
          ],
          "isOptional": false,
          "isSpread": true,
          "type": "any[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Makes a resulting merge of a bunch of objects, but allows a filter function to be passed in to filter the resulting merges. This allows for scenarios where you want to merge \"everything except that one thing\" or \"properties that start with data-\". Note that this will shallow merge; it will not create new cloned values for target members."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "find": {
      "kind": "function",
      "signature": "export function find<T>(array: T[], cb: (item: T, index: number) => boolean): T | undefined;",
      "returnValue": {
        "type": "T | undefined",
        "description": []
      },
      "parameters": {
        "array": {
          "name": "array",
          "description": [
            {
              "kind": "text",
              "text": "Array to search"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "T[]"
        },
        "cb": {
          "name": "cb",
          "description": [
            {
              "kind": "text",
              "text": "Callback which returns true on matches"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "(item: T, index: number) => boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Helper to find the first item within an array that satisfies the callback."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "findElementRecursive": {
      "kind": "function",
      "signature": "export function findElementRecursive(element: HTMLElement | null, matchFunction: (element: HTMLElement) => boolean): HTMLElement | null;",
      "returnValue": {
        "type": "HTMLElement | null",
        "description": [
          {
            "kind": "text",
            "text": "the matched element or null no match was found"
          }
        ]
      },
      "parameters": {
        "element": {
          "name": "element",
          "description": [
            {
              "kind": "text",
              "text": "element to start searching at"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement | null"
        },
        "matchFunction": {
          "name": "matchFunction",
          "description": [
            {
              "kind": "text",
              "text": "the function that determines if the element is a match"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "(element: HTMLElement) => boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Finds the first parent element where the matchFunction returns true"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "findIndex": {
      "kind": "function",
      "signature": "export function findIndex<T>(array: T[], cb: (item: T, index: number) => boolean): number;",
      "returnValue": {
        "type": "number",
        "description": []
      },
      "parameters": {
        "array": {
          "name": "array",
          "description": [
            {
              "kind": "text",
              "text": "Array to search."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "T[]"
        },
        "cb": {
          "name": "cb",
          "description": [
            {
              "kind": "text",
              "text": "Callback which returns true on matches."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "(item: T, index: number) => boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Helper to find the index of an item within an array, using a callback to determine the match."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "findScrollableParent": {
      "kind": "function",
      "signature": "export function findScrollableParent(startingElement: HTMLElement | null): HTMLElement | null;",
      "returnValue": {
        "type": "HTMLElement | null",
        "description": []
      },
      "parameters": {
        "startingElement": {
          "name": "startingElement",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement | null"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Traverses up the DOM for the element with the data-is-scrollable=true attribute, or returns document.body."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "FirstWeekOfYear": {
      "kind": "enum",
      "values": {
        "FirstDay": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FirstFourDayWeek": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FirstFullWeek": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "First week of the year settings types"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "fitContentToBounds": {
      "kind": "function",
      "signature": "export function fitContentToBounds(options: IFitContentToBoundsOptions): ISize;",
      "returnValue": {
        "type": "ISize",
        "description": []
      },
      "parameters": {
        "options": {
          "name": "options",
          "description": [
            {
              "kind": "text",
              "text": "the options for the bounds fit operation"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "IFitContentToBoundsOptions"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Produces a proportionally-scaled version of an input content size when fit to a bounding size. Given a "
        },
        {
          "kind": "code",
          "text": "contentSize",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " and a "
        },
        {
          "kind": "code",
          "text": "boundsSize",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": ", this function scales "
        },
        {
          "kind": "code",
          "text": "contentSize",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " proportionally using either "
        },
        {
          "kind": "code",
          "text": "contain",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " or "
        },
        {
          "kind": "code",
          "text": "cover",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " fit behaviors. Use this function to pre-calculate the layout for the CSS "
        },
        {
          "kind": "code",
          "text": "object-fit",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " and "
        },
        {
          "kind": "code",
          "text": "background-fit",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " behaviors. With "
        },
        {
          "kind": "code",
          "text": "contain",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": ", the output size must be the largest it can be while completely within the "
        },
        {
          "kind": "code",
          "text": "boundsSize",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": ". With "
        },
        {
          "kind": "code",
          "text": "cover",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": ", the output size must be the smallest it can be while completely around the "
        },
        {
          "kind": "code",
          "text": "boundsSize",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": ". By default, there is a "
        },
        {
          "kind": "code",
          "text": "maxScale",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " value of 1, which prevents the "
        },
        {
          "kind": "code",
          "text": "contentSize",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " from being scaled larger."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "flatten": {
      "kind": "function",
      "signature": "export function flatten<T>(array: (T | T[])[]): T[];",
      "returnValue": {
        "type": "T[]",
        "description": []
      },
      "parameters": {
        "array": {
          "name": "array",
          "description": [
            {
              "kind": "text",
              "text": "The array where each element can optionally also be an array"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "(T | T[])[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Given an array where each element is of type T or T[], flatten it into an array of T"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "FloatingPeoplePicker": {
      "kind": "class",
      "extends": "BaseFloatingPeoplePicker",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: any;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "focusAsync": {
      "kind": "function",
      "signature": "export function focusAsync(element: HTMLElement | {\n    focus: () => void;\n} | undefined | null): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "element": {
          "name": "element",
          "description": [
            {
              "kind": "text",
              "text": "The element to focus"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement | {\n    focus: () => void;\n} | undefined | null"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Sets focus to an element asynchronously. The focus will be set at the next browser repaint, meaning it won't cause any extra recalculations. If more than one focusAsync is called during one frame, only the latest called focusAsync element will actually be focused"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "focusClear": {
      "kind": "function",
      "signature": "export function focusClear(): IRawStyle;",
      "returnValue": {
        "type": "IRawStyle",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Generates style to clear browser specific focus styles."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "focusFirstChild": {
      "kind": "function",
      "signature": "export function focusFirstChild(rootElement: HTMLElement): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": [
          {
            "kind": "text",
            "text": "True if focus was set, false if it was not."
          }
        ]
      },
      "parameters": {
        "rootElement": {
          "name": "rootElement",
          "description": [
            {
              "kind": "text",
              "text": "Element to start the search for a focusable child."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Attempts to focus the first focusable element that is a child or child's child of the rootElement."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "FocusTrapZone": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "IFocusTrapZone",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillMount": {
          "kind": "method",
          "signature": "componentWillMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(nextProps: IFocusTrapZoneProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "nextProps": {
              "name": "nextProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IFocusTrapZoneProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "FocusZone": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "IFocusZone",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IFocusZoneProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IFocusZoneProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "FocusZone"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "FocusZone",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IFocusZoneProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IFocusZoneProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(forceIntoFirstElement?: boolean): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "True if focus could be set to an active element, false if no operation was taken."
              }
            ]
          },
          "parameters": {
            "forceIntoFirstElement": {
              "name": "forceIntoFirstElement",
              "description": [
                {
                  "kind": "text",
                  "text": "If true, focus will be forced into the first element, even if focus is already in the focus zone."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the first tabbable item in the zone."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "focusElement": {
          "kind": "method",
          "signature": "focusElement(element: HTMLElement): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "True if focus could be set to an active element, false if no operation was taken."
              }
            ]
          },
          "parameters": {
            "element": {
              "name": "element",
              "description": [
                {
                  "kind": "text",
                  "text": "The child element within the zone to focus."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "HTMLElement"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to a specific child element within the zone. This can be used in conjunction with onBeforeFocus to created delayed focus scenarios (like animate the scroll position to the correct location and then focus.)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "FocusZoneDirection": {
      "kind": "enum",
      "values": {
        "bidirectional": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "React to all arrows."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "horizontal": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Only react to left/right arrows."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "vertical": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Only react to up/down arrows."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "FocusZoneTabbableElements": {
      "kind": "enum",
      "values": {
        "all": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "All tabbing action is allowed"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "inputOnly": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Tabbing is allowed only on input elements"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "none": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Tabbing is not allowed"
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "fontFace": {
      "kind": "function",
      "signature": "export function fontFace(font: IFontFace): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "font": {
          "name": "font",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "IFontFace"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Registers a font face."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "FontSizes": {
      "kind": "namespace",
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "exports": {
        "icon": {
          "kind": "module variable",
          "signature": "icon: string",
          "type": "string",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "large": {
          "kind": "module variable",
          "signature": "large: string",
          "type": "string",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "medium": {
          "kind": "module variable",
          "signature": "medium: string",
          "type": "string",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "mediumPlus": {
          "kind": "module variable",
          "signature": "mediumPlus: string",
          "type": "string",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "mega": {
          "kind": "module variable",
          "signature": "mega: string",
          "type": "string",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "mini": {
          "kind": "module variable",
          "signature": "mini: string",
          "type": "string",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "small": {
          "kind": "module variable",
          "signature": "small: string",
          "type": "string",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "smallPlus": {
          "kind": "module variable",
          "signature": "smallPlus: string",
          "type": "string",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "superLarge": {
          "kind": "module variable",
          "signature": "superLarge: string",
          "type": "string",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "xLarge": {
          "kind": "module variable",
          "signature": "xLarge: string",
          "type": "string",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "xSmall": {
          "kind": "module variable",
          "signature": "xSmall: string",
          "type": "string",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "xxLarge": {
          "kind": "module variable",
          "signature": "xxLarge: string",
          "type": "string",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "FontWeights": {
      "kind": "namespace",
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "exports": {
        "bold": {
          "kind": "module variable",
          "signature": "bold: IFontWeight",
          "type": "IFontWeight",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "light": {
          "kind": "module variable",
          "signature": "light: IFontWeight",
          "type": "IFontWeight",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "regular": {
          "kind": "module variable",
          "signature": "regular: IFontWeight",
          "type": "IFontWeight",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "semibold": {
          "kind": "module variable",
          "signature": "semibold: IFontWeight",
          "type": "IFontWeight",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "semilight": {
          "kind": "module variable",
          "signature": "semilight: IFontWeight",
          "type": "IFontWeight",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "format": {
      "kind": "function",
      "signature": "export function format(s: string, ...values: any[]): string;",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {
        "s": {
          "name": "s",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        },
        "values": {
          "name": "values",
          "description": [],
          "isOptional": false,
          "isSpread": true,
          "type": "any[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "String format method, used for scenarios where at runtime you need to evaluate a formatted string given a tokenized string. This usually only is needed in localization scenarios."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getBackgroundShade": {
      "kind": "function",
      "signature": "export function getBackgroundShade(color: IColor, shade: Shade, isInverted?: boolean): IColor | null;",
      "returnValue": {
        "type": "IColor | null",
        "description": []
      },
      "parameters": {
        "color": {
          "name": "color",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "IColor"
        },
        "shade": {
          "name": "shade",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "Shade"
        },
        "isInverted": {
          "name": "isInverted",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "getChildren": {
      "kind": "function",
      "signature": "export function getChildren(parent: HTMLElement, allowVirtualChildren?: boolean): HTMLElement[];",
      "returnValue": {
        "type": "HTMLElement[]",
        "description": []
      },
      "parameters": {
        "parent": {
          "name": "parent",
          "description": [
            {
              "kind": "text",
              "text": "The element to get the children of."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        },
        "allowVirtualChildren": {
          "name": "allowVirtualChildren",
          "description": [
            {
              "kind": "text",
              "text": "true if the method should enumerate virtual child elements."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Gets the elements which are child elements of the given element. If "
        },
        {
          "kind": "code",
          "text": "allowVirtualChildren",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " is "
        },
        {
          "kind": "code",
          "text": "true",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": ", this method enumerates virtual child elements after the original children."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getColorFromRGBA": {
      "kind": "function",
      "signature": "export function getColorFromRGBA(rgba: {\n    r: number;\n    g: number;\n    b: number;\n    a: number;\n}): IColor;",
      "returnValue": {
        "type": "IColor",
        "description": []
      },
      "parameters": {
        "rgba": {
          "name": "rgba",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "{\n    r: number;\n    g: number;\n    b: number;\n    a: number;\n}"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "getColorFromString": {
      "kind": "function",
      "signature": "export function getColorFromString(inputColor: string): IColor | undefined;",
      "returnValue": {
        "type": "IColor | undefined",
        "description": []
      },
      "parameters": {
        "inputColor": {
          "name": "inputColor",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "getContrastRatio": {
      "kind": "function",
      "signature": "export function getContrastRatio(color1: IColor, color2: IColor): number;",
      "returnValue": {
        "type": "number",
        "description": []
      },
      "parameters": {
        "color1": {
          "name": "color1",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "IColor"
        },
        "color2": {
          "name": "color2",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "IColor"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "getDistanceBetweenPoints": {
      "kind": "function",
      "signature": "export function getDistanceBetweenPoints(point1: IPoint, point2: IPoint): number;",
      "returnValue": {
        "type": "number",
        "description": []
      },
      "parameters": {
        "point1": {
          "name": "point1",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "IPoint"
        },
        "point2": {
          "name": "point2",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "IPoint"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Determines the distance between two points."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getDocument": {
      "kind": "function",
      "signature": "export function getDocument(rootElement?: HTMLElement | null): Document | undefined;",
      "returnValue": {
        "type": "Document | undefined",
        "description": []
      },
      "parameters": {
        "rootElement": {
          "name": "rootElement",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "HTMLElement | null"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Helper to get the document object."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getFadedOverflowStyle": {
      "kind": "function",
      "signature": "export function getFadedOverflowStyle(theme: ITheme, color?: keyof ISemanticColors | keyof IPalette, direction?: 'horizontal' | 'vertical', width?: string | number, height?: string | number): IRawStyle;",
      "returnValue": {
        "type": "IRawStyle",
        "description": [
          {
            "kind": "text",
            "text": "The style object."
          }
        ]
      },
      "parameters": {
        "theme": {
          "name": "theme",
          "description": [
            {
              "kind": "text",
              "text": "The theme object to use."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "ITheme"
        },
        "color": {
          "name": "color",
          "description": [
            {
              "kind": "text",
              "text": "The background color to fade out to. Accepts only keys of ISemanticColors or IPalette. Defaults to 'bodyBackground'."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "keyof ISemanticColors | keyof IPalette"
        },
        "direction": {
          "name": "direction",
          "description": [
            {
              "kind": "text",
              "text": "The direction of the overflow. Defaults to horizontal."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "'horizontal' | 'vertical'"
        },
        "width": {
          "name": "width",
          "description": [
            {
              "kind": "text",
              "text": "The width of the fading overflow. Vertical direction defaults it to 100% vs 20px when horizontal."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "string | number"
        },
        "height": {
          "name": "height",
          "description": [
            {
              "kind": "text",
              "text": "The Height of the fading overflow. Vertical direction defaults it to 50% vs 100% when horizontal."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "string | number"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "- Generates a style used to fade out an overflowing content by defining a style for an :after pseudo element. - Apply it to the :after selector for all combination of states the parent of content might have (normal, hover, selected, focus). - Requires the target to have position set to relative and overflow set to hidden."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getFirstFocusable": {
      "kind": "function",
      "signature": "export function getFirstFocusable(rootElement: HTMLElement, currentElement: HTMLElement, includeElementsInFocusZones?: boolean): HTMLElement | null;",
      "returnValue": {
        "type": "HTMLElement | null",
        "description": []
      },
      "parameters": {
        "rootElement": {
          "name": "rootElement",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        },
        "currentElement": {
          "name": "currentElement",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        },
        "includeElementsInFocusZones": {
          "name": "includeElementsInFocusZones",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Gets the first focusable element."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getFirstTabbable": {
      "kind": "function",
      "signature": "export function getFirstTabbable(rootElement: HTMLElement, currentElement: HTMLElement, includeElementsInFocusZones?: boolean): HTMLElement | null;",
      "returnValue": {
        "type": "HTMLElement | null",
        "description": []
      },
      "parameters": {
        "rootElement": {
          "name": "rootElement",
          "description": [
            {
              "kind": "text",
              "text": "The parent element to search beneath."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        },
        "currentElement": {
          "name": "currentElement",
          "description": [
            {
              "kind": "text",
              "text": "The descendant of rootElement to start the search at. This element is the first one checked, and iteration continues forward. Typical use passes rootElement.firstChild."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        },
        "includeElementsInFocusZones": {
          "name": "includeElementsInFocusZones",
          "description": [
            {
              "kind": "text",
              "text": "true if traversal should go into FocusZone descendants."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Gets the first tabbable element. The difference between focusable and tabbable is that tabbable elements are focusable elements that also have tabIndex != -1."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getFocusStyle": {
      "kind": "function",
      "signature": "export function getFocusStyle(theme: ITheme, inset?: number, position?: 'relative' | 'absolute', highContrastStyle?: IRawStyle | undefined, borderColor?: string, outlineColor?: string, isFocusedOnly?: boolean): IRawStyle;",
      "returnValue": {
        "type": "IRawStyle",
        "description": [
          {
            "kind": "text",
            "text": "The style object."
          }
        ]
      },
      "parameters": {
        "theme": {
          "name": "theme",
          "description": [
            {
              "kind": "text",
              "text": "The theme object to use."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "ITheme"
        },
        "inset": {
          "name": "inset",
          "description": [
            {
              "kind": "text",
              "text": "The number of pixels to inset the border."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "number"
        },
        "position": {
          "name": "position",
          "description": [
            {
              "kind": "text",
              "text": "The positioning applied to the container. Must be 'relative' or 'absolute' so that the focus border can live around it."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "'relative' | 'absolute'"
        },
        "highContrastStyle": {
          "name": "highContrastStyle",
          "description": [
            {
              "kind": "text",
              "text": "Style for high contrast mode."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "IRawStyle | undefined"
        },
        "borderColor": {
          "name": "borderColor",
          "description": [
            {
              "kind": "text",
              "text": "Color of the border."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "string"
        },
        "outlineColor": {
          "name": "outlineColor",
          "description": [
            {
              "kind": "text",
              "text": "Color of the outline."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "string"
        },
        "isFocusedOnly": {
          "name": "isFocusedOnly",
          "description": [
            {
              "kind": "text",
              "text": "If the styles should apply on focus or not."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Generates a focus style which can be used to define an :after focus border."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getFullColorString": {
      "kind": "function",
      "signature": "export function getFullColorString(color: IColor): string;",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {
        "color": {
          "name": "color",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "IColor"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "getGlobalClassNames": {
      "kind": "function",
      "signature": "export function getGlobalClassNames<T>(classNames: GlobalClassNames<T>, theme: ITheme, disableGlobalClassNames?: boolean): Partial<GlobalClassNames<T>>;",
      "returnValue": {
        "type": "Partial<GlobalClassNames<T>>",
        "description": []
      },
      "parameters": {
        "classNames": {
          "name": "classNames",
          "description": [
            {
              "kind": "text",
              "text": "The collection of global class names that apply when the flag is false. Make sure to pass in the same instance on each call to benefit from memoization."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "GlobalClassNames<T>"
        },
        "theme": {
          "name": "theme",
          "description": [
            {
              "kind": "text",
              "text": "The theme to check the flag on"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "ITheme"
        },
        "disableGlobalClassNames": {
          "name": "disableGlobalClassNames",
          "description": [
            {
              "kind": "text",
              "text": "Optional. Explicitly opt in/out of disabling global classnames. Defaults to false."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Checks for the "
        },
        {
          "kind": "code",
          "text": "disableGlobalClassNames",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " property on the "
        },
        {
          "kind": "code",
          "text": "theme",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " to determine if it should return "
        },
        {
          "kind": "code",
          "text": "classNames",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " Note that calls to this function are memoized."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getIcon": {
      "kind": "function",
      "signature": "export function getIcon(name?: string): IIconRecord | undefined;",
      "returnValue": {
        "type": "IIconRecord | undefined",
        "description": []
      },
      "parameters": {
        "name": {
          "name": "name",
          "description": [
            {
              "kind": "text",
              "text": "Name of icon."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "string"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Gets an icon definition. If an icon is requested but the subset has yet to be registered, it will get registered immediately."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getIconClassName": {
      "kind": "function",
      "signature": "export function getIconClassName(name: string): string;",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {
        "name": {
          "name": "name",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Gets an icon classname. You should be able to add this classname to an I tag with no additional classnames, and render the icon."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getId": {
      "kind": "function",
      "signature": "export function getId(prefix?: string): string;",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {
        "prefix": {
          "name": "prefix",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "string"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Generates a unique id in the global scope (this spans across duplicate copies of the same library.)"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getInitials": {
      "kind": "function",
      "signature": "export function getInitials(displayName: string | undefined | null, isRtl: boolean, allowPhoneInitials?: boolean): string;",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {
        "displayName": {
          "name": "displayName",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string | undefined | null"
        },
        "isRtl": {
          "name": "isRtl",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "boolean"
        },
        "allowPhoneInitials": {
          "name": "allowPhoneInitials",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Get (up to 2 characters) initials based on display name of the persona."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getLanguage": {
      "kind": "function",
      "signature": "export function getLanguage(): string | null;",
      "returnValue": {
        "type": "string | null",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Gets the rtl state of the page (returns true if in rtl.)"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getLastFocusable": {
      "kind": "function",
      "signature": "export function getLastFocusable(rootElement: HTMLElement, currentElement: HTMLElement, includeElementsInFocusZones?: boolean): HTMLElement | null;",
      "returnValue": {
        "type": "HTMLElement | null",
        "description": []
      },
      "parameters": {
        "rootElement": {
          "name": "rootElement",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        },
        "currentElement": {
          "name": "currentElement",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        },
        "includeElementsInFocusZones": {
          "name": "includeElementsInFocusZones",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Gets the last focusable element."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getLastTabbable": {
      "kind": "function",
      "signature": "export function getLastTabbable(rootElement: HTMLElement, currentElement: HTMLElement, includeElementsInFocusZones?: boolean): HTMLElement | null;",
      "returnValue": {
        "type": "HTMLElement | null",
        "description": []
      },
      "parameters": {
        "rootElement": {
          "name": "rootElement",
          "description": [
            {
              "kind": "text",
              "text": "The parent element to search beneath."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        },
        "currentElement": {
          "name": "currentElement",
          "description": [
            {
              "kind": "text",
              "text": "The descendant of rootElement to start the search at. This element is the first one checked, and iteration continues in reverse. Typical use passes rootElement.lastChild."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        },
        "includeElementsInFocusZones": {
          "name": "includeElementsInFocusZones",
          "description": [
            {
              "kind": "text",
              "text": "true if traversal should go into FocusZone descendants."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Gets the last tabbable element. The difference between focusable and tabbable is that tabbable elements are focusable elements that also have tabIndex != -1."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getNativeProps": {
      "kind": "function",
      "signature": "export function getNativeProps<T>(props: {}, allowedPropNames: string[], excludedPropNames?: string[]): T;",
      "returnValue": {
        "type": "T",
        "description": [
          {
            "kind": "text",
            "text": "The filtered props"
          }
        ]
      },
      "parameters": {
        "props": {
          "name": "props",
          "description": [
            {
              "kind": "text",
              "text": "The unfiltered input props"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "{}"
        },
        "allowedPropNames": {
          "name": "allowedPropNames",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string[]"
        },
        "excludedPropNames": {
          "name": "excludedPropNames",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "string[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Gets native supported props for an html element provided the allowance set. Use one of the property sets defined (divProperties, buttonPropertes, etc) to filter out supported properties from a given props set. Note that all data- and aria- prefixed attributes will be allowed. NOTE: getNativeProps should always be applied first when adding props to a react component. The non-native props should be applied second. This will prevent getNativeProps from overriding your custom props. For example, if props passed to getNativeProps has an onClick function and getNativeProps is added to the component after an onClick function is added, then the getNativeProps onClick will override it."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getNextElement": {
      "kind": "function",
      "signature": "export function getNextElement(rootElement: HTMLElement, currentElement: HTMLElement | null, checkNode?: boolean, suppressParentTraversal?: boolean, suppressChildTraversal?: boolean, includeElementsInFocusZones?: boolean, allowFocusRoot?: boolean, tabbable?: boolean): HTMLElement | null;",
      "returnValue": {
        "type": "HTMLElement | null",
        "description": []
      },
      "parameters": {
        "rootElement": {
          "name": "rootElement",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        },
        "currentElement": {
          "name": "currentElement",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement | null"
        },
        "checkNode": {
          "name": "checkNode",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        },
        "suppressParentTraversal": {
          "name": "suppressParentTraversal",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        },
        "suppressChildTraversal": {
          "name": "suppressChildTraversal",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        },
        "includeElementsInFocusZones": {
          "name": "includeElementsInFocusZones",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        },
        "allowFocusRoot": {
          "name": "allowFocusRoot",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        },
        "tabbable": {
          "name": "tabbable",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Traverse to find the next focusable element. If tabbable is true, the element must have tabIndex != -1."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getParent": {
      "kind": "function",
      "signature": "export function getParent(child: HTMLElement, allowVirtualParents?: boolean): HTMLElement | null;",
      "returnValue": {
        "type": "HTMLElement | null",
        "description": []
      },
      "parameters": {
        "child": {
          "name": "child",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        },
        "allowVirtualParents": {
          "name": "allowVirtualParents",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Gets the element which is the parent of a given element. If "
        },
        {
          "kind": "code",
          "text": "allowVirtuaParents",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " is "
        },
        {
          "kind": "code",
          "text": "true",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": ", this method prefers the virtual parent over real DOM parent when present."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getPreviousElement": {
      "kind": "function",
      "signature": "export function getPreviousElement(rootElement: HTMLElement, currentElement: HTMLElement | null, checkNode?: boolean, suppressParentTraversal?: boolean, traverseChildren?: boolean, includeElementsInFocusZones?: boolean, allowFocusRoot?: boolean, tabbable?: boolean): HTMLElement | null;",
      "returnValue": {
        "type": "HTMLElement | null",
        "description": []
      },
      "parameters": {
        "rootElement": {
          "name": "rootElement",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        },
        "currentElement": {
          "name": "currentElement",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement | null"
        },
        "checkNode": {
          "name": "checkNode",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        },
        "suppressParentTraversal": {
          "name": "suppressParentTraversal",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        },
        "traverseChildren": {
          "name": "traverseChildren",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        },
        "includeElementsInFocusZones": {
          "name": "includeElementsInFocusZones",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        },
        "allowFocusRoot": {
          "name": "allowFocusRoot",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        },
        "tabbable": {
          "name": "tabbable",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Traverse to find the previous element. If tabbable is true, the element must have tabIndex != -1."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getRect": {
      "kind": "function",
      "signature": "export function getRect(element: HTMLElement | Window | null): IRectangle | undefined;",
      "returnValue": {
        "type": "IRectangle | undefined",
        "description": []
      },
      "parameters": {
        "element": {
          "name": "element",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement | Window | null"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Helper to get bounding client rect, works with window."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getResourceUrl": {
      "kind": "function",
      "signature": "export function getResourceUrl(url: string): string;",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {
        "url": {
          "name": "url",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Sets the current base url used for fetching images."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getRTL": {
      "kind": "function",
      "signature": "export function getRTL(): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Gets the rtl state of the page (returns true if in rtl.)"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getRTLSafeKeyCode": {
      "kind": "function",
      "signature": "export function getRTLSafeKeyCode(key: number): number;",
      "returnValue": {
        "type": "number",
        "description": []
      },
      "parameters": {
        "key": {
          "name": "key",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Returns the given key, but flips right/left arrows if necessary."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getSchemedContext": {
      "kind": "function",
      "signature": "export function getSchemedContext(scheme: ISchemeNames, context: ICustomizerContext, settingsTheme?: ITheme): ICustomizerContext | undefined;",
      "returnValue": {
        "type": "ICustomizerContext | undefined",
        "description": []
      },
      "parameters": {
        "scheme": {
          "name": "scheme",
          "description": [
            {
              "kind": "text",
              "text": "Scheme to get customizations for."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "ISchemeNames"
        },
        "context": {
          "name": "context",
          "description": [
            {
              "kind": "text",
              "text": "Context in which to get schemed customizations."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "ICustomizerContext"
        },
        "settingsTheme": {
          "name": "settingsTheme",
          "description": [
            {
              "kind": "text",
              "text": "Themes setting fallback if context does not have schemed theme."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "ITheme"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Modify context to activate the specified scheme, using scheme in context (if available) and falling back to settingsTheme. If no scheme is available, undefined context will be returned."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getScreenSelector": {
      "kind": "function",
      "signature": "export function getScreenSelector(min: number, max: number): string;",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {
        "min": {
          "name": "min",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "max": {
          "name": "max",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "getScrollbarWidth": {
      "kind": "function",
      "signature": "export function getScrollbarWidth(): number;",
      "returnValue": {
        "type": "number",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Calculates the width of a scrollbar for the browser/os."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getShade": {
      "kind": "function",
      "signature": "export function getShade(color: IColor, shade: Shade, isInverted?: boolean): IColor | null;",
      "returnValue": {
        "type": "IColor | null",
        "description": []
      },
      "parameters": {
        "color": {
          "name": "color",
          "description": [
            {
              "kind": "text",
              "text": "The base color whose shade is to be computed"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "IColor"
        },
        "shade": {
          "name": "shade",
          "description": [
            {
              "kind": "text",
              "text": "The shade of the base color to compute"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "Shade"
        },
        "isInverted": {
          "name": "isInverted",
          "description": [
            {
              "kind": "text",
              "text": "Default false. Whether the given theme is inverted (reverse strongen/soften logic)"
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Given a color and a shade specification, generates the requested shade of the color. Logic: if white darken via tables defined above if black lighten if light strongen if dark soften else default soften or strongen depending on shade#"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getSubmenuItems": {
      "kind": "function",
      "signature": "export function getSubmenuItems(item: IContextualMenuItem): any;",
      "returnValue": {
        "type": "any",
        "description": []
      },
      "parameters": {
        "item": {
          "name": "item",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "IContextualMenuItem"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "getTheme": {
      "kind": "function",
      "signature": "export function getTheme(depComments?: boolean): ITheme;",
      "returnValue": {
        "type": "ITheme",
        "description": []
      },
      "parameters": {
        "depComments": {
          "name": "depComments",
          "description": [
            {
              "kind": "text",
              "text": "Whether to include deprecated tags as comments for deprecated slots."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Gets the theme object"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getVirtualParent": {
      "kind": "function",
      "signature": "export function getVirtualParent(child: HTMLElement): HTMLElement | undefined;",
      "returnValue": {
        "type": "HTMLElement | undefined",
        "description": []
      },
      "parameters": {
        "child": {
          "name": "child",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Gets the virtual parent given the child element, if it exists."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "getWindow": {
      "kind": "function",
      "signature": "export function getWindow(rootElement?: Element | null): Window | undefined;",
      "returnValue": {
        "type": "Window | undefined",
        "description": []
      },
      "parameters": {
        "rootElement": {
          "name": "rootElement",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "Element | null"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Helper to get the window object."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "GlobalSettings": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Global settings helper, which stores settings in the global (window) namespace. If window is not provided, it will store settings in module scope. Provides a way to observe changes as well when their values change."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "addChangeListener": {
          "kind": "method",
          "signature": "static addChangeListener(cb: IChangeEventCallback): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "cb": {
              "name": "cb",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IChangeEventCallback"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getValue": {
          "kind": "method",
          "signature": "static getValue<T>(key: string, defaultValue?: T | (() => T)): T;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "T",
            "description": []
          },
          "parameters": {
            "key": {
              "name": "key",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "defaultValue": {
              "name": "defaultValue",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "T | (() => T)"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "removeChangeListener": {
          "kind": "method",
          "signature": "static removeChangeListener(cb: IChangeEventCallback): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "cb": {
              "name": "cb",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IChangeEventCallback"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setValue": {
          "kind": "method",
          "signature": "static setValue<T>(key: string, value: T): T;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "T",
            "description": []
          },
          "parameters": {
            "key": {
              "name": "key",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "value": {
              "name": "value",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "T"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "GridCell": {
      "kind": "class",
      "extends": "React.Component",
      "implements": "",
      "typeParameters": [
        "T",
        "P extends IGridCellProps<T>"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "{\n        disabled: boolean;\n        id: string;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "GroupedListBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "IGroupedList",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IGroupedListProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IGroupedListProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "GroupedListBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "GroupedListBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: IGroupedListProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IGroupedListProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "{\n        selectionMode: SelectionMode;\n        isHeaderVisible: boolean;\n        groupProps: {};\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "forceUpdate": {
          "kind": "method",
          "signature": "forceUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getStartItemIndexInView": {
          "kind": "method",
          "signature": "getStartItemIndexInView(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "refs": {
          "kind": "property",
          "signature": "refs:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        [key: string]: React.ReactInstance;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scrollToIndex": {
          "kind": "method",
          "signature": "scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "measureItem": {
              "name": "measureItem",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "(itemIndex: number) => number"
            },
            "scrollToMode": {
              "name": "scrollToMode",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "ScrollToMode"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toggleCollapseAll": {
          "kind": "method",
          "signature": "toggleCollapseAll(allCollapsed: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "allCollapsed": {
              "name": "allCollapsed",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "hasHorizontalOverflow": {
      "kind": "function",
      "signature": "export function hasHorizontalOverflow(element: HTMLElement): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": [
          {
            "kind": "text",
            "text": "True if element's content overflows"
          }
        ]
      },
      "parameters": {
        "element": {
          "name": "element",
          "description": [
            {
              "kind": "text",
              "text": "Element to check for overflow"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Detects whether an element's content has horizontal overflow"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "hasOverflow": {
      "kind": "function",
      "signature": "export function hasOverflow(element: HTMLElement): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": [
          {
            "kind": "text",
            "text": "True if element's content overflows"
          }
        ]
      },
      "parameters": {
        "element": {
          "name": "element",
          "description": [
            {
              "kind": "text",
              "text": "Element to check for overflow"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Detects whether an element's content has overflow in any direction"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "hasVerticalOverflow": {
      "kind": "function",
      "signature": "export function hasVerticalOverflow(element: HTMLElement): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": [
          {
            "kind": "text",
            "text": "True if element's content overflows"
          }
        ]
      },
      "parameters": {
        "element": {
          "name": "element",
          "description": [
            {
              "kind": "text",
              "text": "Element to check for overflow"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Detects whether an element's content has vertical overflow"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "hoistMethods": {
      "kind": "function",
      "signature": "export function hoistMethods(destination: any, source: any, exclusions?: string[]): string[];",
      "returnValue": {
        "type": "string[]",
        "description": [
          {
            "kind": "text",
            "text": "An array of names of methods that were hoisted."
          }
        ]
      },
      "parameters": {
        "destination": {
          "name": "destination",
          "description": [
            {
              "kind": "text",
              "text": "The instance of the object to hoist the methods onto."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "any"
        },
        "source": {
          "name": "source",
          "description": [
            {
              "kind": "text",
              "text": "The instance of the object where the methods are hoisted from."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "any"
        },
        "exclusions": {
          "name": "exclusions",
          "description": [
            {
              "kind": "text",
              "text": "(Optional) What methods to exclude from being hoisted."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "string[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Allows you to hoist methods, except those in an exclusion set from a source object into a destination object."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "hoistStatics": {
      "kind": "function",
      "signature": "export function hoistStatics<TSource, TDest>(source: TSource, dest: TDest): TDest;",
      "returnValue": {
        "type": "TDest",
        "description": [
          {
            "kind": "text",
            "text": "The dest object with methods added"
          }
        ]
      },
      "parameters": {
        "source": {
          "name": "source",
          "description": [
            {
              "kind": "text",
              "text": "The object where the methods are hoisted from."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "TSource"
        },
        "dest": {
          "name": "dest",
          "description": [
            {
              "kind": "text",
              "text": "The object to hoist the methods onto."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "TDest"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Allows you to hoist static functions in components. Created for the purpose of fixing broken static functions in classes that utilize decorators."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "HoverCardBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IHoverCardProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IHoverCardProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "HoverCardBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "HoverCardBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(prevProps: IHoverCardProps, prevState: IHoverCardState): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "prevProps": {
              "name": "prevProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IHoverCardProps"
            },
            "prevState": {
              "name": "prevState",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IHoverCardState"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "{\n        cardOpenDelay: number;\n        cardDismissDelay: number;\n        expandedCardOpenDelay: number;\n        instantOpenOnClick: boolean;\n        setInitialFocus: boolean;\n        openHotKey: KeyCodes;\n        type: HoverCardType;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "HoverCardType": {
      "kind": "enum",
      "values": {
        "expanding": {
          "kind": "enum value",
          "value": "\"ExpandingCard\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "File card consisting of two parts: compact and expanded. Has some default sizes if not specified."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "plain": {
          "kind": "enum value",
          "value": "\"PlainCard\"",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Plain card consisting of one part responsive to the size of content."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "hsl2hsv": {
      "kind": "function",
      "signature": "export function hsl2hsv(h: number, s: number, l: number): IHSV;",
      "returnValue": {
        "type": "IHSV",
        "description": []
      },
      "parameters": {
        "h": {
          "name": "h",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "s": {
          "name": "s",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "l": {
          "name": "l",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "hsl2rgb": {
      "kind": "function",
      "signature": "export function hsl2rgb(h: number, s: number, l: number): IRGB;",
      "returnValue": {
        "type": "IRGB",
        "description": []
      },
      "parameters": {
        "h": {
          "name": "h",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "s": {
          "name": "s",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "l": {
          "name": "l",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "hsv2hex": {
      "kind": "function",
      "signature": "export function hsv2hex(h: number, s: number, v: number): string;",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {
        "h": {
          "name": "h",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "s": {
          "name": "s",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "v": {
          "name": "v",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "hsv2hsl": {
      "kind": "function",
      "signature": "export function hsv2hsl(h: number, s: number, v: number): {\n    h: number;\n    s: number;\n    l: number;\n};",
      "returnValue": {
        "type": "{\n    h: number;\n    s: number;\n    l: number;\n}",
        "description": []
      },
      "parameters": {
        "h": {
          "name": "h",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "s": {
          "name": "s",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "v": {
          "name": "v",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "hsv2rgb": {
      "kind": "function",
      "signature": "export function hsv2rgb(h: number, s: number, v: number): IRGB;",
      "returnValue": {
        "type": "IRGB",
        "description": []
      },
      "parameters": {
        "h": {
          "name": "h",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "s": {
          "name": "s",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "v": {
          "name": "v",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "IActivityItemProps": {
      "kind": "interface",
      "extends": "React.AllHTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "activityDescription": {
          "kind": "property",
          "signature": "activityDescription?: React.ReactNode[] | React.ReactNode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.ReactNode[] | React.ReactNode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An element describing the activity that took place. If no activityDescription, activityDescriptionText, or onRenderActivityDescription are included, no description of the activity is shown."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "activityDescriptionText": {
          "kind": "property",
          "signature": "activityDescriptionText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "activityDescription",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Text describing the activity that occurred and naming the people involved in it. Deprecated, use "
            },
            {
              "kind": "code",
              "text": "activityDescription",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "activityIcon": {
          "kind": "property",
          "signature": "activityIcon?: React.ReactNode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.ReactNode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An element containing an icon shown next to the activity item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "activityPersonas": {
          "kind": "property",
          "signature": "activityPersonas?: Array<IPersonaSharedProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Array<IPersonaSharedProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If activityIcon is not set, then the persona props in this array will be used as the icon for the this activity item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "animateBeaconSignal": {
          "kind": "property",
          "signature": "animateBeaconSignal?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Enables/Disables the beacon that radiates from the center of the center of the activity icon. Signals an activity has started."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "beaconColorOne": {
          "kind": "property",
          "signature": "beaconColorOne?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Beacon color one"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "beaconColorTwo": {
          "kind": "property",
          "signature": "beaconColorTwo?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Beacon color two"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "comments": {
          "kind": "property",
          "signature": "comments?: React.ReactNode[] | React.ReactNode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.ReactNode[] | React.ReactNode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An element containing the text of comments or @mention messages. If no comments, commentText, or onRenderComments are included, no comments are shown."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "commentText": {
          "kind": "property",
          "signature": "commentText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "comments",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Text of comments or @mention messages. Deprecated, use "
            },
            {
              "kind": "code",
              "text": "comments",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<{}>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<{}>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets ref to component interface."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isCompact": {
          "kind": "property",
          "signature": "isCompact?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicated if the compact styling should be used."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderActivityDescription": {
          "kind": "property",
          "signature": "onRenderActivityDescription?: IRenderFunction<IActivityItemProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IActivityItemProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A renderer for the description of the current activity."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderComments": {
          "kind": "property",
          "signature": "onRenderComments?: IRenderFunction<IActivityItemProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IActivityItemProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A renderer that adds the text of a comment below the activity description."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderIcon": {
          "kind": "property",
          "signature": "onRenderIcon?: IRenderFunction<IActivityItemProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IActivityItemProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A renderer to create the icon next to the activity item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderTimeStamp": {
          "kind": "property",
          "signature": "onRenderTimeStamp?: IRenderFunction<IActivityItemProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IActivityItemProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A renderer adds a time stamp. If not included, timeStamp is shown as plain text below the activity."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IActivityItemStyles;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IActivityItemStyles",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional styling for the elements within the Activity Item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "timeStamp": {
          "kind": "property",
          "signature": "timeStamp?: string | React.ReactNode[] | React.ReactNode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | React.ReactNode[] | React.ReactNode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Element shown as a timestamp on this activity. If not included, no timestamp is shown."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IActivityItemStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "activityContent": {
          "kind": "property",
          "signature": "activityContent?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles applied to the main container of the activity's description."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "activityPersona": {
          "kind": "property",
          "signature": "activityPersona?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles applied to the persona of the user that did this activity."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "activityText": {
          "kind": "property",
          "signature": "activityText?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles applied to the activity's description."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "activityTypeIcon": {
          "kind": "property",
          "signature": "activityTypeIcon?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles applied to the icon indicating the type of the activity. Only shown when personas are unavailable."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "commentText": {
          "kind": "property",
          "signature": "commentText?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles applied to the text of comments."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "doublePersona": {
          "kind": "property",
          "signature": "doublePersona?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles applied to personas when two users are involved in a single activity."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isCompactContent": {
          "kind": "property",
          "signature": "isCompactContent?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles applied to main text container in the compact variant."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isCompactIcon": {
          "kind": "property",
          "signature": "isCompactIcon?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles applied to personas and icons in the compact variant."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isCompactPersona": {
          "kind": "property",
          "signature": "isCompactPersona?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles applied to personas in the compact variant."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isCompactPersonaContainer": {
          "kind": "property",
          "signature": "isCompactPersonaContainer?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles applied to a wrapper around personas in the compact variant."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isCompactRoot": {
          "kind": "property",
          "signature": "isCompactRoot?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles applied to root in the compact variant."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isCompactTimeStamp": {
          "kind": "property",
          "signature": "isCompactTimeStamp?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles applied to the timestamp in compact mode. This can occur if a host overrides the render behavior to force the timestamp to render."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "personaContainer": {
          "kind": "property",
          "signature": "personaContainer?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles applied to the container of the persona image or activity type icon."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "pulsingBeacon": {
          "kind": "property",
          "signature": "pulsingBeacon?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles applied to the root activity item container."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles applied to the root activity item container."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "timeStamp": {
          "kind": "property",
          "signature": "timeStamp?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles applied to the timestamp at the end of each activity item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IAnimationStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "All Fabric standard animations, exposed as json objects referencing predefined keyframes. These objects can be mixed in with other class definitions."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "fadeIn100": {
          "kind": "property",
          "signature": "fadeIn100: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "fadeIn200": {
          "kind": "property",
          "signature": "fadeIn200: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "fadeIn400": {
          "kind": "property",
          "signature": "fadeIn400: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "fadeIn500": {
          "kind": "property",
          "signature": "fadeIn500: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "fadeOut100": {
          "kind": "property",
          "signature": "fadeOut100: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "fadeOut200": {
          "kind": "property",
          "signature": "fadeOut200: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "fadeOut400": {
          "kind": "property",
          "signature": "fadeOut400: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "fadeOut500": {
          "kind": "property",
          "signature": "fadeOut500: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rotate90deg": {
          "kind": "property",
          "signature": "rotate90deg: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rotateN90deg": {
          "kind": "property",
          "signature": "rotateN90deg: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "scaleDownIn100": {
          "kind": "property",
          "signature": "scaleDownIn100: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "scaleDownOut98": {
          "kind": "property",
          "signature": "scaleDownOut98: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "scaleUpIn100": {
          "kind": "property",
          "signature": "scaleUpIn100: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "scaleUpOut103": {
          "kind": "property",
          "signature": "scaleUpOut103: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideDownIn10": {
          "kind": "property",
          "signature": "slideDownIn10: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideDownIn20": {
          "kind": "property",
          "signature": "slideDownIn20: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideDownOut10": {
          "kind": "property",
          "signature": "slideDownOut10: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideDownOut20": {
          "kind": "property",
          "signature": "slideDownOut20: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideLeftIn10": {
          "kind": "property",
          "signature": "slideLeftIn10: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideLeftIn20": {
          "kind": "property",
          "signature": "slideLeftIn20: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideLeftIn40": {
          "kind": "property",
          "signature": "slideLeftIn40: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideLeftIn400": {
          "kind": "property",
          "signature": "slideLeftIn400: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideLeftOut10": {
          "kind": "property",
          "signature": "slideLeftOut10: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideLeftOut20": {
          "kind": "property",
          "signature": "slideLeftOut20: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideLeftOut40": {
          "kind": "property",
          "signature": "slideLeftOut40: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideLeftOut400": {
          "kind": "property",
          "signature": "slideLeftOut400: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideRightIn10": {
          "kind": "property",
          "signature": "slideRightIn10: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideRightIn20": {
          "kind": "property",
          "signature": "slideRightIn20: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideRightIn40": {
          "kind": "property",
          "signature": "slideRightIn40: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideRightIn400": {
          "kind": "property",
          "signature": "slideRightIn400: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideRightOut10": {
          "kind": "property",
          "signature": "slideRightOut10: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideRightOut20": {
          "kind": "property",
          "signature": "slideRightOut20: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideRightOut40": {
          "kind": "property",
          "signature": "slideRightOut40: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideRightOut400": {
          "kind": "property",
          "signature": "slideRightOut400: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideUpIn10": {
          "kind": "property",
          "signature": "slideUpIn10: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideUpIn20": {
          "kind": "property",
          "signature": "slideUpIn20: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideUpOut10": {
          "kind": "property",
          "signature": "slideUpOut10: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideUpOut20": {
          "kind": "property",
          "signature": "slideUpOut20: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IAnimationVariables": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "durationValue1": {
          "kind": "property",
          "signature": "durationValue1: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "durationValue2": {
          "kind": "property",
          "signature": "durationValue2: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "durationValue3": {
          "kind": "property",
          "signature": "durationValue3: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "durationValue4": {
          "kind": "property",
          "signature": "durationValue4: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "easeFunction1": {
          "kind": "property",
          "signature": "easeFunction1: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "easeFunction2": {
          "kind": "property",
          "signature": "easeFunction2: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IAsAsyncOptions": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "TProps"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "load": {
          "kind": "property",
          "signature": "load: () => Promise<React.ReactType<TProps>>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => Promise<React.ReactType<TProps>>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback which returns a promise resolving an object which exports the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onError": {
          "kind": "property",
          "signature": "onError?: (error: Error) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(error: Error) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback when async loading fails."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onLoad": {
          "kind": "property",
          "signature": "onLoad?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback executed when async loading is complete."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IAutofill": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "clear": {
          "kind": "method",
          "signature": "clear(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Clear all text in the input. Sets value to '';"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "cursorLocation": {
          "kind": "property",
          "signature": "cursorLocation: number | null;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The current index of the cursor in the input area. Returns -1 if the input element is not ready."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Focus the input element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "inputElement": {
          "kind": "property",
          "signature": "inputElement: HTMLInputElement | null;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "HTMLInputElement | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The current input element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isValueSelected": {
          "kind": "property",
          "signature": "isValueSelected: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A boolean for whether or not there is a value selected in the input area."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectionEnd": {
          "kind": "property",
          "signature": "selectionEnd: number | null;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "the current index of where the selection ends. Returns -1 if the input element is not ready."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectionStart": {
          "kind": "property",
          "signature": "selectionStart: number | null;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The current index of where the selection starts. Returns -1 if the input element is not ready."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "value: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The current text value that the user has entered."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IAutofillProps": {
      "kind": "interface",
      "extends": "React.InputHTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IAutofill>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IAutofill>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the compoonent ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "defaultVisibleValue": {
          "kind": "property",
          "signature": "defaultVisibleValue?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The default value to be visible. This is different from placeholder because it actually sets the current value of the picker Note: This will only be set upon component creation and will not update with subsequent prop updates."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "enableAutofillOnKeyPress": {
          "kind": "property",
          "signature": "enableAutofillOnKeyPress?: KeyCodes[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "KeyCodes[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "When the user uses left arrow, right arrow, clicks, or deletes text autofill is disabled Since the user has taken control. It is automatically reenabled when the user enters text and the cursor is at the end of the text in the input box. This specifies other key presses that will reenabled autofill."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onInputChange": {
          "kind": "property",
          "signature": "onInputChange?: (value: string) => string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(value: string) => string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback used to modify the input string."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onInputValueChange": {
          "kind": "property",
          "signature": "onInputValueChange?: (newValue?: string) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(newValue?: string) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for when the current input value changes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shouldSelectFullInputValueInComponentDidUpdate": {
          "kind": "property",
          "signature": "shouldSelectFullInputValueInComponentDidUpdate?: () => boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Handler for checking if the full value of the input should be seleced in componentDidUpdate"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestedDisplayValue": {
          "kind": "property",
          "signature": "suggestedDisplayValue?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The suggested autofill value that will display."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "updateValueInWillReceiveProps": {
          "kind": "property",
          "signature": "updateValueInWillReceiveProps?: () => string | null;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => string | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Handler for checking and updating the value if needed in componentWillReceiveProps"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IAutofillState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "displayValue": {
          "kind": "property",
          "signature": "displayValue?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBaseAutoFill": {
      "kind": "interface",
      "extends": "IAutofill",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [
        {
          "kind": "text",
          "text": "do not use, will be removed in 6.0"
        }
      ],
      "summary": [
        {
          "kind": "text",
          "text": "Deprecated, do not use."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IBaseAutoFillProps": {
      "kind": "interface",
      "extends": "IAutofillProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [
        {
          "kind": "text",
          "text": "do not use, will be removed in 6.0"
        }
      ],
      "summary": [
        {
          "kind": "text",
          "text": "Deprecated, do not use."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IBaseButtonProps": {
      "kind": "interface",
      "extends": "IButtonProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "baseClassName": {
          "kind": "property",
          "signature": "baseClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "variantClassName": {
          "kind": "property",
          "signature": "variantClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBaseButtonState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "menuProps": {
          "kind": "property",
          "signature": "menuProps?: IContextualMenuProps | null;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IContextualMenuProps | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBaseExtendedPicker": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focus": {
          "kind": "property",
          "signature": "focus: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the input."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "forceResolve": {
          "kind": "property",
          "signature": "forceResolve?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Forces the picker to resolve"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "items": {
          "kind": "property",
          "signature": "items: T[] | undefined;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "T[] | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the current value of the input."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBaseExtendedPickerProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "ClassName for the picker."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IBaseExtendedPicker<T>>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IBaseExtendedPicker<T>>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Ref of the component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "currentRenderedQueryString": {
          "kind": "property",
          "signature": "currentRenderedQueryString?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Current rendered query string that's corealte to current rendered result"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "defaultSelectedItems": {
          "kind": "property",
          "signature": "defaultSelectedItems?: T[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "T[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Initial items that have already been selected and should appear in the people picker."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Flag for disabling the picker."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "floatingPickerProps": {
          "kind": "property",
          "signature": "floatingPickerProps: IBaseFloatingPickerProps<T>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IBaseFloatingPickerProps<T>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Floating picker properties"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focusZoneProps": {
          "kind": "property",
          "signature": "focusZoneProps?: IFocusZoneProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IFocusZoneProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Focus zone props"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "headerComponent": {
          "kind": "property",
          "signature": "headerComponent?: JSX.Element;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "JSX.Element",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Header/title element for the picker"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputProps": {
          "kind": "property",
          "signature": "inputProps?: IInputProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IInputProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Autofill input native props"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "itemLimit": {
          "kind": "property",
          "signature": "itemLimit?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Restrict the amount of selectable items."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onBlur": {
          "kind": "property",
          "signature": "onBlur?: React.FocusEventHandler<HTMLInputElement | Autofill>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.FocusEventHandler<HTMLInputElement | Autofill>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for when the user moves the focus away from the picker"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChange": {
          "kind": "property",
          "signature": "onChange?: (items?: T[]) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(items?: T[]) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for when the selected list of items changes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onFocus": {
          "kind": "property",
          "signature": "onFocus?: React.FocusEventHandler<HTMLInputElement | Autofill>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.FocusEventHandler<HTMLInputElement | Autofill>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for when the user put focus on the picker"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onItemAdded": {
          "kind": "property",
          "signature": "onItemAdded?: (addedItem: T) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(addedItem: T) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback on when an item was added to the selected item list"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onItemSelected": {
          "kind": "property",
          "signature": "onItemSelected?: (selectedItem?: T) => T | PromiseLike<T>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(selectedItem?: T) => T | PromiseLike<T>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback to process a selection after the user selects a suggestion from the picker. The returned item will be added to the selected items list"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onItemsRemoved": {
          "kind": "property",
          "signature": "onItemsRemoved?: (removedItems: T[]) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(removedItems: T[]) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback on when an item or items were removed from the selected item list"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onPaste": {
          "kind": "property",
          "signature": "onPaste?: (pastedText: string) => T[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(pastedText: string) => T[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for when text is pasted into the input"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderFloatingPicker": {
          "kind": "property",
          "signature": "onRenderFloatingPicker: (props: IBaseFloatingPickerProps<T>) => JSX.Element;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(props: IBaseFloatingPickerProps<T>) => JSX.Element",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function that specifies how the floating picker will appear."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderSelectedItems": {
          "kind": "property",
          "signature": "onRenderSelectedItems: (props: IBaseSelectedItemsListProps<T>) => JSX.Element;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(props: IBaseSelectedItemsListProps<T>) => JSX.Element",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function that specifies how the floating picker will appear."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedItems": {
          "kind": "property",
          "signature": "selectedItems?: T[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "T[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If using as a controlled component use selectedItems here instead of the SelectedItemsList"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedItemsListProps": {
          "kind": "property",
          "signature": "selectedItemsListProps: IBaseSelectedItemsListProps<T>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IBaseSelectedItemsListProps<T>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Selected items list properties"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionItems": {
          "kind": "property",
          "signature": "suggestionItems?: T[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "T[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If using as a controlled component use suggestionItems here instead of FloatingPicker"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBaseExtendedPickerState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "queryString": {
          "kind": "property",
          "signature": "queryString: string | null;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedItems": {
          "kind": "property",
          "signature": "selectedItems: T[] | null;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "T[] | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionItems": {
          "kind": "property",
          "signature": "suggestionItems: T[] | null;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "T[] | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBaseFloatingPicker": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "hidePicker": {
          "kind": "property",
          "signature": "hidePicker: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Hides the picker"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputText": {
          "kind": "property",
          "signature": "inputText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the input text"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isSuggestionsShown": {
          "kind": "property",
          "signature": "isSuggestionsShown: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the suggestions are shown"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onQueryStringChanged": {
          "kind": "property",
          "signature": "onQueryStringChanged: (input: string) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(input: string) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "On queryString changed"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showPicker": {
          "kind": "property",
          "signature": "showPicker: (updateValue?: boolean) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(updateValue?: boolean) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Shows the picker"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestions": {
          "kind": "property",
          "signature": "suggestions: any[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the suggestions"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBaseFloatingPickerProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "calloutWidth": {
          "kind": "property",
          "signature": "calloutWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Width for the suggestions callout"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "ClassName for the picker."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: (component?: IBaseFloatingPicker | null) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(component?: IBaseFloatingPicker | null) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "createGenericItem": {
          "kind": "property",
          "signature": "createGenericItem?: (input: string, isValid: boolean) => ISuggestionModel<T>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(input: string, isValid: boolean) => ISuggestionModel<T>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function that specifies how arbitrary text entered into the well is handled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getTextFromItem": {
          "kind": "property",
          "signature": "getTextFromItem?: (item: T, currentValue?: string) => string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: T, currentValue?: string) => string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback to get text from an item. Used to autofill text in the pickers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputElement": {
          "kind": "property",
          "signature": "inputElement?: HTMLInputElement | null;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "HTMLInputElement | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The input element to listen on events"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChange": {
          "kind": "property",
          "signature": "onChange?: (item: T) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: T) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for when a suggestion is clicked"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onInputChanged": {
          "kind": "property",
          "signature": "onInputChanged?: (filter: string) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(filter: string) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for when the input has been changed"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRemoveSuggestion": {
          "kind": "property",
          "signature": "onRemoveSuggestion?: (item: IPersonaProps) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: IPersonaProps) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for when a persona is removed from the suggestion list"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderSuggestionsItem": {
          "kind": "property",
          "signature": "onRenderSuggestionsItem?: (props: T, itemProps: any) => JSX.Element;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(props: T, itemProps: any) => JSX.Element",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function that specifies how an individual suggestion item will appear."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onResolveSuggestions": {
          "kind": "property",
          "signature": "onResolveSuggestions: (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]> | null;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]> | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for what should happen when a person types text into the input. Returns the already selected items so the resolver can filter them out. If used in conjunction with resolveDelay this will ony kick off after the delay throttle. Return null if using as a controlled component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onSuggestionsHidden": {
          "kind": "property",
          "signature": "onSuggestionsHidden?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The callback that should be called when the suggestions are hiden"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onSuggestionsShown": {
          "kind": "property",
          "signature": "onSuggestionsShown?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The callback that should be called when the suggestions are shown"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onValidateInput": {
          "kind": "property",
          "signature": "onValidateInput?: (input: string) => boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(input: string) => boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A function used to validate if raw text entered into the well can be added"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onZeroQuerySuggestion": {
          "kind": "property",
          "signature": "onZeroQuerySuggestion?: (selectedItems?: T[]) => T[] | PromiseLike<T[]> | null;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(selectedItems?: T[]) => T[] | PromiseLike<T[]> | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The suggestions to show on zero query, return null if using as a controlled component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "pickerSuggestionsProps": {
          "kind": "property",
          "signature": "pickerSuggestionsProps?: IBaseFloatingPickerSuggestionProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IBaseFloatingPickerSuggestionProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The properties that will get passed to the Suggestions component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "resolveDelay": {
          "kind": "property",
          "signature": "resolveDelay?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The delay time in ms before resolving suggestions, which is kicked off when input has been changed. e.g. If a second input change happens within the resolveDelay time, the timer will start over. Only until after the timer completes will onResolveSuggestions be called."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "searchingText": {
          "kind": "property",
          "signature": "searchingText?: ((props: {\n        input: string;\n    }) => string) | string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "((props: {\n        input: string;\n    }) => string) | string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text to display while searching for more results in a limited suggestions list"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedItems": {
          "kind": "property",
          "signature": "selectedItems?: T[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "T[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The items that the base picker should currently display as selected. If this is provided then the picker will act as a controlled component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showForceResolve": {
          "kind": "property",
          "signature": "showForceResolve?: () => boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The callback that should be called to see if the force resolve command should be shown"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionItems": {
          "kind": "property",
          "signature": "suggestionItems?: T[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "T[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If using as a controlled component, the items to show in the suggestion list"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsStore": {
          "kind": "property",
          "signature": "suggestionsStore: SuggestionsStore<T>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SuggestionsStore<T>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The suggestions store"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBaseFloatingPickerState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "didBind": {
          "kind": "property",
          "signature": "didBind: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "queryString": {
          "kind": "property",
          "signature": "queryString: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsVisible": {
          "kind": "property",
          "signature": "suggestionsVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBaseFloatingPickerSuggestionProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "footerItemsProps": {
          "kind": "property",
          "signature": "footerItemsProps?: ISuggestionsHeaderFooterProps[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISuggestionsHeaderFooterProps[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The footer items props"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "headerItemsProps": {
          "kind": "property",
          "signature": "headerItemsProps?: ISuggestionsHeaderFooterProps[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISuggestionsHeaderFooterProps[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The header items props"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shouldSelectFirstItem": {
          "kind": "property",
          "signature": "shouldSelectFirstItem?: () => boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not the first selectable item in the suggestions list should be selected"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBasePicker": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focus": {
          "kind": "property",
          "signature": "focus: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the focus zone."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focusInput": {
          "kind": "property",
          "signature": "focusInput: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Set focus to the input"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "items": {
          "kind": "property",
          "signature": "items: T[] | undefined;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "T[] | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the current value of the input."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBasePickerProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "ClassName for the picker."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IBasePicker<T>>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IBasePicker<T>>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "createGenericItem": {
          "kind": "property",
          "signature": "createGenericItem?: (input: string, ValidationState: ValidationState) => ISuggestionModel<T> | T;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(input: string, ValidationState: ValidationState) => ISuggestionModel<T> | T",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function that specifies how arbitrary text entered into the well is handled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "defaultSelectedItems": {
          "kind": "property",
          "signature": "defaultSelectedItems?: T[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "T[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Initial items that have already been selected and should appear in the people picker."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Flag for disabling the picker."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "enableSelectedSuggestionAlert": {
          "kind": "property",
          "signature": "enableSelectedSuggestionAlert?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Adds an additional alert for the currently selected suggestion. This prop should be set to true for IE11 and below, as it enables proper screen reader behavior for each suggestion (since aria-activedescendant does not work with IE11). It should not be set for modern browsers (Edge, Chrome)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getTextFromItem": {
          "kind": "property",
          "signature": "getTextFromItem?: (item: T, currentValue?: string) => string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: T, currentValue?: string) => string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback to get text from an item. Used to autofill text in the pickers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputProps": {
          "kind": "property",
          "signature": "inputProps?: IInputProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IInputProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "AutoFill input native props"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "itemLimit": {
          "kind": "property",
          "signature": "itemLimit?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Restrict the amount of selectable items."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onBlur": {
          "kind": "property",
          "signature": "onBlur?: React.FocusEventHandler<HTMLInputElement | BaseAutoFill>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.FocusEventHandler<HTMLInputElement | BaseAutoFill>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for when the user moves the focus away from the picker"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChange": {
          "kind": "property",
          "signature": "onChange?: (items?: T[]) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(items?: T[]) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for when the selected list of items changes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDismiss": {
          "kind": "property",
          "signature": "onDismiss?: (ev?: any, selectedItem?: T) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: any, selectedItem?: T) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback to override the default behavior of adding the selected suggestion on dismiss."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onEmptyInputFocus": {
          "kind": "property",
          "signature": "onEmptyInputFocus?: (selectedItems?: T[]) => T[] | PromiseLike<T[]>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(selectedItems?: T[]) => T[] | PromiseLike<T[]>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for what should happen when a user clicks the input."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onFocus": {
          "kind": "property",
          "signature": "onFocus?: React.FocusEventHandler<HTMLInputElement | BaseAutoFill>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.FocusEventHandler<HTMLInputElement | BaseAutoFill>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for when the user put focus on the picker"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onGetMoreResults": {
          "kind": "property",
          "signature": "onGetMoreResults?: (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback that gets the rest of the results when a user clicks get more results."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onInputChange": {
          "kind": "property",
          "signature": "onInputChange?: (input: string) => string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(input: string) => string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback used to modify the input string."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onItemSelected": {
          "kind": "property",
          "signature": "onItemSelected?: (selectedItem?: T) => T | PromiseLike<T> | null;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(selectedItem?: T) => T | PromiseLike<T> | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback to process a selection after the user selects something from the picker. If the callback returns null, the item will not be added to the picker."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRemoveSuggestion": {
          "kind": "property",
          "signature": "onRemoveSuggestion?: (item: IPersonaProps) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: IPersonaProps) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for when a persona is removed from the suggestion list"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderItem": {
          "kind": "property",
          "signature": "onRenderItem?: (props: IPickerItemProps<T>) => JSX.Element;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(props: IPickerItemProps<T>) => JSX.Element",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function that specifies how the selected item will appear."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderSuggestionsItem": {
          "kind": "property",
          "signature": "onRenderSuggestionsItem?: (props: T, itemProps: any) => JSX.Element;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(props: T, itemProps: any) => JSX.Element",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function that specifies how an individual suggestion item will appear."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onResolveSuggestions": {
          "kind": "property",
          "signature": "onResolveSuggestions: (filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(filter: string, selectedItems?: T[]) => T[] | PromiseLike<T[]>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for what should happen when a person types text into the input. Returns the already selected items so the resolver can filter them out. If used in conjunction with resolveDelay this will ony kick off after the delay throttle."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onValidateInput": {
          "kind": "property",
          "signature": "onValidateInput?: (input: string) => ValidationState;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(input: string) => ValidationState",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A function used to validate if raw text entered into the well can be added into the selected items list"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "pickerCalloutProps": {
          "kind": "property",
          "signature": "pickerCalloutProps?: ICalloutProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICalloutProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The properties that will get passed to the Callout component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "pickerSuggestionsProps": {
          "kind": "property",
          "signature": "pickerSuggestionsProps?: IBasePickerSuggestionsProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IBasePickerSuggestionsProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The properties that will get passed to the Suggestions component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "removeButtonAriaLabel": {
          "kind": "property",
          "signature": "removeButtonAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria label for the \"X\" button in the selected item component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "resolveDelay": {
          "kind": "property",
          "signature": "resolveDelay?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The delay time in ms before resolving suggestions, which is kicked off when input has been changed. e.g. If a second input change happens within the resolveDelay time, the timer will start over. Only until after the timer completes will onResolveSuggestions be called."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "searchingText": {
          "kind": "property",
          "signature": "searchingText?: ((props: {\n        input: string;\n    }) => string) | string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "((props: {\n        input: string;\n    }) => string) | string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text to display while searching for more results in a limited suggestions list"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedItems": {
          "kind": "property",
          "signature": "selectedItems?: T[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "T[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The items that the base picker should currently display as selected. If this is provided then the picker will act as a controlled component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBasePickerState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "isFocused": {
          "kind": "property",
          "signature": "isFocused?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isMostRecentlyUsedVisible": {
          "kind": "property",
          "signature": "isMostRecentlyUsedVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isResultsFooterVisible": {
          "kind": "property",
          "signature": "isResultsFooterVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isSearching": {
          "kind": "property",
          "signature": "isSearching?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "items": {
          "kind": "property",
          "signature": "items?: any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "moreSuggestionsAvailable": {
          "kind": "property",
          "signature": "moreSuggestionsAvailable?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedIndices": {
          "kind": "property",
          "signature": "selectedIndices?: number[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestedDisplayValue": {
          "kind": "property",
          "signature": "suggestedDisplayValue?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsLoading": {
          "kind": "property",
          "signature": "suggestionsLoading?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsVisible": {
          "kind": "property",
          "signature": "suggestionsVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBasePickerSuggestionsProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Suggestions root className."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "forceResolveText": {
          "kind": "property",
          "signature": "forceResolveText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text that appears indicating to the use to force resolve the input"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "loadingText": {
          "kind": "property",
          "signature": "loadingText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text to display while the results are loading."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "mostRecentlyUsedHeaderText": {
          "kind": "property",
          "signature": "mostRecentlyUsedHeaderText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text that should appear at the top of the most recently used box."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "noResultsFoundText": {
          "kind": "property",
          "signature": "noResultsFoundText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "the text that should appear when no results are returned."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderNoResultFound": {
          "kind": "property",
          "signature": "onRenderNoResultFound?: IRenderFunction<void>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<void>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function that specifies what to render when no results are found."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "resultsFooter": {
          "kind": "property",
          "signature": "resultsFooter?: () => JSX.Element;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => JSX.Element",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A renderer that adds an element at the end of the suggestions list when there are fewer than resultsMaximumNumber."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "resultsFooterFull": {
          "kind": "property",
          "signature": "resultsFooterFull?: () => JSX.Element;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => JSX.Element",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A renderer that adds an element at the end of the suggestions list it has more items than resultsMaximumNumber."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "resultsMaximumNumber": {
          "kind": "property",
          "signature": "resultsMaximumNumber?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Maximum number of suggestions to show in the full suggestion list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "searchForMoreText": {
          "kind": "property",
          "signature": "searchForMoreText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text that should appear on the button to search for more."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "searchingText": {
          "kind": "property",
          "signature": "searchingText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text to display while searching for more results in a limited sugesstions list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showRemoveButtons": {
          "kind": "property",
          "signature": "showRemoveButtons?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates whether to show a button with each suggestion to remove that suggestion."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsAvailableAlertText": {
          "kind": "property",
          "signature": "suggestionsAvailableAlertText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Screen reader message to read when there are suggestions available."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsClassName": {
          "kind": "property",
          "signature": "suggestionsClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Suggestions List className."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsContainerAriaLabel": {
          "kind": "property",
          "signature": "suggestionsContainerAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An ARIA label for the container that is the parent of the suggestions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsHeaderText": {
          "kind": "property",
          "signature": "suggestionsHeaderText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text that should appear at the top of the suggestion box."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsItemClassName": {
          "kind": "property",
          "signature": "suggestionsItemClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "ClassName for suggestion items."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBaseProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T = any"
      ],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "BaseProps interface."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<T>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<T>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBaseSelectedItemsList": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "addItems": {
          "kind": "property",
          "signature": "addItems: (items: T[]) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(items: T[]) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "items": {
          "kind": "property",
          "signature": "items: T[] | undefined;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "T[] | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the current value of the input."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBaseSelectedItemsListProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "canRemoveItem": {
          "kind": "property",
          "signature": "canRemoveItem?: (item: T) => boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: T) => boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback on whether this item can be deleted"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IBaseSelectedItemsList<T>>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IBaseSelectedItemsList<T>>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "createGenericItem": {
          "kind": "property",
          "signature": "createGenericItem?: (input: string, ValidationState: ValidationState) => ISuggestionModel<T>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(input: string, ValidationState: ValidationState) => ISuggestionModel<T>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function that specifies how arbitrary text entered into the well is handled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "defaultSelectedItems": {
          "kind": "property",
          "signature": "defaultSelectedItems?: T[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "T[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Initial items that have already been selected and should appear in the people picker."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChange": {
          "kind": "property",
          "signature": "onChange?: (items?: T[]) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(items?: T[]) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for when the selected list of items changes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onCopyItems": {
          "kind": "property",
          "signature": "onCopyItems?: (items: T[]) => string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(items: T[]) => string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for when items are copied"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onItemDeleted": {
          "kind": "property",
          "signature": "onItemDeleted?: (deletedItem: T) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(deletedItem: T) => void",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "onItemsDeleted",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "A callback when an item is deleted"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onItemsDeleted": {
          "kind": "property",
          "signature": "onItemsDeleted?: (deletedItems: T[]) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(deletedItems: T[]) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback when and item or items are deleted"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onItemSelected": {
          "kind": "property",
          "signature": "onItemSelected?: (selectedItem?: T) => T | PromiseLike<T>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(selectedItem?: T) => T | PromiseLike<T>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback to process a selection after the user selects something from the picker."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderItem": {
          "kind": "property",
          "signature": "onRenderItem?: (props: ISelectedItemProps<T>) => JSX.Element;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(props: ISelectedItemProps<T>) => JSX.Element",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function that specifies how the selected item will appear."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "removeButtonAriaLabel": {
          "kind": "property",
          "signature": "removeButtonAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria label for the 'X' button in the selected item component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedItems": {
          "kind": "property",
          "signature": "selectedItems?: T[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "T[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The items that the base picker should currently display as selected. If this is provided then the picker will act as a controlled component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selection": {
          "kind": "property",
          "signature": "selection?: Selection;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Selection",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The selection"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBaseSelectedItemsListState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "items": {
          "kind": "property",
          "signature": "items?: any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBreadcrumb": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the first breadcrumb link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "IBreadCrumbData": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "props": {
          "kind": "property",
          "signature": "props: IBreadcrumbProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IBreadcrumbProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "renderedItems": {
          "kind": "property",
          "signature": "renderedItems: IBreadcrumbItem[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IBreadcrumbItem[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "renderedOverflowItems": {
          "kind": "property",
          "signature": "renderedOverflowItems: IBreadcrumbItem[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IBreadcrumbItem[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBreadcrumbItem": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "href": {
          "kind": "property",
          "signature": "href?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Url to navigate to when this breadcrumb is clicked."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isCurrentItem": {
          "kind": "property",
          "signature": "isCurrentItem?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If this breadcrumb item is the item the user is currently on, if set to true, aria-current=\"page\" will be applied to this breadcrumb link"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "key": {
          "kind": "property",
          "signature": "key: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Arbitrary unique string associated with the breadcrumb"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onClick": {
          "kind": "property",
          "signature": "onClick?: (ev?: React.MouseEvent<HTMLElement>, item?: IBreadcrumbItem) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLElement>, item?: IBreadcrumbItem) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback issued when the breadcrumb is selected."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "text": {
          "kind": "property",
          "signature": "text: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Text to display to the user for the breadcrumb"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBreadcrumbProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria label to place on the navigation landmark for breadcrumb"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional root classname for the root breadcrumb element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IBreadcrumb>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IBreadcrumb>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IBreadcrumb interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dividerAs": {
          "kind": "property",
          "signature": "dividerAs?: IComponentAs<IDividerAsProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IComponentAs<IDividerAsProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Render a custom divider in place of the default chevron "
            },
            {
              "kind": "code",
              "text": ">",
              "highlighter": "plain"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "items": {
          "kind": "property",
          "signature": "items: IBreadcrumbItem[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IBreadcrumbItem[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Collection of breadcrumbs to render"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "maxDisplayedItems": {
          "kind": "property",
          "signature": "maxDisplayedItems?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The maximum number of breadcrumbs to display before coalescing. If not specified, all breadcrumbs will be rendered."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onReduceData": {
          "kind": "property",
          "signature": "onReduceData?: (data: IBreadCrumbData) => IBreadCrumbData | undefined;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(data: IBreadCrumbData) => IBreadCrumbData | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Method to call when reducing the length of the breadcrumb. Return undefined to never reduce breadcrumb length"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderItem": {
          "kind": "property",
          "signature": "onRenderItem?: IRenderFunction<IBreadcrumbItem>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IBreadcrumbItem>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Method to call when trying to render an item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "overflowAriaLabel": {
          "kind": "property",
          "signature": "overflowAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional name to use for aria label on overflow button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "overflowIndex": {
          "kind": "property",
          "signature": "overflowIndex?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional index where overflow items will be collapsed. Defaults to 0."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IBreadcrumbStyleProps, IBreadcrumbStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IBreadcrumbStyleProps, IBreadcrumbStyles>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBreadcrumbStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IBreadcrumbStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "chevron": {
          "kind": "property",
          "signature": "chevron: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "item": {
          "kind": "property",
          "signature": "item: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "itemLink": {
          "kind": "property",
          "signature": "itemLink: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "list": {
          "kind": "property",
          "signature": "list: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "listItem": {
          "kind": "property",
          "signature": "listItem: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "overflow": {
          "kind": "property",
          "signature": "overflow: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "overflowButton": {
          "kind": "property",
          "signature": "overflowButton: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IButton": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "dismissMenu": {
          "kind": "property",
          "signature": "dismissMenu: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If there is a menu associated with this button and it is visible, this will dismiss the menu"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "property",
          "signature": "focus: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "openMenu": {
          "kind": "property",
          "signature": "openMenu: (shouldFocusOnContainer?: boolean, shouldFocusOnMount?: boolean) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(shouldFocusOnContainer?: boolean, shouldFocusOnMount?: boolean) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If there is a menu associated with this button and it is visible, this will open the menu. Params are optional overrides to the ones defined in 'menuProps' to apply to just this instance of opening the menu."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IButtonProps": {
      "kind": "interface",
      "extends": "React.AllHTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "allowDisabledFocus": {
          "kind": "property",
          "signature": "allowDisabledFocus?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the button can have focus in disabled mode"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaDescription": {
          "kind": "property",
          "signature": "ariaDescription?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Detailed description of the button for the benefit of screen readers."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Besides the compound button, other button types will need more information provided to screen reader."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaHidden": {
          "kind": "property",
          "signature": "ariaHidden?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If provided and is true it adds an 'aria-hidden' attribute instructing screen readers to ignore the element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The aria label of the button for the benefit of screen readers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonType": {
          "kind": "property",
          "signature": "buttonType?: ButtonType;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ButtonType",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use specific button component instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated at v1.2.3, to be removed at >= v2.0.0. Use specific button component instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "checked": {
          "kind": "property",
          "signature": "checked?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the button is checked"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If provided, additional class name to provide on the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IButton>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IButton>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IButton interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "data": {
          "kind": "property",
          "signature": "data?: any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Any custom data the developer wishes to associate with the menu item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "description": {
          "kind": "property",
          "signature": "description?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "secondaryText",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the description text if applicable (for compound buttons.) Deprecated, use "
            },
            {
              "kind": "code",
              "text": "secondaryText",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the button is disabled"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getClassNames": {
          "kind": "property",
          "signature": "getClassNames?: (theme: ITheme, className: string, variantClassName: string, iconClassName: string | undefined, menuIconClassName: string | undefined, disabled: boolean, checked: boolean, expanded: boolean, isSplit: boolean | undefined, allowDisabledFocus: boolean) => IButtonClassNames;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(theme: ITheme, className: string, variantClassName: string, iconClassName: string | undefined, menuIconClassName: string | undefined, disabled: boolean, checked: boolean, expanded: boolean, isSplit: boolean | undefined, allowDisabledFocus: boolean) => IButtonClassNames",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Method to provide the classnames to style a button. The default value for this prop is the getClassnames func defined in BaseButton.classnames."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getSplitButtonClassNames": {
          "kind": "property",
          "signature": "getSplitButtonClassNames?: (disabled: boolean, expanded: boolean, checked: boolean, allowDisabledFocus: boolean) => ISplitButtonClassNames;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(disabled: boolean, expanded: boolean, checked: boolean, allowDisabledFocus: boolean) => ISplitButtonClassNames",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Method to provide the classnames to style a button. The default value for this prop is the getClassnames func defined in BaseButton.classnames."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "href": {
          "kind": "property",
          "signature": "href?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If provided, this component will be rendered as an anchor."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconProps": {
          "kind": "property",
          "signature": "iconProps?: IIconProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IIconProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The props for the icon shown in the button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "keytipProps": {
          "kind": "property",
          "signature": "keytipProps?: IKeytipProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IKeytipProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional keytip for this button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuAs": {
          "kind": "property",
          "signature": "menuAs?: IComponentAs<IContextualMenuProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IComponentAs<IContextualMenuProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Render a custom menu in place of the normal one."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuIconProps": {
          "kind": "property",
          "signature": "menuIconProps?: IIconProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IIconProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The props for the icon shown when providing a menu dropdown."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuProps": {
          "kind": "property",
          "signature": "menuProps?: IContextualMenuProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IContextualMenuProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Props for button menu. Providing this will default to showing the menu icon. See menuIconProps for overriding how the default icon looks. Providing this in addition of onClick and setting the split property to true will render a SplitButton."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuTriggerKeyCode": {
          "kind": "property",
          "signature": "menuTriggerKeyCode?: KeyCodes | null;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "KeyCodes | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Provides a custom KeyCode that can be used to open the button menu. The default KeyCode is the down arrow. A value of null can be provided to disable the key codes for opening the button menu."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onAfterMenuDismiss": {
          "kind": "property",
          "signature": "onAfterMenuDismiss?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback that runs after Button's contextualmenu was closed (removed from the DOM)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onMenuClick": {
          "kind": "property",
          "signature": "onMenuClick?: (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, button?: IButtonProps) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, button?: IButtonProps) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback when menu is clicked."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderAriaDescription": {
          "kind": "property",
          "signature": "onRenderAriaDescription?: IRenderFunction<IButtonProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IButtonProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom render function for the aria description element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderChildren": {
          "kind": "property",
          "signature": "onRenderChildren?: IRenderFunction<IButtonProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IButtonProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom render function for rendering the button children."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderDescription": {
          "kind": "property",
          "signature": "onRenderDescription?: IRenderFunction<IButtonProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IButtonProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom render function for the desciption text."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderIcon": {
          "kind": "property",
          "signature": "onRenderIcon?: IRenderFunction<IButtonProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IButtonProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom render function for the icon"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderMenu": {
          "kind": "property",
          "signature": "onRenderMenu?: IRenderFunction<IContextualMenuProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IContextualMenuProps>",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "menuAs",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated at v6.3.2, to be removed at >= v7.0.0. Use "
            },
            {
              "kind": "code",
              "text": "menuAs",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderMenuIcon": {
          "kind": "property",
          "signature": "onRenderMenuIcon?: IRenderFunction<IButtonProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IButtonProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom render function for button menu icon"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderText": {
          "kind": "property",
          "signature": "onRenderText?: IRenderFunction<IButtonProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IButtonProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom render function for the label text."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "persistMenu": {
          "kind": "property",
          "signature": "persistMenu?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Menu will not be created or destroyed when opened or closed, instead it will be hidden. This will improve perf of the menu opening but could potentially impact overall perf by having more elemnts in the dom. Should only be used when perf is important. Note: This may increase the amount of time it takes for the button itself to mount."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primary": {
          "kind": "property",
          "signature": "primary?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Changes the visual presentation of the button to be emphasized (if defined)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryDisabled": {
          "kind": "property",
          "signature": "primaryDisabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If set to true and if this is a splitButton (split == true) then the primary action of a split button is disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootProps": {
          "kind": "property",
          "signature": "rootProps?: React.ButtonHTMLAttributes<HTMLButtonElement> | React.AnchorHTMLAttributes<HTMLAnchorElement>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.ButtonHTMLAttributes<HTMLButtonElement> | React.AnchorHTMLAttributes<HTMLAnchorElement>",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use button props instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated at v0.56.2, to be removed at >= v1.0.0. Just pass in button props instead. they will be mixed into the button/anchor element rendered by the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "secondaryText": {
          "kind": "property",
          "signature": "secondaryText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Description of the action this button takes. Only used for compound buttons"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "split": {
          "kind": "property",
          "signature": "split?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If set to true, and if menuProps and onClick are provided, the button will render as a SplitButton. Defaults to false."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "splitButtonAriaLabel": {
          "kind": "property",
          "signature": "splitButtonAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accessible label for the dropdown chevron button if this button is split."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IButtonStyles;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IButtonStyles",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom styling for individual elements within the button DOM."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "text": {
          "kind": "property",
          "signature": "text?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Text to render button label. If text is supplied, it will override any string in button children. Other children components will be passed through after the text."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by HOC."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "toggle": {
          "kind": "property",
          "signature": "toggle?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether button is a toggle button with distinct on and off states. This should be true for buttons that permanently change state when a press event finishes, such as a volume mute button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "toggled": {
          "kind": "property",
          "signature": "toggled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "unused, use "
            },
            {
              "kind": "code",
              "text": "checked",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " if setting state."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Any custom data the developer wishes to associate with the menu item. Deprecated, use "
            },
            {
              "kind": "code",
              "text": "checked",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " if setting state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "uniqueId": {
          "kind": "property",
          "signature": "uniqueId?: string | number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Unique id to identify the item. Typically a duplicate of key value."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IButtonStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "description": {
          "kind": "property",
          "signature": "description?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the description text if applicable (for compound buttons.)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "descriptionChecked": {
          "kind": "property",
          "signature": "descriptionChecked?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the description text when the button is checked."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "descriptionDisabled": {
          "kind": "property",
          "signature": "descriptionDisabled?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the description text when the button is disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "descriptionHovered": {
          "kind": "property",
          "signature": "descriptionHovered?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the description text when the button is hovered."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "descriptionPressed": {
          "kind": "property",
          "signature": "descriptionPressed?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the description text when the button is pressed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "flexContainer": {
          "kind": "property",
          "signature": "flexContainer?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the flexbox container within the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "icon": {
          "kind": "property",
          "signature": "icon?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the icon on the near side of the label."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconChecked": {
          "kind": "property",
          "signature": "iconChecked?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the icon when the button is checked."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconDisabled": {
          "kind": "property",
          "signature": "iconDisabled?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the icon when the button is disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconExpanded": {
          "kind": "property",
          "signature": "iconExpanded?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the icon on the near side of the label when expanded."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconExpandedHovered": {
          "kind": "property",
          "signature": "iconExpandedHovered?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the icon on the near side of the label when expanded and hovered."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconHovered": {
          "kind": "property",
          "signature": "iconHovered?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the icon on the near side of the label on hover."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconPressed": {
          "kind": "property",
          "signature": "iconPressed?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the icon on the near side of the label when pressed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the text content of the button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "labelChecked": {
          "kind": "property",
          "signature": "labelChecked?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the text content when the button is checked."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "labelDisabled": {
          "kind": "property",
          "signature": "labelDisabled?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the text content when the button is disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "labelHovered": {
          "kind": "property",
          "signature": "labelHovered?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the text content when the button is hovered."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuIcon": {
          "kind": "property",
          "signature": "menuIcon?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the menu chevron."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuIconChecked": {
          "kind": "property",
          "signature": "menuIconChecked?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the menu chevron when the button is checked."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuIconDisabled": {
          "kind": "property",
          "signature": "menuIconDisabled?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the menu chevron when the button is disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuIconExpanded": {
          "kind": "property",
          "signature": "menuIconExpanded?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the menu chevron when expanded."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuIconExpandedHovered": {
          "kind": "property",
          "signature": "menuIconExpandedHovered?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the menu chevron when expanded and hovered."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuIconHovered": {
          "kind": "property",
          "signature": "menuIconHovered?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the menu chevron on hover."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuIconPressed": {
          "kind": "property",
          "signature": "menuIconPressed?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the menu chevron when pressed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the root element in the default enabled, non-toggled state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootChecked": {
          "kind": "property",
          "signature": "rootChecked?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the root element in a checked state, layered on top of the root style."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootCheckedDisabled": {
          "kind": "property",
          "signature": "rootCheckedDisabled?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override applied to the root on hover in a checked, disabled state"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootCheckedHovered": {
          "kind": "property",
          "signature": "rootCheckedHovered?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override applied to the root on hover in a checked, enabled state"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootCheckedPressed": {
          "kind": "property",
          "signature": "rootCheckedPressed?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override applied to the root on pressed in a checked, enabled state"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootDisabled": {
          "kind": "property",
          "signature": "rootDisabled?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the root element in a disabled state, layered on top of the root style."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootExpanded": {
          "kind": "property",
          "signature": "rootExpanded?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override applied to the root on when menu is expanded in the default, enabled, non-toggled state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootExpandedHovered": {
          "kind": "property",
          "signature": "rootExpandedHovered?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override applied to the root on hover in a expanded state on hover"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootFocused": {
          "kind": "property",
          "signature": "rootFocused?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override applied to the root on focus in the default, enabled, non-toggled state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootHovered": {
          "kind": "property",
          "signature": "rootHovered?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override applied to the root on hover in the default, enabled, non-toggled state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootPressed": {
          "kind": "property",
          "signature": "rootPressed?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override applied to the root on pressed in the default, enabled, non-toggled state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "screenReaderText": {
          "kind": "property",
          "signature": "screenReaderText?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the screen reader text."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "secondaryText": {
          "kind": "property",
          "signature": "secondaryText?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the description text if applicable (for compound buttons.)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "splitButtonContainer": {
          "kind": "property",
          "signature": "splitButtonContainer?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the container div around a SplitButton element"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "splitButtonContainerChecked": {
          "kind": "property",
          "signature": "splitButtonContainerChecked?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for container div around a SplitButton element when the button is checked."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "splitButtonContainerCheckedHovered": {
          "kind": "property",
          "signature": "splitButtonContainerCheckedHovered?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for container div around a SplitButton element when the button is checked and hovered."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "splitButtonContainerDisabled": {
          "kind": "property",
          "signature": "splitButtonContainerDisabled?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the container div around a SplitButton element in a disabled state"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "splitButtonContainerFocused": {
          "kind": "property",
          "signature": "splitButtonContainerFocused?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for container div around a SplitButton element when the button is focused."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "splitButtonContainerHovered": {
          "kind": "property",
          "signature": "splitButtonContainerHovered?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for container div around a SplitButton element when the button is hovered."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "splitButtonDivider": {
          "kind": "property",
          "signature": "splitButtonDivider?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the divider element that appears between the button and menu button for a split button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "splitButtonFlexContainer": {
          "kind": "property",
          "signature": "splitButtonFlexContainer?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the SplitButton FlexContainer."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "splitButtonMenuButton": {
          "kind": "property",
          "signature": "splitButtonMenuButton?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the SplitButton menu button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "splitButtonMenuButtonChecked": {
          "kind": "property",
          "signature": "splitButtonMenuButtonChecked?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the SplitButton menu button element in a checked state"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "splitButtonMenuButtonDisabled": {
          "kind": "property",
          "signature": "splitButtonMenuButtonDisabled?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the SplitButton menu button element in a disabled state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "splitButtonMenuButtonExpanded": {
          "kind": "property",
          "signature": "splitButtonMenuButtonExpanded?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the SplitButton menu button element in an expanded state"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "splitButtonMenuIcon": {
          "kind": "property",
          "signature": "splitButtonMenuIcon?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the SplitButton menu icon element"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "splitButtonMenuIconDisabled": {
          "kind": "property",
          "signature": "splitButtonMenuIconDisabled?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the SplitButton menu icon element in a disabled state"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "textContainer": {
          "kind": "property",
          "signature": "textContainer?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the text container within the flexbox container element (and contains the text and description)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICalendar": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focus": {
          "kind": "property",
          "signature": "focus: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the selected date."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICalendarFormatDateCallbacks": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "formatDay": {
          "kind": "property",
          "signature": "formatDay: (date: Date) => string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(date: Date) => string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback to apply formatting to the days in the Day Picker calendar"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "formatMonthDayYear": {
          "kind": "property",
          "signature": "formatMonthDayYear: (date: Date, strings?: ICalendarStrings) => string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(date: Date, strings?: ICalendarStrings) => string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback to apply formatting to mmmm d, yyyy formated dates"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "formatMonthYear": {
          "kind": "property",
          "signature": "formatMonthYear: (date: Date, strings?: ICalendarStrings) => string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(date: Date, strings?: ICalendarStrings) => string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback to apply formatting to the month and year in the Day Picker header"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "formatYear": {
          "kind": "property",
          "signature": "formatYear: (date: Date) => string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(date: Date) => string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback to apply formatting to the year in the Month Picker header"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICalendarIconStrings": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "closeIcon": {
          "kind": "property",
          "signature": "closeIcon?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Close icon"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "leftNavigation": {
          "kind": "property",
          "signature": "leftNavigation?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "FabricMDL2Icons name for the left navigation icon. Previous default: ChevronLeft."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rightNavigation": {
          "kind": "property",
          "signature": "rightNavigation?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "FabricMDL2Icons name for the right navigation icon. Previous default: ChevronRight."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICalendarProps": {
      "kind": "interface",
      "extends": "IBaseProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "allFocusable": {
          "kind": "property",
          "signature": "allFocusable?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Allows all dates and buttons to be focused, including disabled ones"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "autoNavigateOnSelection": {
          "kind": "property",
          "signature": "autoNavigateOnSelection?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the month view should automatically navigate to the next or previous date range depending on the selected date. If this property is set to true and the currently displayed month is March 2017, if the user clicks on a day outside the month, i.e., April 1st, the picker will automatically navigate to the month of April."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional class name to add to the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<ICalendar>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<ICalendar>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the ICalendar interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dateRangeType": {
          "kind": "property",
          "signature": "dateRangeType?: DateRangeType;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DateRangeType",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The date range type indicating how many days should be selected as the user selects days"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dateTimeFormatter": {
          "kind": "property",
          "signature": "dateTimeFormatter?: ICalendarFormatDateCallbacks;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICalendarFormatDateCallbacks",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Apply additional formating to dates, for example localized date formatting."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "firstDayOfWeek": {
          "kind": "property",
          "signature": "firstDayOfWeek?: DayOfWeek;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DayOfWeek",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The first day of the week for your locale."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "firstWeekOfYear": {
          "kind": "property",
          "signature": "firstWeekOfYear?: FirstWeekOfYear;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "FirstWeekOfYear",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines when the first week of the year should start, FirstWeekOfYear.FirstDay, FirstWeekOfYear.FirstFullWeek or FirstWeekOfYear.FirstFourDayWeek are the possible values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "highlightCurrentMonth": {
          "kind": "property",
          "signature": "highlightCurrentMonth?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the month picker should highlight the current month"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "highlightSelectedMonth": {
          "kind": "property",
          "signature": "highlightSelectedMonth?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the month picker should highlight the selected month"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDayPickerVisible": {
          "kind": "property",
          "signature": "isDayPickerVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the day picker is shown beside the month picker or hidden."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isMonthPickerVisible": {
          "kind": "property",
          "signature": "isMonthPickerVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the month picker is shown beside the day picker or hidden."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "maxDate": {
          "kind": "property",
          "signature": "maxDate?: Date;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Date",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If set the Calendar will not allow navigation to or selection of a date later than this value."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "minDate": {
          "kind": "property",
          "signature": "minDate?: Date;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Date",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If set the Calendar will not allow navigation to or selection of a date earlier than this value."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "navigationIcons": {
          "kind": "property",
          "signature": "navigationIcons?: ICalendarIconStrings;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICalendarIconStrings",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Customize navigation icons using ICalendarIconStrings"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDismiss": {
          "kind": "property",
          "signature": "onDismiss?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback issued when calendar is closed"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onSelectDate": {
          "kind": "property",
          "signature": "onSelectDate?: (date: Date, selectedDateRangeArray?: Date[]) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(date: Date, selectedDateRangeArray?: Date[]) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback issued when a date is selected"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectDateOnClick": {
          "kind": "property",
          "signature": "selectDateOnClick?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "When clicking on \"Today\", select the date and close the calendar."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shouldFocusOnMount": {
          "kind": "property",
          "signature": "shouldFocusOnMount?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Replaced with the "
            },
            {
              "kind": "code",
              "text": "focus",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " method."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "This property has been removed at 0.80.0 in place of the "
            },
            {
              "kind": "code",
              "text": "focus",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " method, to be removed @ 1.0.0."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showCloseButton": {
          "kind": "property",
          "signature": "showCloseButton?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the close button should be shown or not"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showGoToToday": {
          "kind": "property",
          "signature": "showGoToToday?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the \"Go to today\" link should be shown or not"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showMonthPickerAsOverlay": {
          "kind": "property",
          "signature": "showMonthPickerAsOverlay?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Show month picker on top of date picker when visible."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showSixWeeksByDefault": {
          "kind": "property",
          "signature": "showSixWeeksByDefault?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the calendar should show 6 weeks by default."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showWeekNumbers": {
          "kind": "property",
          "signature": "showWeekNumbers?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the calendar should show the week number (weeks 1 to 53) before each week row"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "strings": {
          "kind": "property",
          "signature": "strings: ICalendarStrings | null;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICalendarStrings | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Localized strings to use in the Calendar"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "today": {
          "kind": "property",
          "signature": "today?: Date;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Date",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Value of today. If null, current time in client machine will be used."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "value?: Date;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Date",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Default value of the Calendar, if any"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "workWeekDays": {
          "kind": "property",
          "signature": "workWeekDays?: DayOfWeek[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DayOfWeek[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The days that are selectable when dateRangeType is WorkWeek. If dateRangeType is not WorkWeek this property does nothing."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICalendarState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "isDayPickerVisible": {
          "kind": "property",
          "signature": "isDayPickerVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "State used to show/hide day picker"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isMonthPickerVisible": {
          "kind": "property",
          "signature": "isMonthPickerVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "State used to show/hide month picker"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "navigatedDayDate": {
          "kind": "property",
          "signature": "navigatedDayDate?: Date;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Date",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The currently focused date in the day picker, but not necessarily selected"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "navigatedMonthDate": {
          "kind": "property",
          "signature": "navigatedMonthDate?: Date;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Date",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The currently focused date in the month picker, but not necessarily selected"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedDate": {
          "kind": "property",
          "signature": "selectedDate?: Date;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Date",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The currently selected date in the calendar"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICalendarStrings": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "closeButtonAriaLabel": {
          "kind": "property",
          "signature": "closeButtonAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria-label for the \"close\" button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "days": {
          "kind": "property",
          "signature": "days: string[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An array of strings for the full names of days of the week. The array is 0-based, so days[0] should be the full name of Sunday."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "goToToday": {
          "kind": "property",
          "signature": "goToToday: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "String to render for button to direct the user to today's date."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "months": {
          "kind": "property",
          "signature": "months: string[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An array of strings for the full names of months. The array is 0-based, so months[0] should be the full name of January."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "nextMonthAriaLabel": {
          "kind": "property",
          "signature": "nextMonthAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria-label for the \"next month\" button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "nextYearAriaLabel": {
          "kind": "property",
          "signature": "nextYearAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria-label for the \"next year\" button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "prevMonthAriaLabel": {
          "kind": "property",
          "signature": "prevMonthAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria-label for the \"previous month\" button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "prevYearAriaLabel": {
          "kind": "property",
          "signature": "prevYearAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria-label for the \"previous year\" button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shortDays": {
          "kind": "property",
          "signature": "shortDays: string[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An array of strings for the initials of the days of the week. The array is 0-based, so days[0] should be the initial of Sunday."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shortMonths": {
          "kind": "property",
          "signature": "shortMonths: string[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An array of strings for the short names of months. The array is 0-based, so shortMonths[0] should be the short name of January."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "weekNumberFormatString": {
          "kind": "property",
          "signature": "weekNumberFormatString?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria-label format string for the week number header. Should have 1 string param e.g. \"week number {0}\""
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICallout": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "ICalloutContentStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "backgroundColor": {
          "kind": "property",
          "signature": "backgroundColor?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background color for the beak and callout."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "beakWidth": {
          "kind": "property",
          "signature": "beakWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Width of Callout beak"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "calloutMaxWidth": {
          "kind": "property",
          "signature": "calloutMaxWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Max width for callout including borders."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "calloutWidth": {
          "kind": "property",
          "signature": "calloutWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Width for callout including borders."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "CSS class to apply to the callout."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "overflowYHidden": {
          "kind": "property",
          "signature": "overflowYHidden?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not to clip content of the callout, if it overflows vertically."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "positions": {
          "kind": "property",
          "signature": "positions?: ICalloutPositionedInfo;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICalloutPositionedInfo",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callout positioning data"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme to apply to the calloutContent."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICalloutContentStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "beak": {
          "kind": "property",
          "signature": "beak: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for callout beak."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "beakCurtain": {
          "kind": "property",
          "signature": "beakCurtain: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for callout beak curtain."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "calloutMain": {
          "kind": "property",
          "signature": "calloutMain: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for content component of the callout."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "container": {
          "kind": "property",
          "signature": "container: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for wrapper of Callout component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for callout container root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICalloutProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaDescribedBy": {
          "kind": "property",
          "signature": "ariaDescribedBy?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the element id referencing the element containing the description for the callout."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accessible label text for callout."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabelledBy": {
          "kind": "property",
          "signature": "ariaLabelledBy?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the element id referencing the element containing label text for callout."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "backgroundColor": {
          "kind": "property",
          "signature": "backgroundColor?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background color of the Callout in hex format ie. #ffffff."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "beakWidth": {
          "kind": "property",
          "signature": "beakWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The width of the beak."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bounds": {
          "kind": "property",
          "signature": "bounds?: IRectangle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRectangle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The bounding rectangle for which the contextual menu can appear in."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "calloutMaxHeight": {
          "kind": "property",
          "signature": "calloutMaxHeight?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Set max height of callout When not set the callout will expand with contents up to the bottom of the screen"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "calloutMaxWidth": {
          "kind": "property",
          "signature": "calloutMaxWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom width for callout including borders. If value is 0, no width is applied."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "calloutWidth": {
          "kind": "property",
          "signature": "calloutWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom width for callout including borders. If value is 0, no width is applied."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "CSS class to apply to the callout."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<ICallout>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<ICallout>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the ICallout interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "coverTarget": {
          "kind": "property",
          "signature": "coverTarget?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true the position returned will have the menu element cover the target. If false then it will position next to the target;"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "directionalHint": {
          "kind": "property",
          "signature": "directionalHint?: DirectionalHint;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DirectionalHint",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "How the element should be positioned"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "directionalHintFixed": {
          "kind": "property",
          "signature": "directionalHintFixed?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true the position will not change sides in an attempt to fit the callout within bounds. It will still attempt to align it to whatever bounds are given."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "directionalHintForRTL": {
          "kind": "property",
          "signature": "directionalHintForRTL?: DirectionalHint;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DirectionalHint",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "How the element should be positioned in RTL layouts. If not specified, a mirror of "
            },
            {
              "kind": "code",
              "text": "directionalHint",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " will be used instead"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "doNotLayer": {
          "kind": "property",
          "signature": "doNotLayer?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true do not render on a new layer. If false render on a new layer."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "finalHeight": {
          "kind": "property",
          "signature": "finalHeight?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Specify the final height of the content. To be used when expanding the content dynamically so that callout can adjust its position."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "gapSpace": {
          "kind": "property",
          "signature": "gapSpace?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The gap between the Callout and the target"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hidden": {
          "kind": "property",
          "signature": "hidden?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If specified, renders the Callout in a hidden state. Use this flag, rather than rendering a callout conditionally based on visibility, to improve rendering performance when it becomes visible. Note: When callout is hidden its content will not be rendered. It will only render once the callout is visible."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hideOverflow": {
          "kind": "property",
          "signature": "hideOverflow?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Manually set OverflowYHidden style prop to true on calloutMain element A variety of callout load animations will need this to hide the scollbar that can appear"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isBeakVisible": {
          "kind": "property",
          "signature": "isBeakVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true then the beak is visible. If false it will not be shown."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "layerProps": {
          "kind": "property",
          "signature": "layerProps?: ILayerProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ILayerProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional props to pass to the Layer component hosting the panel."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "minPagePadding": {
          "kind": "property",
          "signature": "minPagePadding?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The minimum distance the callout will be away from the edge of the screen."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDismiss": {
          "kind": "property",
          "signature": "onDismiss?: (ev?: any) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: any) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback when the Callout tries to close."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onLayerMounted": {
          "kind": "property",
          "signature": "onLayerMounted?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback when the layer content has mounted."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onPositioned": {
          "kind": "property",
          "signature": "onPositioned?: (positions?: ICalloutPositionedInfo) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(positions?: ICalloutPositionedInfo) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback that is called once the callout has been correctly positioned."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onScroll": {
          "kind": "property",
          "signature": "onScroll?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback when the Callout body is scrolled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "preventDismissOnLostFocus": {
          "kind": "property",
          "signature": "preventDismissOnLostFocus?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true then the callout will not dismiss when it loses focus"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "preventDismissOnScroll": {
          "kind": "property",
          "signature": "preventDismissOnScroll?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true then the callout will not dismiss on scroll"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "role": {
          "kind": "property",
          "signature": "role?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria role assigned to the callout (Eg. dialog, alertdialog)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "setInitialFocus": {
          "kind": "property",
          "signature": "setInitialFocus?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true then the callout will attempt to focus the first focusable element that it contains. If it doesn't find an element, no focus will be set and the method will return false. This means that it's the contents responsibility to either set focus or have focusable items."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "style": {
          "kind": "property",
          "signature": "style?: React.CSSProperties;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.CSSProperties",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "CSS style to apply to the callout."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<ICalloutContentStyleProps, ICalloutContentStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<ICalloutContentStyleProps, ICalloutContentStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional styles for the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "target": {
          "kind": "property",
          "signature": "target?: Element | string | MouseEvent | IPoint | null;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Element | string | MouseEvent | IPoint | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The target that the Callout should try to position itself based on. It can be either an Element a querySelector string of a valid Element or a MouseEvent. If MouseEvent is given then the origin point of the event will be used."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional theme for component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICellStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "cellExtraRightPadding": {
          "kind": "property",
          "signature": "cellExtraRightPadding: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "cellLeftPadding": {
          "kind": "property",
          "signature": "cellLeftPadding: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "cellRightPadding": {
          "kind": "property",
          "signature": "cellRightPadding: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IChangeDescription": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Change description used for change callbacks in GlobalSettings."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "key": {
          "kind": "property",
          "signature": "key: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "oldValue": {
          "kind": "property",
          "signature": "oldValue: any;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "value: any;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IChangeEventCallback": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Change event callback."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__call": {
          "kind": "method",
          "signature": "(changeDescription?: IChangeDescription): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "changeDescription": {
              "name": "changeDescription",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "IChangeDescription"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "__id__": {
          "kind": "property",
          "signature": "__id__?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICheckbox": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Checkbox class interface."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "checked": {
          "kind": "property",
          "signature": "checked: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the current checked state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "property",
          "signature": "focus: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the checkbox."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICheckboxProps": {
      "kind": "interface",
      "extends": "React.ButtonHTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Checkbox properties."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaDescribedBy": {
          "kind": "property",
          "signature": "ariaDescribedBy?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "ID for element that provides extended information for the checkbox."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accessible label for the checkbox."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabelledBy": {
          "kind": "property",
          "signature": "ariaLabelledBy?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "ID for element that contains label information for the checkbox."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaPositionInSet": {
          "kind": "property",
          "signature": "ariaPositionInSet?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The position in the parent set (if in a set) for aria-posinset."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaSetSize": {
          "kind": "property",
          "signature": "ariaSetSize?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The total size of the parent set (if in a set) for aria-setsize."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "boxSide": {
          "kind": "property",
          "signature": "boxSide?: 'start' | 'end';",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "'start' | 'end'",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Allows you to set the checkbox to be at the before (start) or after (end) the label."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "checked": {
          "kind": "property",
          "signature": "checked?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Checked state. Mutually exclusive to \"defaultChecked\". Use this if you control the checked state at a higher level and plan to pass in the correct value based on handling onChange events and re-rendering."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "checkmarkIconProps": {
          "kind": "property",
          "signature": "checkmarkIconProps?: IIconProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IIconProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom icon props for the check mark rendered by the checkbox"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional class name to provide on the root element, in addition to the ms-Checkbox class."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<ICheckbox>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<ICheckbox>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the ICheckbox interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "defaultChecked": {
          "kind": "property",
          "signature": "defaultChecked?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Default checked state. Mutually exclusive to \"checked\". Use this if you want an uncontrolled component, and want the Checkbox instance to maintain its own state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Disabled state of the checkbox."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputProps": {
          "kind": "property",
          "signature": "inputProps?: React.ButtonHTMLAttributes<HTMLElement | HTMLButtonElement>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.ButtonHTMLAttributes<HTMLElement | HTMLButtonElement>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional input props that will be mixed into the input element, *before* other props are applied. This allows you to extend the input element with additional attributes, such as data-automation-id needed for automation. Note that if you provide, for example, \"disabled\" as well as \"inputProps.disabled\", the former will take precedence over the later."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "keytipProps": {
          "kind": "property",
          "signature": "keytipProps?: IKeytipProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IKeytipProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional keytip for this checkbox"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Label to display next to the checkbox."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChange": {
          "kind": "property",
          "signature": "onChange?: (ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.FormEvent<HTMLElement | HTMLInputElement>, checked?: boolean) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback that is called when the checked value has changed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderLabel": {
          "kind": "property",
          "signature": "onRenderLabel?: IRenderFunction<ICheckboxProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<ICheckboxProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom render function for the label."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<ICheckboxStyleProps, ICheckboxStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<ICheckboxStyleProps, ICheckboxStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by HOC."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICheckboxState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "isChecked": {
          "kind": "property",
          "signature": "isChecked?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is true when Uncontrolled control is checked."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICheckboxStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "checked": {
          "kind": "property",
          "signature": "checked?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isUsingCustomLabelRender": {
          "kind": "property",
          "signature": "isUsingCustomLabelRender: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "reversed": {
          "kind": "property",
          "signature": "reversed?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICheckboxStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "checkbox": {
          "kind": "property",
          "signature": "checkbox?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for checkbox in its default unchecked/enabled state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "checkmark": {
          "kind": "property",
          "signature": "checkmark?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the checkmark in the default enabled/unchecked state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the label part (contains the customized checkbox + text) when enabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the root element (a button) of the checkbox component in the default enabled/unchecked state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "text": {
          "kind": "property",
          "signature": "text?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for text appearing with the checkbox in its default enabled state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICheckProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "alwaysShowCheck": {
          "kind": "property",
          "signature": "alwaysShowCheck?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Flag to always show the check icon. Not currently working."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "checked": {
          "kind": "property",
          "signature": "checked?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not this menu item is currently checked."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional css class to apply to the Check"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<ICheckProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<ICheckProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<ICheckStyleProps, ICheckStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<ICheckStyleProps, ICheckStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by HOC."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICheckStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "checkBoxHeight": {
          "kind": "property",
          "signature": "checkBoxHeight?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept custom checkBox size in pixels."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "checked": {
          "kind": "property",
          "signature": "checked?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept custom classNames"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept theme prop."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICheckStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "check": {
          "kind": "property",
          "signature": "check: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The 'check' icon styles."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "checkHost": {
          "kind": "property",
          "signature": "checkHost: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Check host style"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "circle": {
          "kind": "property",
          "signature": "circle: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The 'circle' icon styles."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IChoiceGroup": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IChoiceGroupOption": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "checked": {
          "kind": "property",
          "signature": "checked?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not the option is checked."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not the option is disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconProps": {
          "kind": "property",
          "signature": "iconProps?: IIconProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IIconProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The Icon component props for choice field"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "id": {
          "kind": "property",
          "signature": "id?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "DOM id to tag the ChoiceGroup input with, for reference. Should be used for 'aria-owns' and other such uses, rather than direct reference for programmatic purposes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "imageAlt": {
          "kind": "property",
          "signature": "imageAlt?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The alt of image for choice field. Defaults to '' if not set."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "imageSize": {
          "kind": "property",
          "signature": "imageSize?:",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        width: number;\n        height: number;\n    }",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The width and height of the image in px for choice field."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "imageSrc": {
          "kind": "property",
          "signature": "imageSrc?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The src of image for choice field."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "key": {
          "kind": "property",
          "signature": "key: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A required key to uniquely identify the option."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "labelId": {
          "kind": "property",
          "signature": "labelId?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "DOM id to tag the ChoiceGroup label with, for reference. Should be used for 'aria-owns' and other such uses, rather than direct reference for programmatic purposes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderField": {
          "kind": "property",
          "signature": "onRenderField?: IRenderFunction<IChoiceGroupOption>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IChoiceGroupOption>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional override of option render"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderLabel": {
          "kind": "property",
          "signature": "onRenderLabel?: (option: IChoiceGroupOption) => JSX.Element;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(option: IChoiceGroupOption) => JSX.Element",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional override of label render"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedImageSrc": {
          "kind": "property",
          "signature": "selectedImageSrc?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The src of image for choice field which is selected."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "text": {
          "kind": "property",
          "signature": "text: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text string for the option."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IChoiceGroupOptionProps": {
      "kind": "interface",
      "extends": "IChoiceGroupOption",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IChoiceGroupOption>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IChoiceGroupOption>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IChoiceGroup interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focused": {
          "kind": "property",
          "signature": "focused?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates if the ChoiceGroupOption should appear focused, visually"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "name": {
          "kind": "property",
          "signature": "name?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This value is used to group each ChoiceGroupOption into the same logical ChoiceGroup"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onBlur": {
          "kind": "property",
          "signature": "onBlur?: (ev: React.FocusEvent<HTMLElement>, props?: IChoiceGroupOption) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.FocusEvent<HTMLElement>, props?: IChoiceGroupOption) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for receiving a notification when the choice has lost focus."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChange": {
          "kind": "property",
          "signature": "onChange?: OnChangeCallback;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "OnChangeCallback",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for receiving a notification when the choice has been changed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onFocus": {
          "kind": "property",
          "signature": "onFocus?: OnFocusCallback;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "OnFocusCallback",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for receiving a notification when the choice has received focus."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "required": {
          "kind": "property",
          "signature": "required?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true, it specifies that an option must be selected in the ChoiceGroup before submitting the form"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IChoiceGroupOptionStyleProps, IChoiceGroupOptionStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IChoiceGroupOptionStyleProps, IChoiceGroupOptionStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme (provided through customization.)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IChoiceGroupOptionStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "checked": {
          "kind": "property",
          "signature": "checked?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focused": {
          "kind": "property",
          "signature": "focused?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hasIcon": {
          "kind": "property",
          "signature": "hasIcon?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hasImage": {
          "kind": "property",
          "signature": "hasImage?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "imageIsLarge": {
          "kind": "property",
          "signature": "imageIsLarge?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IChoiceGroupOptionStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "choiceFieldWrapper": {
          "kind": "property",
          "signature": "choiceFieldWrapper?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "field": {
          "kind": "property",
          "signature": "field?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconWrapper": {
          "kind": "property",
          "signature": "iconWrapper?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "imageWrapper": {
          "kind": "property",
          "signature": "imageWrapper?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "innerField": {
          "kind": "property",
          "signature": "innerField?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "input": {
          "kind": "property",
          "signature": "input?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "labelWrapper": {
          "kind": "property",
          "signature": "labelWrapper?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedImageWrapper": {
          "kind": "property",
          "signature": "selectedImageWrapper?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IChoiceGroupProps": {
      "kind": "interface",
      "extends": "React.InputHTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabelledBy": {
          "kind": "property",
          "signature": "ariaLabelledBy?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria labelled by prop for the ChoiceGroup itself"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IChoiceGroup>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IChoiceGroup>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IChoiceGroup interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "defaultSelectedKey": {
          "kind": "property",
          "signature": "defaultSelectedKey?: string | number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The key of the option that will be initially checked."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Descriptive label for the choice group."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChange": {
          "kind": "property",
          "signature": "onChange?: (ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IChoiceGroupOption) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.FormEvent<HTMLElement | HTMLInputElement>, option?: IChoiceGroupOption) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for receiving a notification when the choice has been changed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChanged": {
          "kind": "property",
          "signature": "onChanged?: (option: IChoiceGroupOption, evt?: React.FormEvent<HTMLElement | HTMLInputElement>) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(option: IChoiceGroupOption, evt?: React.FormEvent<HTMLElement | HTMLInputElement>) => void",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "onChange",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated and will be removed by 07/17/2017. Use "
            },
            {
              "kind": "code",
              "text": "onChange",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "options": {
          "kind": "property",
          "signature": "options?: IChoiceGroupOption[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IChoiceGroupOption[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The options for the choice group."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedKey": {
          "kind": "property",
          "signature": "selectedKey?: string | number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The key of the selected option. If you provide this, you must maintain selection state by observing onChange events and passing a new value in when changed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IChoiceGroupStyleProps, IChoiceGroupStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IChoiceGroupStyleProps, IChoiceGroupStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme (provided through customization.)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IChoiceGroupState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "keyChecked": {
          "kind": "property",
          "signature": "keyChecked: string | number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "keyFocused": {
          "kind": "property",
          "signature": "keyFocused?: string | number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is true when the control has focus."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IChoiceGroupStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "optionsContainIconOrImage": {
          "kind": "property",
          "signature": "optionsContainIconOrImage?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IChoiceGroupStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "applicationRole": {
          "kind": "property",
          "signature": "applicationRole?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "flexContainer": {
          "kind": "property",
          "signature": "flexContainer?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICircle": {
      "kind": "interface",
      "extends": "IShimmerElement",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "height": {
          "kind": "property",
          "signature": "height?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the height of the shimmer circle in pixels. Minimum supported 10px."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICoachmark": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "dismiss": {
          "kind": "property",
          "signature": "dismiss?: (ev?: any) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: any) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Forces the Coachmark to dismiss"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICoachmarkProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaAlertText": {
          "kind": "property",
          "signature": "ariaAlertText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Text to announce to screen reader / narrator when Coachmark is displayed"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaDescribedBy": {
          "kind": "property",
          "signature": "ariaDescribedBy?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the element id referencing the element containing the description for the Coachmark."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaDescribedByText": {
          "kind": "property",
          "signature": "ariaDescribedByText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the text content for the ariaDescribedBy element"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabelledBy": {
          "kind": "property",
          "signature": "ariaLabelledBy?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the element id referencing the element containing label text for Coachmark."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabelledByText": {
          "kind": "property",
          "signature": "ariaLabelledByText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the text content for the ariaLabelledBy element"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "beaconColorOne": {
          "kind": "property",
          "signature": "beaconColorOne?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Beacon color one."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "beaconColorTwo": {
          "kind": "property",
          "signature": "beaconColorTwo?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Beacon color two."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "beakHeight": {
          "kind": "property",
          "signature": "beakHeight?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "No longer used."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "The height of the Beak component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "beakWidth": {
          "kind": "property",
          "signature": "beakWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "No longer used."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "The width of the Beak component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "collapsed": {
          "kind": "property",
          "signature": "collapsed?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "isCollapsed",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "The starting collapsed state for the Coachmark. Use "
            },
            {
              "kind": "code",
              "text": "isCollapsed",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "color": {
          "kind": "property",
          "signature": "color?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color of the Coachmark/TeachingBubble."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<ICoachmark>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<ICoachmark>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the ICoachmark interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "delayBeforeCoachmarkAnimation": {
          "kind": "property",
          "signature": "delayBeforeCoachmarkAnimation?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Delay in milliseconds before Coachmark animation appears."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "delayBeforeMouseOpen": {
          "kind": "property",
          "signature": "delayBeforeMouseOpen?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Delay before allowing mouse movements to open the Coachmark."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "height": {
          "kind": "property",
          "signature": "height?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "No longer used."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "The height of the Coachmark."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isCollapsed": {
          "kind": "property",
          "signature": "isCollapsed?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The starting collapsed state for the Coachmark."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isPositionForced": {
          "kind": "property",
          "signature": "isPositionForced?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not to force the Coachmark/TeachingBubble content to fit within the window bounds."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "mouseProximityOffset": {
          "kind": "property",
          "signature": "mouseProximityOffset?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The distance in pixels the mouse is located before opening up the Coachmark."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onAnimationOpenEnd": {
          "kind": "property",
          "signature": "onAnimationOpenEnd?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback when the opening animation completes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onAnimationOpenStart": {
          "kind": "property",
          "signature": "onAnimationOpenStart?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback when the opening animation begins."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDismiss": {
          "kind": "property",
          "signature": "onDismiss?: (ev?: any) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: any) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback when the Coachmark tries to close."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onMouseMove": {
          "kind": "property",
          "signature": "onMouseMove?: (e: MouseEvent) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(e: MouseEvent) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback to run when the mouse moves."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "positioningContainerProps": {
          "kind": "property",
          "signature": "positioningContainerProps?: IPositioningContainerProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IPositioningContainerProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Props to pass to the PositioningContainer component. Specify the "
            },
            {
              "kind": "code",
              "text": "directionalHint",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " to indicate on which edge the Coachmark/TeachingBubble should be positioned."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "preventDismissOnLostFocus": {
          "kind": "property",
          "signature": "preventDismissOnLostFocus?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true then the Coachmark will not dismiss when it loses focus"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<ICoachmarkStyleProps, ICoachmarkStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<ICoachmarkStyleProps, ICoachmarkStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "target": {
          "kind": "property",
          "signature": "target: HTMLElement | string | null;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "HTMLElement | string | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The target that the Coachmark should try to position itself based on."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "teachingBubbleRef": {
          "kind": "property",
          "signature": "teachingBubbleRef?: ITeachingBubble;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITeachingBubble",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Coachmark uses "
            },
            {
              "kind": "code",
              "text": "focusFirstChild",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " utility instead to focus on TeachingBubbleContent"
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Ref for TeachingBubble"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "width": {
          "kind": "property",
          "signature": "width?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "No longer used."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "The width of the Coachmark."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICoachmarkState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "alertText": {
          "kind": "property",
          "signature": "alertText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "ARIA alert text to read aloud with Narrator once the Coachmark is mounted"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "beakBottom": {
          "kind": "property",
          "signature": "beakBottom?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The bottom position of the beak"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "beakLeft": {
          "kind": "property",
          "signature": "beakLeft?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The left position of the beak"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "beakRight": {
          "kind": "property",
          "signature": "beakRight?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The right position of the beak"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "beakTop": {
          "kind": "property",
          "signature": "beakTop?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The right position of the beak"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "entityInnerHostRect": {
          "kind": "property",
          "signature": "entityInnerHostRect: IEntityRect;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IEntityRect",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Cached width and height of _entityInnerHostElement"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isBeaconAnimating": {
          "kind": "property",
          "signature": "isBeaconAnimating: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Enables/Disables the beacon that radiates from the center of the coachmark."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isCollapsed": {
          "kind": "property",
          "signature": "isCollapsed: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is the Coachmark currently collapsed into a tear drop shape"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isMeasured": {
          "kind": "property",
          "signature": "isMeasured: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is the Coachmark done measuring the hosted entity"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isMeasuring": {
          "kind": "property",
          "signature": "isMeasuring: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is the teaching bubble currently retreiving the original dimensions of the hosted entity."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isMouseInProximity": {
          "kind": "property",
          "signature": "isMouseInProximity: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is the mouse in proximity of the default target element"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "targetAlignment": {
          "kind": "property",
          "signature": "targetAlignment?: RectangleEdge;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "RectangleEdge",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Alignment edge of callout in relation to target"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "targetPosition": {
          "kind": "property",
          "signature": "targetPosition?: RectangleEdge;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "RectangleEdge",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Position of Coachmark/TeachingBubble in relation to target"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "transformOrigin": {
          "kind": "property",
          "signature": "transformOrigin?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Transform origin of teaching bubble callout"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IColor": {
      "kind": "interface",
      "extends": "IRGB",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "hex": {
          "kind": "property",
          "signature": "hex: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "str": {
          "kind": "property",
          "signature": "str: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IColorCellProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "color": {
          "kind": "property",
          "signature": "color?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The CSS-compatible string to describe the color"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "id": {
          "kind": "property",
          "signature": "id: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Arbitrary unique string associated with this option"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "index": {
          "kind": "property",
          "signature": "index?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Index for this option"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The label for this item. Visible text if this item is a header, tooltip if is this item is normal"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IColorPicker": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IColorPickerGridCellProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "borderWidth": {
          "kind": "property",
          "signature": "borderWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Width of the border that indicates a selected/hovered cell, in pixels"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "circle": {
          "kind": "property",
          "signature": "circle?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Wheter or not colorOption should be rendered as a circle or square."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "color": {
          "kind": "property",
          "signature": "color?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The CSS-compatible string to describe the color"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, if the this option should be disabled"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "height": {
          "kind": "property",
          "signature": "height?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Height of the cell, in pixels"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "id": {
          "kind": "property",
          "signature": "id: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Arbitrary unique string associated with this option"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "index": {
          "kind": "property",
          "signature": "index?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Index for this option"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "item": {
          "kind": "property",
          "signature": "item: IColorCellProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IColorCellProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Item to render"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The label for this item. Visible text if this item is a header, tooltip if is this item is normal"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onClick": {
          "kind": "property",
          "signature": "onClick?: (item: IColorCellProps) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: IColorCellProps) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The on click handler"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onFocus": {
          "kind": "property",
          "signature": "onFocus?: (item: IColorCellProps) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: IColorCellProps) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, the onFocus handler"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onHover": {
          "kind": "property",
          "signature": "onHover?: (item?: IColorCellProps) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item?: IColorCellProps) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, the onHover handler"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onKeyDown": {
          "kind": "property",
          "signature": "onKeyDown?: (ev: React.KeyboardEvent<HTMLButtonElement>) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.KeyboardEvent<HTMLButtonElement>) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, onkeydown handler"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onMouseEnter": {
          "kind": "property",
          "signature": "onMouseEnter?: (ev: React.MouseEvent<HTMLButtonElement>) => boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.MouseEvent<HTMLButtonElement>) => boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, mouseEnter handler."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onMouseLeave": {
          "kind": "property",
          "signature": "onMouseLeave?: (ev: React.MouseEvent<HTMLButtonElement>) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.MouseEvent<HTMLButtonElement>) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, mouseLeave handler"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onMouseMove": {
          "kind": "property",
          "signature": "onMouseMove?: (ev: React.MouseEvent<HTMLButtonElement>) => boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.MouseEvent<HTMLButtonElement>) => boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, mouseMove handler"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onWheel": {
          "kind": "property",
          "signature": "onWheel?: (ev: React.MouseEvent<HTMLButtonElement>) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.MouseEvent<HTMLButtonElement>) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, onWheel handler"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selected": {
          "kind": "property",
          "signature": "selected: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, if the cell is currently selected"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional styles for the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The theme object to use for styling."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "width": {
          "kind": "property",
          "signature": "width?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Width of the cell, in pixels"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IColorPickerGridCellStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Properties required to build the styles for the color picker component."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "borderWidth": {
          "kind": "property",
          "signature": "borderWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The width of the border indicating a hovered or selected cell, in pixels."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "circle": {
          "kind": "property",
          "signature": "circle?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the svg color element should be rendered as a circle or not."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the component is disabled or not."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "height": {
          "kind": "property",
          "signature": "height?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The height of this cell, in pixels."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isWhite": {
          "kind": "property",
          "signature": "isWhite?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the color being rendered is white or not. If it is white we show a border around it."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selected": {
          "kind": "property",
          "signature": "selected?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the cell is currently selected or not."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme to apply to the cell."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "width": {
          "kind": "property",
          "signature": "width?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The width of this cell, in pixels."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IColorPickerGridCellStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Styles for the Color Picker Component."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "colorCell": {
          "kind": "property",
          "signature": "colorCell: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style to apply to a colorCell in the color picker."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "svg": {
          "kind": "property",
          "signature": "svg: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style to apply to the svg element that renders the color."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IColorPickerProps": {
      "kind": "interface",
      "extends": "IBaseProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "alphaLabel": {
          "kind": "property",
          "signature": "alphaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Label for the alpha textfield."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "alphaSliderHidden": {
          "kind": "property",
          "signature": "alphaSliderHidden?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The setting of whether to hide the alpha control slider."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "blueLabel": {
          "kind": "property",
          "signature": "blueLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Label for the blue textfield."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional CSS class(es) to apply to the ColorPicker."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "color": {
          "kind": "property",
          "signature": "color: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "CSS-compatible string to describe the initial color."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IColorPicker>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IColorPicker>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "greenLabel": {
          "kind": "property",
          "signature": "greenLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Label for the green textfield."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hexLabel": {
          "kind": "property",
          "signature": "hexLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Label for the hex textfield."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onColorChanged": {
          "kind": "property",
          "signature": "onColorChanged?: (color: string, colorObject: IColor) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(color: string, colorObject: IColor) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback issued when the user changes the color."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "redLabel": {
          "kind": "property",
          "signature": "redLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Label for the red textfield."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IColorPickerStyleProps, IColorPickerStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IColorPickerStyleProps, IColorPickerStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme (provided through customization)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IColorPickerState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "color": {
          "kind": "property",
          "signature": "color: IColor;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IColor",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isOpen": {
          "kind": "property",
          "signature": "isOpen: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IColorPickerStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional CSS class(es) to apply to the ColorPicker."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme (provided through customization)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IColorPickerStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "input": {
          "kind": "property",
          "signature": "input?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for each text field input."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "panel": {
          "kind": "property",
          "signature": "panel?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the panel element that contains the color rectangle."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "table": {
          "kind": "property",
          "signature": "table?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the table element that contains the color sliders and inputs."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "tableHeader": {
          "kind": "property",
          "signature": "tableHeader?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the table header that contains the labels."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "tableHexCell": {
          "kind": "property",
          "signature": "tableHexCell?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the table cell that contains the hex label."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IColumn": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional accessibility label (aria-label) attribute that will be stamped on to the element. If none is specified, the arai-label attribute will contain the column name"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "calculatedWidth": {
          "kind": "property",
          "signature": "calculatedWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Internal only value."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An optional class name to stick on the column cell within each row."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "columnActionsMode": {
          "kind": "property",
          "signature": "columnActionsMode?: ColumnActionsMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ColumnActionsMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines how the column's header should render."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "currentWidth": {
          "kind": "property",
          "signature": "currentWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Internal only value. Remembers the actual witdh of the column on any case. On the other hand, calculatedWidth is only saved when it's defined by user, not for justified calculations."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "data": {
          "kind": "property",
          "signature": "data?: any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Arbitrary data passthrough which can be used by the caller."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "fieldName": {
          "kind": "property",
          "signature": "fieldName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The field to pull the text value from for the column. This can be null if a custom onRender method is provided."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "filterAriaLabel": {
          "kind": "property",
          "signature": "filterAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "ARIA label for the status of this column when filtered."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "groupAriaLabel": {
          "kind": "property",
          "signature": "groupAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "ARIA label for the status of this column when grouped."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "headerClassName": {
          "kind": "property",
          "signature": "headerClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An optional class name to stick on the column cell within each header."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconClassName": {
          "kind": "property",
          "signature": "iconClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Class name to add to the Icon component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconName": {
          "kind": "property",
          "signature": "iconName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional iconName to use for the column header."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isCollapsable": {
          "kind": "property",
          "signature": "isCollapsable?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If specified will allow the column to be collapsed when rendered in justified layout."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isFiltered": {
          "kind": "property",
          "signature": "isFiltered?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Determines if the column is filtered, and if so shows a filter icon."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isGrouped": {
          "kind": "property",
          "signature": "isGrouped?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If set will show a grouped icon next to the column header name."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isIconOnly": {
          "kind": "property",
          "signature": "isIconOnly?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not only the icon is used in the column header. Set this to true so the column name and dropdown chevron are not displayed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isMultiline": {
          "kind": "property",
          "signature": "isMultiline?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Determines if the column can render multi-line text."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isPadded": {
          "kind": "property",
          "signature": "isPadded?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If set, will add additional LTR padding-right to column and cells."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isResizable": {
          "kind": "property",
          "signature": "isResizable?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Determines if the column can be resized."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isRowHeader": {
          "kind": "property",
          "signature": "isRowHeader?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional flag on whether the column is a header for the given row. There should be only one column with row header set to true."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isSorted": {
          "kind": "property",
          "signature": "isSorted?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Determines if the column is currently sorted. Renders a sort arrow in the column header."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isSortedDescending": {
          "kind": "property",
          "signature": "isSortedDescending?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Determines if the arrow is pointed down (descending) or up."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "key": {
          "kind": "property",
          "signature": "key: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A unique key for identifying the column."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "maxWidth": {
          "kind": "property",
          "signature": "maxWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Maximum width for the column, if stretching is allowed in justified scenarios."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "minWidth": {
          "kind": "property",
          "signature": "minWidth: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Minimum width for the column."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "name": {
          "kind": "property",
          "signature": "name: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Name to render on the column header."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onColumnClick": {
          "kind": "property",
          "signature": "onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.MouseEvent<HTMLElement>, column: IColumn) => any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If provided, will be executed when the user clicks on the column header."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onColumnContextMenu": {
          "kind": "property",
          "signature": "onColumnContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If provided, will be executed when the user accesses the contextmenu on a column header."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onColumnResize": {
          "kind": "property",
          "signature": "onColumnResize?: (width?: number) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(width?: number) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If provided, will be executed when the column is resized with the column's current width. Prefer this callback over "
            },
            {
              "kind": "code",
              "text": "DetailsList",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " "
            },
            {
              "kind": "code",
              "text": "onColumnResize",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " if you require the "
            },
            {
              "kind": "code",
              "text": "IColumn",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " to report its width after every resize event. Consider debouncing the callback if resize events occur frequently."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRender": {
          "kind": "property",
          "signature": "onRender?: (item?: any, index?: number, column?: IColumn) => any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item?: any, index?: number, column?: IColumn) => any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If provided uses this method to render custom cell content, rather than the default text rendering."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderDivider": {
          "kind": "property",
          "signature": "onRenderDivider?: IRenderFunction<IDetailsColumnProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IDetailsColumnProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If provider, can be used to render a custom column header divider"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "sortAscendingAriaLabel": {
          "kind": "property",
          "signature": "sortAscendingAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "ARIA label for the sort order of this column when sorted ascending."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "sortDescendingAriaLabel": {
          "kind": "property",
          "signature": "sortDescendingAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "ARIA label for the sort order of this column when sorted descending."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IColumnDragDropDetails": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "draggedIndex": {
          "kind": "property",
          "signature": "draggedIndex: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Specifies the source column index"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "targetIndex": {
          "kind": "property",
          "signature": "targetIndex: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Specifies the target column index"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IColumnReorderOptions": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "frozenColumnCountFromEnd": {
          "kind": "property",
          "signature": "frozenColumnCountFromEnd?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Specifies the number fixed columns from right"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "frozenColumnCountFromStart": {
          "kind": "property",
          "signature": "frozenColumnCountFromStart?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Specifies the number fixed columns from left(0th index)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "handleColumnReorder": {
          "kind": "property",
          "signature": "handleColumnReorder?: (draggedIndex: number, targetIndex: number) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(draggedIndex: number, targetIndex: number) => void",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "onColumnDrop",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Callback to handle the column reorder draggedIndex is the source column index, that need to be placed in targetIndex Deprecated, use "
            },
            {
              "kind": "code",
              "text": "onColumnDrop",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onColumnDragStart": {
          "kind": "property",
          "signature": "onColumnDragStart?: (dragStarted: boolean) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(dragStarted: boolean) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback to handle the column dragstart draggedStarted indicates that the column drag has been started on DetailsHeader"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onColumnDrop": {
          "kind": "property",
          "signature": "onColumnDrop?: (dragDropDetails: IColumnDragDropDetails) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(dragDropDetails: IColumnDragDropDetails) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback to handle the column reorder draggedIndex is the source column index, that need to be placed in targetIndex"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDragEnd": {
          "kind": "property",
          "signature": "onDragEnd?: (columnDropLocationDetails: ColumnDragEndLocation) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(columnDropLocationDetails: ColumnDragEndLocation) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback to handle the column reorder"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IComboBox": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "dismissMenu": {
          "kind": "property",
          "signature": "dismissMenu: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If there is a menu open this will dismiss the menu"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(shouldOpenOnFocus?: boolean, useFocusAsync?: boolean): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "True if focus could be set, false if no operation was taken."
              }
            ]
          },
          "parameters": {
            "shouldOpenOnFocus": {
              "name": "shouldOpenOnFocus",
              "description": [
                {
                  "kind": "text",
                  "text": "Determines if we should open the ComboBox menu when the input gets focus"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            },
            "useFocusAsync": {
              "name": "useFocusAsync",
              "description": [
                {
                  "kind": "text",
                  "text": "Determines if we should focus the input asynchronously"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the input in the comboBox"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "IComboBoxOption": {
      "kind": "interface",
      "extends": "ISelectableOption",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "styles": {
          "kind": "property",
          "signature": "styles?: Partial<IComboBoxOptionStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Partial<IComboBoxOptionStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Specific styles for each comboBox option. If you intend to give common styles to all comboBox option please use the prop comboBoxOptionStyles"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "useAriaLabelAsText": {
          "kind": "property",
          "signature": "useAriaLabelAsText?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "In scenarios where embedded data is used at the text prop, we will use the ariaLabel prop to set the aria-label and preview text. Default to false"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IComboBoxOptionStyles": {
      "kind": "interface",
      "extends": "IButtonStyles",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "optionText": {
          "kind": "property",
          "signature": "optionText: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the text inside the comboBox option. This should be used instead of the description inside IButtonStyles because we custom render the text in the comboBox options."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "optionTextWrapper": {
          "kind": "property",
          "signature": "optionTextWrapper: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the comboBox option text's wrapper."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IComboBoxProps": {
      "kind": "interface",
      "extends": "ISelectableDroppableTextProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "allowFreeform": {
          "kind": "property",
          "signature": "allowFreeform?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the ComboBox is free form, meaning that the user input is not bound to provided options. Defaults to false."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "autoComplete": {
          "kind": "property",
          "signature": "autoComplete?: 'on' | 'off';",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "'on' | 'off'",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the ComboBox auto completes. As the user is inputing text, it will be suggested potential matches from the list of options. If the combo box is expanded, this will also scroll to the suggested option, and give it a selected style."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonIconProps": {
          "kind": "property",
          "signature": "buttonIconProps?: IIconProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IIconProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The IconProps to use for the button aspect of the combobox"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "caretDownButtonStyles": {
          "kind": "property",
          "signature": "caretDownButtonStyles?: Partial<IButtonStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Partial<IButtonStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the caret down button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "comboBoxOptionStyles": {
          "kind": "property",
          "signature": "comboBoxOptionStyles?: Partial<IComboBoxOptionStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Partial<IComboBoxOptionStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Default styles that should be applied to ComboBox options, in case an option does not come with user-defined custom styles"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IComboBox>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IComboBox>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IComboBox interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dropdownMaxWidth": {
          "kind": "property",
          "signature": "dropdownMaxWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom max width for dropdown"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dropdownWidth": {
          "kind": "property",
          "signature": "dropdownWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom width for dropdown (unless useComboBoxAsMenuWidth is undefined or false)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getClassNames": {
          "kind": "property",
          "signature": "getClassNames?: (theme: ITheme, isOpen: boolean, disabled: boolean, required: boolean, focused: boolean, allowFreeForm: boolean, hasErrorMessage: boolean, className?: string) => IComboBoxClassNames;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(theme: ITheme, isOpen: boolean, disabled: boolean, required: boolean, focused: boolean, allowFreeForm: boolean, hasErrorMessage: boolean, className?: string) => IComboBoxClassNames",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom function for providing the classNames for the ComboBox. Can be used to provide all styles for the component instead of applying them on top of the default styles."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isButtonAriaHidden": {
          "kind": "property",
          "signature": "isButtonAriaHidden?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the 'aria-hidden' attribute on the ComboBox's button element instructing screen readers how to handle the element. This element is hidden by default because all functionality is handled by the input element and the arrow button is only meant to be decorative."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "keytipProps": {
          "kind": "property",
          "signature": "keytipProps?: IKeytipProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IKeytipProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional keytip for this combo box"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "multiSelect": {
          "kind": "property",
          "signature": "multiSelect?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional mode indicates if multi-choice selections is allowed. Default to false"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChange": {
          "kind": "property",
          "signature": "onChange?: (event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(event: React.FormEvent<IComboBox>, option?: IComboBoxOption, index?: number, value?: string) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback issued when either: 1) the selected option changes 2) a manually edited value is submitted. In this case there may not be a matched option if allowFreeform is also true (and hence only value would be true, the other parameter would be null in this case)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChanged": {
          "kind": "property",
          "signature": "onChanged?: (option?: IComboBoxOption, index?: number, value?: string, submitPendingValueEvent?: any) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(option?: IComboBoxOption, index?: number, value?: string, submitPendingValueEvent?: any) => void",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "onChange",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated, use "
            },
            {
              "kind": "code",
              "text": "onChange",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onMenuDismissed": {
          "kind": "property",
          "signature": "onMenuDismissed?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function that gets invoked when the ComboBox menu is dismissed"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onMenuOpen": {
          "kind": "property",
          "signature": "onMenuOpen?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function that gets invoked when the ComboBox menu is launched"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onPendingValueChanged": {
          "kind": "property",
          "signature": "onPendingValueChanged?: (option?: IComboBoxOption, index?: number, value?: string) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(option?: IComboBoxOption, index?: number, value?: string) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback issued when the user changes the pending value in ComboBox"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderLowerContent": {
          "kind": "property",
          "signature": "onRenderLowerContent?: IRenderFunction<IComboBoxProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IComboBoxProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Add additional content below the callout list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onResolveOptions": {
          "kind": "property",
          "signature": "onResolveOptions?: (options: IComboBoxOption[]) => IComboBoxOption[] | PromiseLike<IComboBoxOption[]>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(options: IComboBoxOption[]) => IComboBoxOption[] | PromiseLike<IComboBoxOption[]>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback issued when the options should be resolved, if they have been updated or if they need to be passed in the first time"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onScrollToItem": {
          "kind": "property",
          "signature": "onScrollToItem?: (itemIndex: number) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(itemIndex: number) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback issued when the ComboBox requests the list to scroll to a specific element"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "options": {
          "kind": "property",
          "signature": "options: IComboBoxOption[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IComboBoxOption[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Collection of options for this ComboBox"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "scrollSelectedToTop": {
          "kind": "property",
          "signature": "scrollSelectedToTop?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "When options are scrollable the selected option is positioned at the top of the callout when it is opened (unless it has reached the end of the scrollbar)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: Partial<IComboBoxStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Partial<IComboBoxStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom styles for this component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "text": {
          "kind": "property",
          "signature": "text?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Value to show in the input, does not have to map to a combobox option"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by HOC."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "useComboBoxAsMenuWidth": {
          "kind": "property",
          "signature": "useComboBoxAsMenuWidth?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether to use the ComboBoxes width as the menu's width"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "value?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "text",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Value to show in the input, does not have to map to a combobox option Deprecated, use "
            },
            {
              "kind": "code",
              "text": "text",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IComboBoxState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "currentOptions": {
          "kind": "property",
          "signature": "currentOptions: IComboBoxOption[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IComboBoxOption[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "currentPendingValue": {
          "kind": "property",
          "signature": "currentPendingValue?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "currentPendingValueValidIndex": {
          "kind": "property",
          "signature": "currentPendingValueValidIndex: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "currentPendingValueValidIndexOnHover": {
          "kind": "property",
          "signature": "currentPendingValueValidIndexOnHover: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focused": {
          "kind": "property",
          "signature": "focused?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isOpen": {
          "kind": "property",
          "signature": "isOpen?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedIndices": {
          "kind": "property",
          "signature": "selectedIndices?: number[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestedDisplayValue": {
          "kind": "property",
          "signature": "suggestedDisplayValue?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IComboBoxStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "callout": {
          "kind": "property",
          "signature": "callout: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the callout."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "container": {
          "kind": "property",
          "signature": "container: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the container which has the ComboBox and the label"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "divider": {
          "kind": "property",
          "signature": "divider: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for a divider in the options."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "errorMessage": {
          "kind": "property",
          "signature": "errorMessage: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the error Message text of the comboBox."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "header": {
          "kind": "property",
          "signature": "header: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for a header in the options."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "input": {
          "kind": "property",
          "signature": "input: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Base styles for the input element - which contains the currently selected option."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputDisabled": {
          "kind": "property",
          "signature": "inputDisabled: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the input element when comboBox is disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the label element of the ComboBox."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "labelDisabled": {
          "kind": "property",
          "signature": "labelDisabled: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the label element of the ComboBox in the disabled state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "optionsContainer": {
          "kind": "property",
          "signature": "optionsContainer: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the container of all the Combobox options Includes the headers and dividers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "optionsContainerWrapper": {
          "kind": "property",
          "signature": "optionsContainerWrapper: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the optionsContainerWrapper."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Base styles for the root element of all ComboBoxes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootDisabled": {
          "kind": "property",
          "signature": "rootDisabled: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for when the comboBox is disabled. These styles override all the other styles. NOTE : Hover (or) Focused (or) active styles are not applied for disabled comboBoxes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootDisallowFreeForm": {
          "kind": "property",
          "signature": "rootDisallowFreeForm: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for variant of ComboBox where allowFreeForm is false in the props."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootError": {
          "kind": "property",
          "signature": "rootError: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the root element for variant of ComboBox with an errorMessage in the props."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootFocused": {
          "kind": "property",
          "signature": "rootFocused: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for when the ComboBox is focused. These styles are applied for all comboBoxes except when the comboBox is disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootHovered": {
          "kind": "property",
          "signature": "rootHovered: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for when the ComboBox is hovered. These styles are applied for all comboBoxes except when the comboBox is disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootPressed": {
          "kind": "property",
          "signature": "rootPressed: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for when the ComboBox is active. These styles are applied for all comboBoxes except when the comboBox is disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICommandBar": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the active command in the list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "remeasure": {
          "kind": "method",
          "signature": "remeasure(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Remeasures the available space."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ICommandBarData": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "cacheKey": {
          "kind": "property",
          "signature": "cacheKey: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Unique string used to cache the width of the command bar"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "farItems": {
          "kind": "property",
          "signature": "farItems: ICommandBarItemProps[] | undefined;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICommandBarItemProps[] | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Items being rendered on the far side"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "minimumOverflowItems": {
          "kind": "property",
          "signature": "minimumOverflowItems: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Length of original overflowItems to ensure that they are not moved into primary region on resize"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "overflowItems": {
          "kind": "property",
          "signature": "overflowItems: ICommandBarItemProps[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICommandBarItemProps[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Items being rendered in the overflow"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryItems": {
          "kind": "property",
          "signature": "primaryItems: ICommandBarItemProps[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICommandBarItemProps[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Items being rendered in the primary region"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICommandBarItemProps": {
      "kind": "interface",
      "extends": "IContextualMenuItem",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "buttonStyles": {
          "kind": "property",
          "signature": "buttonStyles?: IButtonStyles;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IButtonStyles",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom styles for individual button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "cacheKey": {
          "kind": "property",
          "signature": "cacheKey?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A custom cache key to be used for this item. If cacheKey is changed, the cache will invalidate. Defaults to key value;"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "commandBarButtonAs": {
          "kind": "property",
          "signature": "commandBarButtonAs?: IComponentAs<ICommandBarItemProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IComponentAs<ICommandBarItemProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Method to override the render of the individual command bar button. Note, is not used when rendered in overflow"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconOnly": {
          "kind": "property",
          "signature": "iconOnly?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Remove text when button is not in the overflow"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "renderedInOverflow": {
          "kind": "property",
          "signature": "renderedInOverflow?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Context under which the item is being rendered This value is controlled by the component and useful for adjusting onRender function"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "tooltipHostProps": {
          "kind": "property",
          "signature": "tooltipHostProps?: ITooltipHostProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITooltipHostProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Props to pass into tooltip during iconOnly"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICommandBarProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accessibility text to be read by the screen reader when the user's focus enters the command bar. The screen reader will read this text after reading information about the first focusable item in the command bar."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonAs": {
          "kind": "property",
          "signature": "buttonAs?: IComponentAs<IButtonProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IComponentAs<IButtonProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom button to be used as near and far items"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional css class to apply to the command bar"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<ICommandBar>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<ICommandBar>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the ICommandBar interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "farItems": {
          "kind": "property",
          "signature": "farItems?: ICommandBarItemProps[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICommandBarItemProps[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Items to render on the right side (or left, in RTL). ICommandBarItemProps extend IContextualMenuItem"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "items": {
          "kind": "property",
          "signature": "items: ICommandBarItemProps[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICommandBarItemProps[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Items to render. ICommandBarItemProps extend IContextualMenuItem"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDataGrown": {
          "kind": "property",
          "signature": "onDataGrown?: (movedItem: ICommandBarItemProps) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(movedItem: ICommandBarItemProps) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function callback invoked when data has been grown."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDataReduced": {
          "kind": "property",
          "signature": "onDataReduced?: (movedItem: ICommandBarItemProps) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(movedItem: ICommandBarItemProps) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function callback invoked when data has been reduced."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onGrowData": {
          "kind": "property",
          "signature": "onGrowData?: (data: ICommandBarData) => ICommandBarData;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(data: ICommandBarData) => ICommandBarData",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom function to grow data if items are too small for the given space. Return "
            },
            {
              "kind": "code",
              "text": "undefined",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " if no more steps can be taken to avoid infinate loop."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onReduceData": {
          "kind": "property",
          "signature": "onReduceData?: (data: ICommandBarData) => ICommandBarData;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(data: ICommandBarData) => ICommandBarData",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom function to reduce data if items do not fit in given space. Return "
            },
            {
              "kind": "code",
              "text": "undefined",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " if no more steps can be taken to avoid infinate loop."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "overflowButtonAs": {
          "kind": "property",
          "signature": "overflowButtonAs?: IComponentAs<IButtonProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IComponentAs<IButtonProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom button to be used as oveflow button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "overflowButtonProps": {
          "kind": "property",
          "signature": "overflowButtonProps?: IButtonProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IButtonProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Props to be passed to overflow button. If menuProps are passed through this prop, any items provided will be prepended to the top of the existing menu."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "overflowItems": {
          "kind": "property",
          "signature": "overflowItems?: ICommandBarItemProps[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICommandBarItemProps[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Default items to have in the overflow menu. ICommandBarItemProps extend IContextualMenuItem"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shiftOnReduce": {
          "kind": "property",
          "signature": "shiftOnReduce?: Boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "When true, items will be 'shifted' off the front of the array when reduced, and unshifted during grow"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<ICommandBarStyleProps, ICommandBarStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<ICommandBarStyleProps, ICommandBarStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by HOC."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICommandBarStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICommandBarStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "primarySet": {
          "kind": "property",
          "signature": "primarySet?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "secondarySet": {
          "kind": "property",
          "signature": "secondarySet?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IconBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IIconProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IIconProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "IconBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "IconBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "IconButton": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "_skipComponentRefResolution": {
          "kind": "property",
          "signature": "protected _skipComponentRefResolution: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Tell BaseComponent to bypass resolution of componentRef."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "IconFontSizes": {
      "kind": "namespace",
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "exports": {
        "large": {
          "kind": "module variable",
          "signature": "large: string",
          "type": "string",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "medium": {
          "kind": "module variable",
          "signature": "medium: string",
          "type": "string",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "small": {
          "kind": "module variable",
          "signature": "small: string",
          "type": "string",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "xSmall": {
          "kind": "module variable",
          "signature": "xSmall: string",
          "type": "string",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      }
    },
    "IconNames": {
      "kind": "enum",
      "values": {
        "AADLogo": {
          "kind": "enum value",
          "value": "\"AADLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Accept": {
          "kind": "enum value",
          "value": "\"Accept\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AccessLogo": {
          "kind": "enum value",
          "value": "\"AccessLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AccessLogoFill": {
          "kind": "enum value",
          "value": "\"AccessLogoFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AccountManagement": {
          "kind": "enum value",
          "value": "\"AccountManagement\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Accounts": {
          "kind": "enum value",
          "value": "\"Accounts\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ActivateOrders": {
          "kind": "enum value",
          "value": "\"ActivateOrders\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ActivityFeed": {
          "kind": "enum value",
          "value": "\"ActivityFeed\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Add": {
          "kind": "enum value",
          "value": "\"Add\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AddBookmark": {
          "kind": "enum value",
          "value": "\"AddBookmark\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AddEvent": {
          "kind": "enum value",
          "value": "\"AddEvent\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AddFavorite": {
          "kind": "enum value",
          "value": "\"AddFavorite\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AddFavoriteFill": {
          "kind": "enum value",
          "value": "\"AddFavoriteFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AddFriend": {
          "kind": "enum value",
          "value": "\"AddFriend\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AddGroup": {
          "kind": "enum value",
          "value": "\"AddGroup\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AddNotes": {
          "kind": "enum value",
          "value": "\"AddNotes\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AddOnlineMeeting": {
          "kind": "enum value",
          "value": "\"AddOnlineMeeting\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AddPhone": {
          "kind": "enum value",
          "value": "\"AddPhone\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AddTo": {
          "kind": "enum value",
          "value": "\"AddTo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Admin": {
          "kind": "enum value",
          "value": "\"Admin\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AdminALogo32": {
          "kind": "enum value",
          "value": "\"AdminALogo32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AdminALogoFill32": {
          "kind": "enum value",
          "value": "\"AdminALogoFill32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AdminALogoInverse32": {
          "kind": "enum value",
          "value": "\"AdminALogoInverse32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AdminCLogoInverse32": {
          "kind": "enum value",
          "value": "\"AdminCLogoInverse32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AdminDLogoInverse32": {
          "kind": "enum value",
          "value": "\"AdminDLogoInverse32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AdminELogoInverse32": {
          "kind": "enum value",
          "value": "\"AdminELogoInverse32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AdminLLogoInverse32": {
          "kind": "enum value",
          "value": "\"AdminLLogoInverse32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AdminMLogoInverse32": {
          "kind": "enum value",
          "value": "\"AdminMLogoInverse32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AdminOLogoInverse32": {
          "kind": "enum value",
          "value": "\"AdminOLogoInverse32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AdminPLogoInverse32": {
          "kind": "enum value",
          "value": "\"AdminPLogoInverse32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AdminSLogoInverse32": {
          "kind": "enum value",
          "value": "\"AdminSLogoInverse32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AdminYLogoInverse32": {
          "kind": "enum value",
          "value": "\"AdminYLogoInverse32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Airplane": {
          "kind": "enum value",
          "value": "\"Airplane\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AirplaneSolid": {
          "kind": "enum value",
          "value": "\"AirplaneSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AirTickets": {
          "kind": "enum value",
          "value": "\"AirTickets\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AlarmClock": {
          "kind": "enum value",
          "value": "\"AlarmClock\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Album": {
          "kind": "enum value",
          "value": "\"Album\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AlbumRemove": {
          "kind": "enum value",
          "value": "\"AlbumRemove\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AlertSolid": {
          "kind": "enum value",
          "value": "\"AlertSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AlignCenter": {
          "kind": "enum value",
          "value": "\"AlignCenter\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AlignHorizontalCenter": {
          "kind": "enum value",
          "value": "\"AlignHorizontalCenter\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AlignHorizontalLeft": {
          "kind": "enum value",
          "value": "\"AlignHorizontalLeft\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AlignHorizontalRight": {
          "kind": "enum value",
          "value": "\"AlignHorizontalRight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AlignJustify": {
          "kind": "enum value",
          "value": "\"AlignJustify\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AlignLeft": {
          "kind": "enum value",
          "value": "\"AlignLeft\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AlignRight": {
          "kind": "enum value",
          "value": "\"AlignRight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AlignVerticalBottom": {
          "kind": "enum value",
          "value": "\"AlignVerticalBottom\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AlignVerticalCenter": {
          "kind": "enum value",
          "value": "\"AlignVerticalCenter\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AlignVerticalTop": {
          "kind": "enum value",
          "value": "\"AlignVerticalTop\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AllApps": {
          "kind": "enum value",
          "value": "\"AllApps\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AllAppsMirrored": {
          "kind": "enum value",
          "value": "\"AllAppsMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AllCurrency": {
          "kind": "enum value",
          "value": "\"AllCurrency\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AnalyticsLogo": {
          "kind": "enum value",
          "value": "\"AnalyticsLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AnalyticsQuery": {
          "kind": "enum value",
          "value": "\"AnalyticsQuery\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AnalyticsReport": {
          "kind": "enum value",
          "value": "\"AnalyticsReport\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AnalyticsView": {
          "kind": "enum value",
          "value": "\"AnalyticsView\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AnchorLock": {
          "kind": "enum value",
          "value": "\"AnchorLock\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Annotation": {
          "kind": "enum value",
          "value": "\"Annotation\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AppIconDefault": {
          "kind": "enum value",
          "value": "\"AppIconDefault\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Archive": {
          "kind": "enum value",
          "value": "\"Archive\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AreaChart": {
          "kind": "enum value",
          "value": "\"AreaChart\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ArrangeBringForward": {
          "kind": "enum value",
          "value": "\"ArrangeBringForward\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ArrangeBringToFront": {
          "kind": "enum value",
          "value": "\"ArrangeBringToFront\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ArrangeByFrom": {
          "kind": "enum value",
          "value": "\"ArrangeByFrom\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ArrangeSendBackward": {
          "kind": "enum value",
          "value": "\"ArrangeSendBackward\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ArrangeSendToBack": {
          "kind": "enum value",
          "value": "\"ArrangeSendToBack\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Arrivals": {
          "kind": "enum value",
          "value": "\"Arrivals\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ArrowDownRight8": {
          "kind": "enum value",
          "value": "\"ArrowDownRight8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ArrowDownRightMirrored8": {
          "kind": "enum value",
          "value": "\"ArrowDownRightMirrored8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ArrowTallDownLeft": {
          "kind": "enum value",
          "value": "\"ArrowTallDownLeft\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ArrowTallDownRight": {
          "kind": "enum value",
          "value": "\"ArrowTallDownRight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ArrowTallUpLeft": {
          "kind": "enum value",
          "value": "\"ArrowTallUpLeft\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ArrowTallUpRight": {
          "kind": "enum value",
          "value": "\"ArrowTallUpRight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ArrowUpRight": {
          "kind": "enum value",
          "value": "\"ArrowUpRight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ArrowUpRight8": {
          "kind": "enum value",
          "value": "\"ArrowUpRight8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ArrowUpRightMirrored8": {
          "kind": "enum value",
          "value": "\"ArrowUpRightMirrored8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Articles": {
          "kind": "enum value",
          "value": "\"Articles\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Ascending": {
          "kind": "enum value",
          "value": "\"Ascending\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AspectRatio": {
          "kind": "enum value",
          "value": "\"AspectRatio\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AssessmentGroup": {
          "kind": "enum value",
          "value": "\"AssessmentGroup\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AssessmentGroupTemplate": {
          "kind": "enum value",
          "value": "\"AssessmentGroupTemplate\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AssetLibrary": {
          "kind": "enum value",
          "value": "\"AssetLibrary\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Assign": {
          "kind": "enum value",
          "value": "\"Assign\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Asterisk": {
          "kind": "enum value",
          "value": "\"Asterisk\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AsteriskSolid": {
          "kind": "enum value",
          "value": "\"AsteriskSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ATPLogo": {
          "kind": "enum value",
          "value": "\"ATPLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Attach": {
          "kind": "enum value",
          "value": "\"Attach\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AustralianRules": {
          "kind": "enum value",
          "value": "\"AustralianRules\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AutoEnhanceOff": {
          "kind": "enum value",
          "value": "\"AutoEnhanceOff\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AutoEnhanceOn": {
          "kind": "enum value",
          "value": "\"AutoEnhanceOn\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AutoFillTemplate": {
          "kind": "enum value",
          "value": "\"AutoFillTemplate\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AutoHeight": {
          "kind": "enum value",
          "value": "\"AutoHeight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AutoRacing": {
          "kind": "enum value",
          "value": "\"AutoRacing\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AwayStatus": {
          "kind": "enum value",
          "value": "\"AwayStatus\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AzureAPIManagement": {
          "kind": "enum value",
          "value": "\"AzureAPIManagement\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AzureKeyVault": {
          "kind": "enum value",
          "value": "\"AzureKeyVault\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AzureLogo": {
          "kind": "enum value",
          "value": "\"AzureLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "AzureServiceEndpoint": {
          "kind": "enum value",
          "value": "\"AzureServiceEndpoint\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Back": {
          "kind": "enum value",
          "value": "\"Back\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BackgroundColor": {
          "kind": "enum value",
          "value": "\"BackgroundColor\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Backlog": {
          "kind": "enum value",
          "value": "\"Backlog\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BacklogBoard": {
          "kind": "enum value",
          "value": "\"BacklogBoard\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BacklogList": {
          "kind": "enum value",
          "value": "\"BacklogList\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BackToWindow": {
          "kind": "enum value",
          "value": "\"BackToWindow\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Badge": {
          "kind": "enum value",
          "value": "\"Badge\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Balloons": {
          "kind": "enum value",
          "value": "\"Balloons\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BankSolid": {
          "kind": "enum value",
          "value": "\"BankSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BarChart4": {
          "kind": "enum value",
          "value": "\"BarChart4\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BarChartHorizontal": {
          "kind": "enum value",
          "value": "\"BarChartHorizontal\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BarChartVertical": {
          "kind": "enum value",
          "value": "\"BarChartVertical\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Baseball": {
          "kind": "enum value",
          "value": "\"Baseball\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BeerMug": {
          "kind": "enum value",
          "value": "\"BeerMug\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BIDashboard": {
          "kind": "enum value",
          "value": "\"BIDashboard\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BidiLtr": {
          "kind": "enum value",
          "value": "\"BidiLtr\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BidiRtl": {
          "kind": "enum value",
          "value": "\"BidiRtl\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BingLogo": {
          "kind": "enum value",
          "value": "\"BingLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BirthdayCake": {
          "kind": "enum value",
          "value": "\"BirthdayCake\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BlockContact": {
          "kind": "enum value",
          "value": "\"BlockContact\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Blocked": {
          "kind": "enum value",
          "value": "\"Blocked\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Blocked12": {
          "kind": "enum value",
          "value": "\"Blocked12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Blocked2": {
          "kind": "enum value",
          "value": "\"Blocked2\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BlockedSite": {
          "kind": "enum value",
          "value": "\"BlockedSite\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BlockedSiteSolid12": {
          "kind": "enum value",
          "value": "\"BlockedSiteSolid12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BlockedSolid": {
          "kind": "enum value",
          "value": "\"BlockedSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BlowingSnow": {
          "kind": "enum value",
          "value": "\"BlowingSnow\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Blur": {
          "kind": "enum value",
          "value": "\"Blur\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Boards": {
          "kind": "enum value",
          "value": "\"Boards\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Bold": {
          "kind": "enum value",
          "value": "\"Bold\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BookingsLogo": {
          "kind": "enum value",
          "value": "\"BookingsLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Bookmarks": {
          "kind": "enum value",
          "value": "\"Bookmarks\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BookmarksMirrored": {
          "kind": "enum value",
          "value": "\"BookmarksMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BorderDash": {
          "kind": "enum value",
          "value": "\"BorderDash\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BorderDot": {
          "kind": "enum value",
          "value": "\"BorderDot\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BoxAdditionSolid": {
          "kind": "enum value",
          "value": "\"BoxAdditionSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BoxCheckmarkSolid": {
          "kind": "enum value",
          "value": "\"BoxCheckmarkSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BoxMultiplySolid": {
          "kind": "enum value",
          "value": "\"BoxMultiplySolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BoxPlaySolid": {
          "kind": "enum value",
          "value": "\"BoxPlaySolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BoxSubtractSolid": {
          "kind": "enum value",
          "value": "\"BoxSubtractSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BranchCommit": {
          "kind": "enum value",
          "value": "\"BranchCommit\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BranchCompare": {
          "kind": "enum value",
          "value": "\"BranchCompare\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BranchFork": {
          "kind": "enum value",
          "value": "\"BranchFork\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BranchFork2": {
          "kind": "enum value",
          "value": "\"BranchFork2\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BranchLocked": {
          "kind": "enum value",
          "value": "\"BranchLocked\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BranchMerge": {
          "kind": "enum value",
          "value": "\"BranchMerge\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BranchPullRequest": {
          "kind": "enum value",
          "value": "\"BranchPullRequest\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BranchSearch": {
          "kind": "enum value",
          "value": "\"BranchSearch\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BranchShelveset": {
          "kind": "enum value",
          "value": "\"BranchShelveset\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Breadcrumb": {
          "kind": "enum value",
          "value": "\"Breadcrumb\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Breakfast": {
          "kind": "enum value",
          "value": "\"Breakfast\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Brightness": {
          "kind": "enum value",
          "value": "\"Brightness\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Broom": {
          "kind": "enum value",
          "value": "\"Broom\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BrowserScreenShot": {
          "kind": "enum value",
          "value": "\"BrowserScreenShot\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BrowserTab": {
          "kind": "enum value",
          "value": "\"BrowserTab\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BrowserTabScreenshot": {
          "kind": "enum value",
          "value": "\"BrowserTabScreenshot\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Brunch": {
          "kind": "enum value",
          "value": "\"Brunch\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BucketColor": {
          "kind": "enum value",
          "value": "\"BucketColor\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BucketColorFill": {
          "kind": "enum value",
          "value": "\"BucketColorFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BufferTimeAfter": {
          "kind": "enum value",
          "value": "\"BufferTimeAfter\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BufferTimeBefore": {
          "kind": "enum value",
          "value": "\"BufferTimeBefore\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BufferTimeBoth": {
          "kind": "enum value",
          "value": "\"BufferTimeBoth\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Bug": {
          "kind": "enum value",
          "value": "\"Bug\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BugSolid": {
          "kind": "enum value",
          "value": "\"BugSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Build": {
          "kind": "enum value",
          "value": "\"Build\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BuildDefinition": {
          "kind": "enum value",
          "value": "\"BuildDefinition\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BuildIssue": {
          "kind": "enum value",
          "value": "\"BuildIssue\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BuildQueue": {
          "kind": "enum value",
          "value": "\"BuildQueue\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BuildQueueNew": {
          "kind": "enum value",
          "value": "\"BuildQueueNew\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BulkUpload": {
          "kind": "enum value",
          "value": "\"BulkUpload\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BulletedList": {
          "kind": "enum value",
          "value": "\"BulletedList\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BulletedList2": {
          "kind": "enum value",
          "value": "\"BulletedList2\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BulletedList2Mirrored": {
          "kind": "enum value",
          "value": "\"BulletedList2Mirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BulletedListMirrored": {
          "kind": "enum value",
          "value": "\"BulletedListMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Bullseye": {
          "kind": "enum value",
          "value": "\"Bullseye\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Bus": {
          "kind": "enum value",
          "value": "\"Bus\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BusinessCenterLogo": {
          "kind": "enum value",
          "value": "\"BusinessCenterLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BusinessHoursSign": {
          "kind": "enum value",
          "value": "\"BusinessHoursSign\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "BusSolid": {
          "kind": "enum value",
          "value": "\"BusSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ButtonControl": {
          "kind": "enum value",
          "value": "\"ButtonControl\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Cafe": {
          "kind": "enum value",
          "value": "\"Cafe\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Cake": {
          "kind": "enum value",
          "value": "\"Cake\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Calculator": {
          "kind": "enum value",
          "value": "\"Calculator\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CalculatorAddition": {
          "kind": "enum value",
          "value": "\"CalculatorAddition\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CalculatorEqualTo": {
          "kind": "enum value",
          "value": "\"CalculatorEqualTo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CalculatorMultiply": {
          "kind": "enum value",
          "value": "\"CalculatorMultiply\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CalculatorNotEqualTo": {
          "kind": "enum value",
          "value": "\"CalculatorNotEqualTo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CalculatorSubtract": {
          "kind": "enum value",
          "value": "\"CalculatorSubtract\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Calendar": {
          "kind": "enum value",
          "value": "\"Calendar\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CalendarAgenda": {
          "kind": "enum value",
          "value": "\"CalendarAgenda\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CalendarDay": {
          "kind": "enum value",
          "value": "\"CalendarDay\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CalendarMirrored": {
          "kind": "enum value",
          "value": "\"CalendarMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CalendarReply": {
          "kind": "enum value",
          "value": "\"CalendarReply\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CalendarSettings": {
          "kind": "enum value",
          "value": "\"CalendarSettings\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CalendarSettingsMirrored": {
          "kind": "enum value",
          "value": "\"CalendarSettingsMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CalendarWeek": {
          "kind": "enum value",
          "value": "\"CalendarWeek\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CalendarWorkWeek": {
          "kind": "enum value",
          "value": "\"CalendarWorkWeek\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaloriesAdd": {
          "kind": "enum value",
          "value": "\"CaloriesAdd\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Camera": {
          "kind": "enum value",
          "value": "\"Camera\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Cancel": {
          "kind": "enum value",
          "value": "\"Cancel\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CannedChat": {
          "kind": "enum value",
          "value": "\"CannedChat\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Car": {
          "kind": "enum value",
          "value": "\"Car\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretBottomLeftCenter8": {
          "kind": "enum value",
          "value": "\"CaretBottomLeftCenter8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretBottomLeftSolid8": {
          "kind": "enum value",
          "value": "\"CaretBottomLeftSolid8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretBottomRightCenter8": {
          "kind": "enum value",
          "value": "\"CaretBottomRightCenter8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretBottomRightSolid8": {
          "kind": "enum value",
          "value": "\"CaretBottomRightSolid8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretDown8": {
          "kind": "enum value",
          "value": "\"CaretDown8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretDownSolid8": {
          "kind": "enum value",
          "value": "\"CaretDownSolid8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretHollow": {
          "kind": "enum value",
          "value": "\"CaretHollow\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretHollowMirrored": {
          "kind": "enum value",
          "value": "\"CaretHollowMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretLeft8": {
          "kind": "enum value",
          "value": "\"CaretLeft8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretLeftSolid8": {
          "kind": "enum value",
          "value": "\"CaretLeftSolid8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretRight": {
          "kind": "enum value",
          "value": "\"CaretRight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretRight8": {
          "kind": "enum value",
          "value": "\"CaretRight8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretRightSolid8": {
          "kind": "enum value",
          "value": "\"CaretRightSolid8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretSolid": {
          "kind": "enum value",
          "value": "\"CaretSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretSolid16": {
          "kind": "enum value",
          "value": "\"CaretSolid16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretSolidDown": {
          "kind": "enum value",
          "value": "\"CaretSolidDown\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretSolidLeft": {
          "kind": "enum value",
          "value": "\"CaretSolidLeft\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretSolidMirrored": {
          "kind": "enum value",
          "value": "\"CaretSolidMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretSolidRight": {
          "kind": "enum value",
          "value": "\"CaretSolidRight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretSolidUp": {
          "kind": "enum value",
          "value": "\"CaretSolidUp\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretTopLeftCenter8": {
          "kind": "enum value",
          "value": "\"CaretTopLeftCenter8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretTopLeftSolid8": {
          "kind": "enum value",
          "value": "\"CaretTopLeftSolid8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretTopRightCenter8": {
          "kind": "enum value",
          "value": "\"CaretTopRightCenter8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretTopRightSolid8": {
          "kind": "enum value",
          "value": "\"CaretTopRightSolid8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretUp8": {
          "kind": "enum value",
          "value": "\"CaretUp8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CaretUpSolid8": {
          "kind": "enum value",
          "value": "\"CaretUpSolid8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Cat": {
          "kind": "enum value",
          "value": "\"Cat\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CellPhone": {
          "kind": "enum value",
          "value": "\"CellPhone\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Certificate": {
          "kind": "enum value",
          "value": "\"Certificate\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CertifiedDatabase": {
          "kind": "enum value",
          "value": "\"CertifiedDatabase\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Chart": {
          "kind": "enum value",
          "value": "\"Chart\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChartSeries": {
          "kind": "enum value",
          "value": "\"ChartSeries\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChartXAngle": {
          "kind": "enum value",
          "value": "\"ChartXAngle\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChartYAngle": {
          "kind": "enum value",
          "value": "\"ChartYAngle\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Chat": {
          "kind": "enum value",
          "value": "\"Chat\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChatInviteFriend": {
          "kind": "enum value",
          "value": "\"ChatInviteFriend\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChatSolid": {
          "kind": "enum value",
          "value": "\"ChatSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Checkbox": {
          "kind": "enum value",
          "value": "\"Checkbox\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CheckboxComposite": {
          "kind": "enum value",
          "value": "\"CheckboxComposite\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CheckboxCompositeReversed": {
          "kind": "enum value",
          "value": "\"CheckboxCompositeReversed\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CheckboxIndeterminate": {
          "kind": "enum value",
          "value": "\"CheckboxIndeterminate\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CheckedOutByOther12": {
          "kind": "enum value",
          "value": "\"CheckedOutByOther12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CheckedOutByYou12": {
          "kind": "enum value",
          "value": "\"CheckedOutByYou12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CheckList": {
          "kind": "enum value",
          "value": "\"CheckList\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CheckMark": {
          "kind": "enum value",
          "value": "\"CheckMark\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChevronDown": {
          "kind": "enum value",
          "value": "\"ChevronDown\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChevronDownEnd6": {
          "kind": "enum value",
          "value": "\"ChevronDownEnd6\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChevronDownMed": {
          "kind": "enum value",
          "value": "\"ChevronDownMed\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChevronDownSmall": {
          "kind": "enum value",
          "value": "\"ChevronDownSmall\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChevronFold10": {
          "kind": "enum value",
          "value": "\"ChevronFold10\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChevronLeft": {
          "kind": "enum value",
          "value": "\"ChevronLeft\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChevronLeftEnd6": {
          "kind": "enum value",
          "value": "\"ChevronLeftEnd6\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChevronLeftMed": {
          "kind": "enum value",
          "value": "\"ChevronLeftMed\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChevronLeftSmall": {
          "kind": "enum value",
          "value": "\"ChevronLeftSmall\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChevronRight": {
          "kind": "enum value",
          "value": "\"ChevronRight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChevronRightEnd6": {
          "kind": "enum value",
          "value": "\"ChevronRightEnd6\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChevronRightMed": {
          "kind": "enum value",
          "value": "\"ChevronRightMed\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChevronRightSmall": {
          "kind": "enum value",
          "value": "\"ChevronRightSmall\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChevronUnfold10": {
          "kind": "enum value",
          "value": "\"ChevronUnfold10\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChevronUp": {
          "kind": "enum value",
          "value": "\"ChevronUp\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChevronUpEnd6": {
          "kind": "enum value",
          "value": "\"ChevronUpEnd6\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChevronUpMed": {
          "kind": "enum value",
          "value": "\"ChevronUpMed\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChevronUpSmall": {
          "kind": "enum value",
          "value": "\"ChevronUpSmall\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Chopsticks": {
          "kind": "enum value",
          "value": "\"Chopsticks\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChromeBack": {
          "kind": "enum value",
          "value": "\"ChromeBack\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChromeBackMirrored": {
          "kind": "enum value",
          "value": "\"ChromeBackMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChromeClose": {
          "kind": "enum value",
          "value": "\"ChromeClose\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ChromeMinimize": {
          "kind": "enum value",
          "value": "\"ChromeMinimize\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CircleAddition": {
          "kind": "enum value",
          "value": "\"CircleAddition\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CircleAdditionSolid": {
          "kind": "enum value",
          "value": "\"CircleAdditionSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CircleFill": {
          "kind": "enum value",
          "value": "\"CircleFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CircleHalfFull": {
          "kind": "enum value",
          "value": "\"CircleHalfFull\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CirclePause": {
          "kind": "enum value",
          "value": "\"CirclePause\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CirclePauseSolid": {
          "kind": "enum value",
          "value": "\"CirclePauseSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CirclePlus": {
          "kind": "enum value",
          "value": "\"CirclePlus\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CircleRing": {
          "kind": "enum value",
          "value": "\"CircleRing\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CircleShapeSolid": {
          "kind": "enum value",
          "value": "\"CircleShapeSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CircleStop": {
          "kind": "enum value",
          "value": "\"CircleStop\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CircleStopSolid": {
          "kind": "enum value",
          "value": "\"CircleStopSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CityNext": {
          "kind": "enum value",
          "value": "\"CityNext\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ClassNotebookLogo16": {
          "kind": "enum value",
          "value": "\"ClassNotebookLogo16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ClassNotebookLogo32": {
          "kind": "enum value",
          "value": "\"ClassNotebookLogo32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ClassNotebookLogoFill16": {
          "kind": "enum value",
          "value": "\"ClassNotebookLogoFill16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ClassNotebookLogoFill32": {
          "kind": "enum value",
          "value": "\"ClassNotebookLogoFill32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ClassNotebookLogoInverse": {
          "kind": "enum value",
          "value": "\"ClassNotebookLogoInverse\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ClassNotebookLogoInverse16": {
          "kind": "enum value",
          "value": "\"ClassNotebookLogoInverse16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ClassNotebookLogoInverse32": {
          "kind": "enum value",
          "value": "\"ClassNotebookLogoInverse32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ClassroomLogo": {
          "kind": "enum value",
          "value": "\"ClassroomLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Clear": {
          "kind": "enum value",
          "value": "\"Clear\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ClearFilter": {
          "kind": "enum value",
          "value": "\"ClearFilter\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ClearFormatting": {
          "kind": "enum value",
          "value": "\"ClearFormatting\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ClearNight": {
          "kind": "enum value",
          "value": "\"ClearNight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ClipboardSolid": {
          "kind": "enum value",
          "value": "\"ClipboardSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Clock": {
          "kind": "enum value",
          "value": "\"Clock\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CloneToDesktop": {
          "kind": "enum value",
          "value": "\"CloneToDesktop\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ClosedCaption": {
          "kind": "enum value",
          "value": "\"ClosedCaption\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ClosePane": {
          "kind": "enum value",
          "value": "\"ClosePane\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ClosePaneMirrored": {
          "kind": "enum value",
          "value": "\"ClosePaneMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Cloud": {
          "kind": "enum value",
          "value": "\"Cloud\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CloudAdd": {
          "kind": "enum value",
          "value": "\"CloudAdd\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CloudDownload": {
          "kind": "enum value",
          "value": "\"CloudDownload\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CloudUpload": {
          "kind": "enum value",
          "value": "\"CloudUpload\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CloudWeather": {
          "kind": "enum value",
          "value": "\"CloudWeather\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Cloudy": {
          "kind": "enum value",
          "value": "\"Cloudy\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Cocktails": {
          "kind": "enum value",
          "value": "\"Cocktails\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Code": {
          "kind": "enum value",
          "value": "\"Code\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CodeEdit": {
          "kind": "enum value",
          "value": "\"CodeEdit\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Coffee": {
          "kind": "enum value",
          "value": "\"Coffee\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CoffeeScript": {
          "kind": "enum value",
          "value": "\"CoffeeScript\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CollapseContent": {
          "kind": "enum value",
          "value": "\"CollapseContent\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CollapseContentSingle": {
          "kind": "enum value",
          "value": "\"CollapseContentSingle\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CollapseMenu": {
          "kind": "enum value",
          "value": "\"CollapseMenu\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CollegeFootball": {
          "kind": "enum value",
          "value": "\"CollegeFootball\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CollegeHoops": {
          "kind": "enum value",
          "value": "\"CollegeHoops\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Color": {
          "kind": "enum value",
          "value": "\"Color\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ColorSolid": {
          "kind": "enum value",
          "value": "\"ColorSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ColumnLeftTwoThirds": {
          "kind": "enum value",
          "value": "\"ColumnLeftTwoThirds\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ColumnLeftTwoThirdsEdit": {
          "kind": "enum value",
          "value": "\"ColumnLeftTwoThirdsEdit\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ColumnOptions": {
          "kind": "enum value",
          "value": "\"ColumnOptions\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ColumnRightTwoThirds": {
          "kind": "enum value",
          "value": "\"ColumnRightTwoThirds\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ColumnRightTwoThirdsEdit": {
          "kind": "enum value",
          "value": "\"ColumnRightTwoThirdsEdit\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Combine": {
          "kind": "enum value",
          "value": "\"Combine\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Combobox": {
          "kind": "enum value",
          "value": "\"Combobox\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CommandPrompt": {
          "kind": "enum value",
          "value": "\"CommandPrompt\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Comment": {
          "kind": "enum value",
          "value": "\"Comment\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CommentAdd": {
          "kind": "enum value",
          "value": "\"CommentAdd\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CommentNext": {
          "kind": "enum value",
          "value": "\"CommentNext\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CommentPrevious": {
          "kind": "enum value",
          "value": "\"CommentPrevious\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CommentUrgent": {
          "kind": "enum value",
          "value": "\"CommentUrgent\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Commitments": {
          "kind": "enum value",
          "value": "\"Commitments\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Communications": {
          "kind": "enum value",
          "value": "\"Communications\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CompanyDirectory": {
          "kind": "enum value",
          "value": "\"CompanyDirectory\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CompanyDirectoryMirrored": {
          "kind": "enum value",
          "value": "\"CompanyDirectoryMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CompassNW": {
          "kind": "enum value",
          "value": "\"CompassNW\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Completed": {
          "kind": "enum value",
          "value": "\"Completed\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CompletedSolid": {
          "kind": "enum value",
          "value": "\"CompletedSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ConfigurationSolid": {
          "kind": "enum value",
          "value": "\"ConfigurationSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ConnectContacts": {
          "kind": "enum value",
          "value": "\"ConnectContacts\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ConstructionCone": {
          "kind": "enum value",
          "value": "\"ConstructionCone\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ConstructionConeSolid": {
          "kind": "enum value",
          "value": "\"ConstructionConeSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Contact": {
          "kind": "enum value",
          "value": "\"Contact\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ContactCard": {
          "kind": "enum value",
          "value": "\"ContactCard\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ContactCardSettings": {
          "kind": "enum value",
          "value": "\"ContactCardSettings\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ContactCardSettingsMirrored": {
          "kind": "enum value",
          "value": "\"ContactCardSettingsMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ContactInfo": {
          "kind": "enum value",
          "value": "\"ContactInfo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ContactLink": {
          "kind": "enum value",
          "value": "\"ContactLink\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ContextMenu": {
          "kind": "enum value",
          "value": "\"ContextMenu\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Contrast": {
          "kind": "enum value",
          "value": "\"Contrast\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Copy": {
          "kind": "enum value",
          "value": "\"Copy\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Cotton": {
          "kind": "enum value",
          "value": "\"Cotton\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CPlusPlus": {
          "kind": "enum value",
          "value": "\"CPlusPlus\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CPlusPlusLanguage": {
          "kind": "enum value",
          "value": "\"CPlusPlusLanguage\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CreateMailRule": {
          "kind": "enum value",
          "value": "\"CreateMailRule\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Cricket": {
          "kind": "enum value",
          "value": "\"Cricket\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CRMReport": {
          "kind": "enum value",
          "value": "\"CRMReport\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Crop": {
          "kind": "enum value",
          "value": "\"Crop\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Crown": {
          "kind": "enum value",
          "value": "\"Crown\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CrownSolid": {
          "kind": "enum value",
          "value": "\"CrownSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CSharp": {
          "kind": "enum value",
          "value": "\"CSharp\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CSharpLanguage": {
          "kind": "enum value",
          "value": "\"CSharpLanguage\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CSS": {
          "kind": "enum value",
          "value": "\"CSS\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CustomList": {
          "kind": "enum value",
          "value": "\"CustomList\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "CustomListMirrored": {
          "kind": "enum value",
          "value": "\"CustomListMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Cut": {
          "kind": "enum value",
          "value": "\"Cut\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Cycling": {
          "kind": "enum value",
          "value": "\"Cycling\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "D365TalentHRCore": {
          "kind": "enum value",
          "value": "\"D365TalentHRCore\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "D365TalentInsight": {
          "kind": "enum value",
          "value": "\"D365TalentInsight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "D365TalentLearn": {
          "kind": "enum value",
          "value": "\"D365TalentLearn\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DashboardAdd": {
          "kind": "enum value",
          "value": "\"DashboardAdd\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Database": {
          "kind": "enum value",
          "value": "\"Database\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DataConnectionLibrary": {
          "kind": "enum value",
          "value": "\"DataConnectionLibrary\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DateTime": {
          "kind": "enum value",
          "value": "\"DateTime\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DateTime2": {
          "kind": "enum value",
          "value": "\"DateTime2\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DateTimeMirrored": {
          "kind": "enum value",
          "value": "\"DateTimeMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DeactivateOrders": {
          "kind": "enum value",
          "value": "\"DeactivateOrders\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Decimals": {
          "kind": "enum value",
          "value": "\"Decimals\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DecisionSolid": {
          "kind": "enum value",
          "value": "\"DecisionSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DeclineCall": {
          "kind": "enum value",
          "value": "\"DeclineCall\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DecreaseIndentLegacy": {
          "kind": "enum value",
          "value": "\"DecreaseIndentLegacy\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DefaultRatio": {
          "kind": "enum value",
          "value": "\"DefaultRatio\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DefectSolid": {
          "kind": "enum value",
          "value": "\"DefectSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Delete": {
          "kind": "enum value",
          "value": "\"Delete\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DeleteColumns": {
          "kind": "enum value",
          "value": "\"DeleteColumns\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DeleteRows": {
          "kind": "enum value",
          "value": "\"DeleteRows\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DeleteRowsMirrored": {
          "kind": "enum value",
          "value": "\"DeleteRowsMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DeleteTable": {
          "kind": "enum value",
          "value": "\"DeleteTable\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DeliveryTruck": {
          "kind": "enum value",
          "value": "\"DeliveryTruck\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DelveAnalytics": {
          "kind": "enum value",
          "value": "\"DelveAnalytics\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DelveAnalyticsLogo": {
          "kind": "enum value",
          "value": "\"DelveAnalyticsLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DelveLogo": {
          "kind": "enum value",
          "value": "\"DelveLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DelveLogoFill": {
          "kind": "enum value",
          "value": "\"DelveLogoFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DelveLogoInverse": {
          "kind": "enum value",
          "value": "\"DelveLogoInverse\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Deploy": {
          "kind": "enum value",
          "value": "\"Deploy\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Descending": {
          "kind": "enum value",
          "value": "\"Descending\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Design": {
          "kind": "enum value",
          "value": "\"Design\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DesktopScreenshot": {
          "kind": "enum value",
          "value": "\"DesktopScreenshot\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DeveloperTools": {
          "kind": "enum value",
          "value": "\"DeveloperTools\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Devices3": {
          "kind": "enum value",
          "value": "\"Devices3\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Devices4": {
          "kind": "enum value",
          "value": "\"Devices4\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Diagnostic": {
          "kind": "enum value",
          "value": "\"Diagnostic\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Dialpad": {
          "kind": "enum value",
          "value": "\"Dialpad\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Diamond": {
          "kind": "enum value",
          "value": "\"Diamond\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DiamondSolid": {
          "kind": "enum value",
          "value": "\"DiamondSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Dictionary": {
          "kind": "enum value",
          "value": "\"Dictionary\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DictionaryRemove": {
          "kind": "enum value",
          "value": "\"DictionaryRemove\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DietPlanNotebook": {
          "kind": "enum value",
          "value": "\"DietPlanNotebook\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DiffInline": {
          "kind": "enum value",
          "value": "\"DiffInline\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DiffSideBySide": {
          "kind": "enum value",
          "value": "\"DiffSideBySide\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DisableUpdates": {
          "kind": "enum value",
          "value": "\"DisableUpdates\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Dislike": {
          "kind": "enum value",
          "value": "\"Dislike\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DislikeSolid": {
          "kind": "enum value",
          "value": "\"DislikeSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DockLeft": {
          "kind": "enum value",
          "value": "\"DockLeft\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DockLeftMirrored": {
          "kind": "enum value",
          "value": "\"DockLeftMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DockRight": {
          "kind": "enum value",
          "value": "\"DockRight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DocLibrary": {
          "kind": "enum value",
          "value": "\"DocLibrary\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DocsLogoInverse": {
          "kind": "enum value",
          "value": "\"DocsLogoInverse\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Document": {
          "kind": "enum value",
          "value": "\"Document\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DocumentApproval": {
          "kind": "enum value",
          "value": "\"DocumentApproval\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Documentation": {
          "kind": "enum value",
          "value": "\"Documentation\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DocumentManagement": {
          "kind": "enum value",
          "value": "\"DocumentManagement\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DocumentReply": {
          "kind": "enum value",
          "value": "\"DocumentReply\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DocumentSearch": {
          "kind": "enum value",
          "value": "\"DocumentSearch\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DocumentSet": {
          "kind": "enum value",
          "value": "\"DocumentSet\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DOM": {
          "kind": "enum value",
          "value": "\"DOM\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DonutChart": {
          "kind": "enum value",
          "value": "\"DonutChart\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Door": {
          "kind": "enum value",
          "value": "\"Door\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DoubleBookmark": {
          "kind": "enum value",
          "value": "\"DoubleBookmark\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DoubleChevronDown": {
          "kind": "enum value",
          "value": "\"DoubleChevronDown\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DoubleChevronDown12": {
          "kind": "enum value",
          "value": "\"DoubleChevronDown12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DoubleChevronDown8": {
          "kind": "enum value",
          "value": "\"DoubleChevronDown8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DoubleChevronLeft": {
          "kind": "enum value",
          "value": "\"DoubleChevronLeft\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DoubleChevronLeft12": {
          "kind": "enum value",
          "value": "\"DoubleChevronLeft12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DoubleChevronLeft8": {
          "kind": "enum value",
          "value": "\"DoubleChevronLeft8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DoubleChevronLeftMed": {
          "kind": "enum value",
          "value": "\"DoubleChevronLeftMed\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DoubleChevronLeftMedMirrored": {
          "kind": "enum value",
          "value": "\"DoubleChevronLeftMedMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DoubleChevronRight": {
          "kind": "enum value",
          "value": "\"DoubleChevronRight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DoubleChevronRight12": {
          "kind": "enum value",
          "value": "\"DoubleChevronRight12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DoubleChevronRight8": {
          "kind": "enum value",
          "value": "\"DoubleChevronRight8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DoubleChevronUp": {
          "kind": "enum value",
          "value": "\"DoubleChevronUp\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DoubleChevronUp12": {
          "kind": "enum value",
          "value": "\"DoubleChevronUp12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DoubleChevronUp8": {
          "kind": "enum value",
          "value": "\"DoubleChevronUp8\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DoubleColumn": {
          "kind": "enum value",
          "value": "\"DoubleColumn\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DoubleColumnEdit": {
          "kind": "enum value",
          "value": "\"DoubleColumnEdit\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Down": {
          "kind": "enum value",
          "value": "\"Down\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Download": {
          "kind": "enum value",
          "value": "\"Download\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DownloadDocument": {
          "kind": "enum value",
          "value": "\"DownloadDocument\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DragObject": {
          "kind": "enum value",
          "value": "\"DragObject\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DrillDown": {
          "kind": "enum value",
          "value": "\"DrillDown\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DrillDownSolid": {
          "kind": "enum value",
          "value": "\"DrillDownSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DrillExpand": {
          "kind": "enum value",
          "value": "\"DrillExpand\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DrillShow": {
          "kind": "enum value",
          "value": "\"DrillShow\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DrillThrough": {
          "kind": "enum value",
          "value": "\"DrillThrough\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DRM": {
          "kind": "enum value",
          "value": "\"DRM\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Drop": {
          "kind": "enum value",
          "value": "\"Drop\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Dropdown": {
          "kind": "enum value",
          "value": "\"Dropdown\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DropShapeSolid": {
          "kind": "enum value",
          "value": "\"DropShapeSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Duststorm": {
          "kind": "enum value",
          "value": "\"Duststorm\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Dynamics365Logo": {
          "kind": "enum value",
          "value": "\"Dynamics365Logo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "DynamicSMBLogo": {
          "kind": "enum value",
          "value": "\"DynamicSMBLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EatDrink": {
          "kind": "enum value",
          "value": "\"EatDrink\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EdgeLogo": {
          "kind": "enum value",
          "value": "\"EdgeLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Edit": {
          "kind": "enum value",
          "value": "\"Edit\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EditContact": {
          "kind": "enum value",
          "value": "\"EditContact\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EditMail": {
          "kind": "enum value",
          "value": "\"EditMail\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EditMirrored": {
          "kind": "enum value",
          "value": "\"EditMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EditNote": {
          "kind": "enum value",
          "value": "\"EditNote\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EditPhoto": {
          "kind": "enum value",
          "value": "\"EditPhoto\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EditSolid12": {
          "kind": "enum value",
          "value": "\"EditSolid12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EditSolidMirrored12": {
          "kind": "enum value",
          "value": "\"EditSolidMirrored12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EditStyle": {
          "kind": "enum value",
          "value": "\"EditStyle\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Education": {
          "kind": "enum value",
          "value": "\"Education\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Ellipse": {
          "kind": "enum value",
          "value": "\"Ellipse\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Embed": {
          "kind": "enum value",
          "value": "\"Embed\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EMI": {
          "kind": "enum value",
          "value": "\"EMI\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Emoji": {
          "kind": "enum value",
          "value": "\"Emoji\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Emoji2": {
          "kind": "enum value",
          "value": "\"Emoji2\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EmojiDisappointed": {
          "kind": "enum value",
          "value": "\"EmojiDisappointed\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EmojiNeutral": {
          "kind": "enum value",
          "value": "\"EmojiNeutral\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EmojiTabSymbols": {
          "kind": "enum value",
          "value": "\"EmojiTabSymbols\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EmptyRecycleBin": {
          "kind": "enum value",
          "value": "\"EmptyRecycleBin\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Encryption": {
          "kind": "enum value",
          "value": "\"Encryption\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EngineeringGroup": {
          "kind": "enum value",
          "value": "\"EngineeringGroup\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EntryDecline": {
          "kind": "enum value",
          "value": "\"EntryDecline\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EntryView": {
          "kind": "enum value",
          "value": "\"EntryView\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Equalizer": {
          "kind": "enum value",
          "value": "\"Equalizer\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EraseTool": {
          "kind": "enum value",
          "value": "\"EraseTool\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Error": {
          "kind": "enum value",
          "value": "\"Error\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ErrorBadge": {
          "kind": "enum value",
          "value": "\"ErrorBadge\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Event": {
          "kind": "enum value",
          "value": "\"Event\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EventAccepted": {
          "kind": "enum value",
          "value": "\"EventAccepted\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EventDate": {
          "kind": "enum value",
          "value": "\"EventDate\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EventDeclined": {
          "kind": "enum value",
          "value": "\"EventDeclined\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EventInfo": {
          "kind": "enum value",
          "value": "\"EventInfo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EventTentative": {
          "kind": "enum value",
          "value": "\"EventTentative\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "EventTentativeMirrored": {
          "kind": "enum value",
          "value": "\"EventTentativeMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ExcelDocument": {
          "kind": "enum value",
          "value": "\"ExcelDocument\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ExcelLogo": {
          "kind": "enum value",
          "value": "\"ExcelLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ExcelLogo16": {
          "kind": "enum value",
          "value": "\"ExcelLogo16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ExcelLogoFill": {
          "kind": "enum value",
          "value": "\"ExcelLogoFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ExcelLogoFill16": {
          "kind": "enum value",
          "value": "\"ExcelLogoFill16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ExcelLogoInverse": {
          "kind": "enum value",
          "value": "\"ExcelLogoInverse\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ExcelLogoInverse16": {
          "kind": "enum value",
          "value": "\"ExcelLogoInverse16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ExchangeLogo": {
          "kind": "enum value",
          "value": "\"ExchangeLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ExchangeLogoFill": {
          "kind": "enum value",
          "value": "\"ExchangeLogoFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ExchangeLogoInverse": {
          "kind": "enum value",
          "value": "\"ExchangeLogoInverse\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ExerciseTracker": {
          "kind": "enum value",
          "value": "\"ExerciseTracker\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ExpandMenu": {
          "kind": "enum value",
          "value": "\"ExpandMenu\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ExploreContent": {
          "kind": "enum value",
          "value": "\"ExploreContent\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ExploreContentSingle": {
          "kind": "enum value",
          "value": "\"ExploreContentSingle\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ExploreData": {
          "kind": "enum value",
          "value": "\"ExploreData\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Export": {
          "kind": "enum value",
          "value": "\"Export\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ExportMirrored": {
          "kind": "enum value",
          "value": "\"ExportMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ExternalBuild": {
          "kind": "enum value",
          "value": "\"ExternalBuild\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ExternalTFVC": {
          "kind": "enum value",
          "value": "\"ExternalTFVC\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ExternalXAML": {
          "kind": "enum value",
          "value": "\"ExternalXAML\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Eyedropper": {
          "kind": "enum value",
          "value": "\"Eyedropper\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "F12DevTools": {
          "kind": "enum value",
          "value": "\"F12DevTools\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FabricAssetLibrary": {
          "kind": "enum value",
          "value": "\"FabricAssetLibrary\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FabricDataConnectionLibrary": {
          "kind": "enum value",
          "value": "\"FabricDataConnectionLibrary\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FabricDocLibrary": {
          "kind": "enum value",
          "value": "\"FabricDocLibrary\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FabricFolder": {
          "kind": "enum value",
          "value": "\"FabricFolder\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FabricFolderFill": {
          "kind": "enum value",
          "value": "\"FabricFolderFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FabricFolderSearch": {
          "kind": "enum value",
          "value": "\"FabricFolderSearch\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FabricFormLibrary": {
          "kind": "enum value",
          "value": "\"FabricFormLibrary\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FabricFormLibraryMirrored": {
          "kind": "enum value",
          "value": "\"FabricFormLibraryMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FabricMovetoFolder": {
          "kind": "enum value",
          "value": "\"FabricMovetoFolder\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FabricNewFolder": {
          "kind": "enum value",
          "value": "\"FabricNewFolder\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FabricOpenFolderHorizontal": {
          "kind": "enum value",
          "value": "\"FabricOpenFolderHorizontal\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FabricPictureLibrary": {
          "kind": "enum value",
          "value": "\"FabricPictureLibrary\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FabricPublicFolder": {
          "kind": "enum value",
          "value": "\"FabricPublicFolder\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FabricReportLibrary": {
          "kind": "enum value",
          "value": "\"FabricReportLibrary\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FabricReportLibraryMirrored": {
          "kind": "enum value",
          "value": "\"FabricReportLibraryMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FabricSyncFolder": {
          "kind": "enum value",
          "value": "\"FabricSyncFolder\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FabricUnsyncFolder": {
          "kind": "enum value",
          "value": "\"FabricUnsyncFolder\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Family": {
          "kind": "enum value",
          "value": "\"Family\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FangBody": {
          "kind": "enum value",
          "value": "\"FangBody\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FastForward": {
          "kind": "enum value",
          "value": "\"FastForward\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FastMode": {
          "kind": "enum value",
          "value": "\"FastMode\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Favicon": {
          "kind": "enum value",
          "value": "\"Favicon\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FavoriteList": {
          "kind": "enum value",
          "value": "\"FavoriteList\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FavoriteStar": {
          "kind": "enum value",
          "value": "\"FavoriteStar\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FavoriteStarFill": {
          "kind": "enum value",
          "value": "\"FavoriteStarFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Fax": {
          "kind": "enum value",
          "value": "\"Fax\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Feedback": {
          "kind": "enum value",
          "value": "\"Feedback\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FeedbackRequestMirroredSolid": {
          "kind": "enum value",
          "value": "\"FeedbackRequestMirroredSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FeedbackRequestSolid": {
          "kind": "enum value",
          "value": "\"FeedbackRequestSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FeedbackResponseSolid": {
          "kind": "enum value",
          "value": "\"FeedbackResponseSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Ferry": {
          "kind": "enum value",
          "value": "\"Ferry\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FerrySolid": {
          "kind": "enum value",
          "value": "\"FerrySolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FieldChanged": {
          "kind": "enum value",
          "value": "\"FieldChanged\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FieldEmpty": {
          "kind": "enum value",
          "value": "\"FieldEmpty\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FieldFilled": {
          "kind": "enum value",
          "value": "\"FieldFilled\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FieldNotChanged": {
          "kind": "enum value",
          "value": "\"FieldNotChanged\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FieldReadOnly": {
          "kind": "enum value",
          "value": "\"FieldReadOnly\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FieldRequired": {
          "kind": "enum value",
          "value": "\"FieldRequired\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FileASPX": {
          "kind": "enum value",
          "value": "\"FileASPX\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FileBug": {
          "kind": "enum value",
          "value": "\"FileBug\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FileCode": {
          "kind": "enum value",
          "value": "\"FileCode\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FileComment": {
          "kind": "enum value",
          "value": "\"FileComment\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FileCSS": {
          "kind": "enum value",
          "value": "\"FileCSS\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FileHTML": {
          "kind": "enum value",
          "value": "\"FileHTML\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FileImage": {
          "kind": "enum value",
          "value": "\"FileImage\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FileJAVA": {
          "kind": "enum value",
          "value": "\"FileJAVA\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FileLess": {
          "kind": "enum value",
          "value": "\"FileLess\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FilePDB": {
          "kind": "enum value",
          "value": "\"FilePDB\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FileSass": {
          "kind": "enum value",
          "value": "\"FileSass\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FileSQL": {
          "kind": "enum value",
          "value": "\"FileSQL\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FileSymlink": {
          "kind": "enum value",
          "value": "\"FileSymlink\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FileTemplate": {
          "kind": "enum value",
          "value": "\"FileTemplate\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FileTypeSolution": {
          "kind": "enum value",
          "value": "\"FileTypeSolution\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FileYML": {
          "kind": "enum value",
          "value": "\"FileYML\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Filter": {
          "kind": "enum value",
          "value": "\"Filter\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Filters": {
          "kind": "enum value",
          "value": "\"Filters\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FilterSolid": {
          "kind": "enum value",
          "value": "\"FilterSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FiltersSolid": {
          "kind": "enum value",
          "value": "\"FiltersSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Financial": {
          "kind": "enum value",
          "value": "\"Financial\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FinancialMirroredSolid": {
          "kind": "enum value",
          "value": "\"FinancialMirroredSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FinancialSolid": {
          "kind": "enum value",
          "value": "\"FinancialSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Fingerprint": {
          "kind": "enum value",
          "value": "\"Fingerprint\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FiveTileGrid": {
          "kind": "enum value",
          "value": "\"FiveTileGrid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Flag": {
          "kind": "enum value",
          "value": "\"Flag\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FlameSolid": {
          "kind": "enum value",
          "value": "\"FlameSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FlickDown": {
          "kind": "enum value",
          "value": "\"FlickDown\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FlickLeft": {
          "kind": "enum value",
          "value": "\"FlickLeft\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FlickRight": {
          "kind": "enum value",
          "value": "\"FlickRight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FlickUp": {
          "kind": "enum value",
          "value": "\"FlickUp\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Flow": {
          "kind": "enum value",
          "value": "\"Flow\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FocalPoint": {
          "kind": "enum value",
          "value": "\"FocalPoint\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Fog": {
          "kind": "enum value",
          "value": "\"Fog\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Folder": {
          "kind": "enum value",
          "value": "\"Folder\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FolderFill": {
          "kind": "enum value",
          "value": "\"FolderFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FolderHorizontal": {
          "kind": "enum value",
          "value": "\"FolderHorizontal\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FolderList": {
          "kind": "enum value",
          "value": "\"FolderList\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FolderListMirrored": {
          "kind": "enum value",
          "value": "\"FolderListMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FolderOpen": {
          "kind": "enum value",
          "value": "\"FolderOpen\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FolderQuery": {
          "kind": "enum value",
          "value": "\"FolderQuery\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FolderSearch": {
          "kind": "enum value",
          "value": "\"FolderSearch\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FollowUser": {
          "kind": "enum value",
          "value": "\"FollowUser\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Font": {
          "kind": "enum value",
          "value": "\"Font\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FontColor": {
          "kind": "enum value",
          "value": "\"FontColor\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FontColorA": {
          "kind": "enum value",
          "value": "\"FontColorA\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FontColorSwatch": {
          "kind": "enum value",
          "value": "\"FontColorSwatch\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FontDecrease": {
          "kind": "enum value",
          "value": "\"FontDecrease\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FontIncrease": {
          "kind": "enum value",
          "value": "\"FontIncrease\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FontSize": {
          "kind": "enum value",
          "value": "\"FontSize\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FormLibrary": {
          "kind": "enum value",
          "value": "\"FormLibrary\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FormLibraryMirrored": {
          "kind": "enum value",
          "value": "\"FormLibraryMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Forward": {
          "kind": "enum value",
          "value": "\"Forward\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ForwardEvent": {
          "kind": "enum value",
          "value": "\"ForwardEvent\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Freezing": {
          "kind": "enum value",
          "value": "\"Freezing\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Frigid": {
          "kind": "enum value",
          "value": "\"Frigid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FSharp": {
          "kind": "enum value",
          "value": "\"FSharp\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FSharpLanguage": {
          "kind": "enum value",
          "value": "\"FSharpLanguage\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FullCircleMask": {
          "kind": "enum value",
          "value": "\"FullCircleMask\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FullHistory": {
          "kind": "enum value",
          "value": "\"FullHistory\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FullScreen": {
          "kind": "enum value",
          "value": "\"FullScreen\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FullWidth": {
          "kind": "enum value",
          "value": "\"FullWidth\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FullWidthEdit": {
          "kind": "enum value",
          "value": "\"FullWidthEdit\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FunctionalManagerDashboard": {
          "kind": "enum value",
          "value": "\"FunctionalManagerDashboard\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "GallatinLogo": {
          "kind": "enum value",
          "value": "\"GallatinLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Generate": {
          "kind": "enum value",
          "value": "\"Generate\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "GenericScan": {
          "kind": "enum value",
          "value": "\"GenericScan\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Giftbox": {
          "kind": "enum value",
          "value": "\"Giftbox\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "GiftboxOpen": {
          "kind": "enum value",
          "value": "\"GiftboxOpen\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "GiftBoxSolid": {
          "kind": "enum value",
          "value": "\"GiftBoxSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "GiftCard": {
          "kind": "enum value",
          "value": "\"GiftCard\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "GitGraph": {
          "kind": "enum value",
          "value": "\"GitGraph\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Glasses": {
          "kind": "enum value",
          "value": "\"Glasses\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Glimmer": {
          "kind": "enum value",
          "value": "\"Glimmer\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "GlobalNavButton": {
          "kind": "enum value",
          "value": "\"GlobalNavButton\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Globe": {
          "kind": "enum value",
          "value": "\"Globe\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Globe2": {
          "kind": "enum value",
          "value": "\"Globe2\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "GlobeFavorite": {
          "kind": "enum value",
          "value": "\"GlobeFavorite\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Golf": {
          "kind": "enum value",
          "value": "\"Golf\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "GotoToday": {
          "kind": "enum value",
          "value": "\"GotoToday\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "GridViewLarge": {
          "kind": "enum value",
          "value": "\"GridViewLarge\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "GridViewMedium": {
          "kind": "enum value",
          "value": "\"GridViewMedium\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "GridViewSmall": {
          "kind": "enum value",
          "value": "\"GridViewSmall\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "GripperBarHorizontal": {
          "kind": "enum value",
          "value": "\"GripperBarHorizontal\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "GripperBarVertical": {
          "kind": "enum value",
          "value": "\"GripperBarVertical\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "GripperTool": {
          "kind": "enum value",
          "value": "\"GripperTool\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Group": {
          "kind": "enum value",
          "value": "\"Group\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "GroupedAscending": {
          "kind": "enum value",
          "value": "\"GroupedAscending\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "GroupedDescending": {
          "kind": "enum value",
          "value": "\"GroupedDescending\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "GroupedList": {
          "kind": "enum value",
          "value": "\"GroupedList\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "GroupObject": {
          "kind": "enum value",
          "value": "\"GroupObject\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "GUID": {
          "kind": "enum value",
          "value": "\"GUID\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Guitar": {
          "kind": "enum value",
          "value": "\"Guitar\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "HailDay": {
          "kind": "enum value",
          "value": "\"HailDay\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "HailNight": {
          "kind": "enum value",
          "value": "\"HailNight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "HalfAlpha": {
          "kind": "enum value",
          "value": "\"HalfAlpha\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "HalfCircle": {
          "kind": "enum value",
          "value": "\"HalfCircle\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "HandsFree": {
          "kind": "enum value",
          "value": "\"HandsFree\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Handwriting": {
          "kind": "enum value",
          "value": "\"Handwriting\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "HardDrive": {
          "kind": "enum value",
          "value": "\"HardDrive\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "HardDriveGroup": {
          "kind": "enum value",
          "value": "\"HardDriveGroup\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "HardDriveLock": {
          "kind": "enum value",
          "value": "\"HardDriveLock\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "HardDriveUnlock": {
          "kind": "enum value",
          "value": "\"HardDriveUnlock\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Header1": {
          "kind": "enum value",
          "value": "\"Header1\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Header2": {
          "kind": "enum value",
          "value": "\"Header2\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Header3": {
          "kind": "enum value",
          "value": "\"Header3\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Header4": {
          "kind": "enum value",
          "value": "\"Header4\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Headset": {
          "kind": "enum value",
          "value": "\"Headset\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "HeadsetSolid": {
          "kind": "enum value",
          "value": "\"HeadsetSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Health": {
          "kind": "enum value",
          "value": "\"Health\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "HealthSolid": {
          "kind": "enum value",
          "value": "\"HealthSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Heart": {
          "kind": "enum value",
          "value": "\"Heart\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "HeartBroken": {
          "kind": "enum value",
          "value": "\"HeartBroken\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "HeartFill": {
          "kind": "enum value",
          "value": "\"HeartFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Help": {
          "kind": "enum value",
          "value": "\"Help\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "HelpMirrored": {
          "kind": "enum value",
          "value": "\"HelpMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Hexagon": {
          "kind": "enum value",
          "value": "\"Hexagon\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Hide": {
          "kind": "enum value",
          "value": "\"Hide\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Hide2": {
          "kind": "enum value",
          "value": "\"Hide2\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Highlight": {
          "kind": "enum value",
          "value": "\"Highlight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "HighlightMappedShapes": {
          "kind": "enum value",
          "value": "\"HighlightMappedShapes\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "HintText": {
          "kind": "enum value",
          "value": "\"HintText\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "History": {
          "kind": "enum value",
          "value": "\"History\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Home": {
          "kind": "enum value",
          "value": "\"Home\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "HomeSolid": {
          "kind": "enum value",
          "value": "\"HomeSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "HorizontalDistributeCenter": {
          "kind": "enum value",
          "value": "\"HorizontalDistributeCenter\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Hospital": {
          "kind": "enum value",
          "value": "\"Hospital\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Hotel": {
          "kind": "enum value",
          "value": "\"Hotel\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "HourGlass": {
          "kind": "enum value",
          "value": "\"HourGlass\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "IconSetsFlag": {
          "kind": "enum value",
          "value": "\"IconSetsFlag\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "IDBadge": {
          "kind": "enum value",
          "value": "\"IDBadge\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ImageCrosshair": {
          "kind": "enum value",
          "value": "\"ImageCrosshair\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ImageDiff": {
          "kind": "enum value",
          "value": "\"ImageDiff\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ImagePixel": {
          "kind": "enum value",
          "value": "\"ImagePixel\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ImageSearch": {
          "kind": "enum value",
          "value": "\"ImageSearch\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Import": {
          "kind": "enum value",
          "value": "\"Import\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Important": {
          "kind": "enum value",
          "value": "\"Important\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ImportMirrored": {
          "kind": "enum value",
          "value": "\"ImportMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Inbox": {
          "kind": "enum value",
          "value": "\"Inbox\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "InboxCheck": {
          "kind": "enum value",
          "value": "\"InboxCheck\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "IncidentTriangle": {
          "kind": "enum value",
          "value": "\"IncidentTriangle\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "IncreaseIndentLegacy": {
          "kind": "enum value",
          "value": "\"IncreaseIndentLegacy\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Info": {
          "kind": "enum value",
          "value": "\"Info\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Info2": {
          "kind": "enum value",
          "value": "\"Info2\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "InfoSolid": {
          "kind": "enum value",
          "value": "\"InfoSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "InsertColumnsLeft": {
          "kind": "enum value",
          "value": "\"InsertColumnsLeft\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "InsertColumnsRight": {
          "kind": "enum value",
          "value": "\"InsertColumnsRight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "InsertRowsAbove": {
          "kind": "enum value",
          "value": "\"InsertRowsAbove\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "InsertRowsBelow": {
          "kind": "enum value",
          "value": "\"InsertRowsBelow\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "InsertSignatureLine": {
          "kind": "enum value",
          "value": "\"InsertSignatureLine\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "InsertTextBox": {
          "kind": "enum value",
          "value": "\"InsertTextBox\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "InstallToDrive": {
          "kind": "enum value",
          "value": "\"InstallToDrive\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "InternetSharing": {
          "kind": "enum value",
          "value": "\"InternetSharing\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "IRMForward": {
          "kind": "enum value",
          "value": "\"IRMForward\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "IRMForwardMirrored": {
          "kind": "enum value",
          "value": "\"IRMForwardMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "IRMReply": {
          "kind": "enum value",
          "value": "\"IRMReply\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "IRMReplyMirrored": {
          "kind": "enum value",
          "value": "\"IRMReplyMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "IssueSolid": {
          "kind": "enum value",
          "value": "\"IssueSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "IssueTracking": {
          "kind": "enum value",
          "value": "\"IssueTracking\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "IssueTrackingMirrored": {
          "kind": "enum value",
          "value": "\"IssueTrackingMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Italic": {
          "kind": "enum value",
          "value": "\"Italic\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "JavaScriptLanguage": {
          "kind": "enum value",
          "value": "\"JavaScriptLanguage\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "JoinOnlineMeeting": {
          "kind": "enum value",
          "value": "\"JoinOnlineMeeting\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "JS": {
          "kind": "enum value",
          "value": "\"JS\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "KaizalaLogo": {
          "kind": "enum value",
          "value": "\"KaizalaLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "KeyboardClassic": {
          "kind": "enum value",
          "value": "\"KeyboardClassic\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Label": {
          "kind": "enum value",
          "value": "\"Label\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LadybugSolid": {
          "kind": "enum value",
          "value": "\"LadybugSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Lamp": {
          "kind": "enum value",
          "value": "\"Lamp\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LandscapeOrientation": {
          "kind": "enum value",
          "value": "\"LandscapeOrientation\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LaptopSecure": {
          "kind": "enum value",
          "value": "\"LaptopSecure\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LaptopSelected": {
          "kind": "enum value",
          "value": "\"LaptopSelected\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LargeGrid": {
          "kind": "enum value",
          "value": "\"LargeGrid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Leave": {
          "kind": "enum value",
          "value": "\"Leave\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Library": {
          "kind": "enum value",
          "value": "\"Library\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Lifesaver": {
          "kind": "enum value",
          "value": "\"Lifesaver\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LifesaverLock": {
          "kind": "enum value",
          "value": "\"LifesaverLock\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Light": {
          "kind": "enum value",
          "value": "\"Light\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Lightbulb": {
          "kind": "enum value",
          "value": "\"Lightbulb\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LightningBolt": {
          "kind": "enum value",
          "value": "\"LightningBolt\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LightWeight": {
          "kind": "enum value",
          "value": "\"LightWeight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Like": {
          "kind": "enum value",
          "value": "\"Like\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LikeSolid": {
          "kind": "enum value",
          "value": "\"LikeSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Line": {
          "kind": "enum value",
          "value": "\"Line\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LineChart": {
          "kind": "enum value",
          "value": "\"LineChart\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LineSpacing": {
          "kind": "enum value",
          "value": "\"LineSpacing\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LineStyle": {
          "kind": "enum value",
          "value": "\"LineStyle\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LineThickness": {
          "kind": "enum value",
          "value": "\"LineThickness\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Link": {
          "kind": "enum value",
          "value": "\"Link\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Link12": {
          "kind": "enum value",
          "value": "\"Link12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LinkedInLogo": {
          "kind": "enum value",
          "value": "\"LinkedInLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "List": {
          "kind": "enum value",
          "value": "\"List\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ListMirrored": {
          "kind": "enum value",
          "value": "\"ListMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LocaleLanguage": {
          "kind": "enum value",
          "value": "\"LocaleLanguage\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Location": {
          "kind": "enum value",
          "value": "\"Location\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LocationCircle": {
          "kind": "enum value",
          "value": "\"LocationCircle\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LocationDot": {
          "kind": "enum value",
          "value": "\"LocationDot\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LocationFill": {
          "kind": "enum value",
          "value": "\"LocationFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LocationOutline": {
          "kind": "enum value",
          "value": "\"LocationOutline\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Lock": {
          "kind": "enum value",
          "value": "\"Lock\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Lock12": {
          "kind": "enum value",
          "value": "\"Lock12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LockSolid": {
          "kind": "enum value",
          "value": "\"LockSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LogRemove": {
          "kind": "enum value",
          "value": "\"LogRemove\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LookupEntities": {
          "kind": "enum value",
          "value": "\"LookupEntities\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LowerBrightness": {
          "kind": "enum value",
          "value": "\"LowerBrightness\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "LyncLogo": {
          "kind": "enum value",
          "value": "\"LyncLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Mail": {
          "kind": "enum value",
          "value": "\"Mail\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MailAlert": {
          "kind": "enum value",
          "value": "\"MailAlert\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MailCheck": {
          "kind": "enum value",
          "value": "\"MailCheck\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MailFill": {
          "kind": "enum value",
          "value": "\"MailFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MailForward": {
          "kind": "enum value",
          "value": "\"MailForward\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MailForwardMirrored": {
          "kind": "enum value",
          "value": "\"MailForwardMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MailLowImportance": {
          "kind": "enum value",
          "value": "\"MailLowImportance\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MailPause": {
          "kind": "enum value",
          "value": "\"MailPause\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MailReminder": {
          "kind": "enum value",
          "value": "\"MailReminder\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MailRepeat": {
          "kind": "enum value",
          "value": "\"MailRepeat\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MailReply": {
          "kind": "enum value",
          "value": "\"MailReply\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MailReplyAll": {
          "kind": "enum value",
          "value": "\"MailReplyAll\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MailReplyAllMirrored": {
          "kind": "enum value",
          "value": "\"MailReplyAllMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MailReplyMirrored": {
          "kind": "enum value",
          "value": "\"MailReplyMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MailSchedule": {
          "kind": "enum value",
          "value": "\"MailSchedule\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MailSolid": {
          "kind": "enum value",
          "value": "\"MailSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MailTentative": {
          "kind": "enum value",
          "value": "\"MailTentative\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MailTentativeMirrored": {
          "kind": "enum value",
          "value": "\"MailTentativeMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MailUndelivered": {
          "kind": "enum value",
          "value": "\"MailUndelivered\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ManagerSelfService": {
          "kind": "enum value",
          "value": "\"ManagerSelfService\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Manufacturing": {
          "kind": "enum value",
          "value": "\"Manufacturing\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MapDirections": {
          "kind": "enum value",
          "value": "\"MapDirections\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MapPin": {
          "kind": "enum value",
          "value": "\"MapPin\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MapPinSolid": {
          "kind": "enum value",
          "value": "\"MapPinSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MarkDownLanguage": {
          "kind": "enum value",
          "value": "\"MarkDownLanguage\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Market": {
          "kind": "enum value",
          "value": "\"Market\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MarketDown": {
          "kind": "enum value",
          "value": "\"MarketDown\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MasterDatabase": {
          "kind": "enum value",
          "value": "\"MasterDatabase\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MaximumValue": {
          "kind": "enum value",
          "value": "\"MaximumValue\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Medal": {
          "kind": "enum value",
          "value": "\"Medal\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MediaAdd": {
          "kind": "enum value",
          "value": "\"MediaAdd\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Medical": {
          "kind": "enum value",
          "value": "\"Medical\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Megaphone": {
          "kind": "enum value",
          "value": "\"Megaphone\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MegaphoneSolid": {
          "kind": "enum value",
          "value": "\"MegaphoneSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Memo": {
          "kind": "enum value",
          "value": "\"Memo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Merge": {
          "kind": "enum value",
          "value": "\"Merge\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MergeDuplicate": {
          "kind": "enum value",
          "value": "\"MergeDuplicate\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Message": {
          "kind": "enum value",
          "value": "\"Message\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MessageFill": {
          "kind": "enum value",
          "value": "\"MessageFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MicOff": {
          "kind": "enum value",
          "value": "\"MicOff\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Microphone": {
          "kind": "enum value",
          "value": "\"Microphone\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MicrosoftFlowLogo": {
          "kind": "enum value",
          "value": "\"MicrosoftFlowLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MicrosoftStaffhubLogo": {
          "kind": "enum value",
          "value": "\"MicrosoftStaffhubLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MiniContract": {
          "kind": "enum value",
          "value": "\"MiniContract\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MiniExpand": {
          "kind": "enum value",
          "value": "\"MiniExpand\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MiniLink": {
          "kind": "enum value",
          "value": "\"MiniLink\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MinimumValue": {
          "kind": "enum value",
          "value": "\"MinimumValue\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MobileReport": {
          "kind": "enum value",
          "value": "\"MobileReport\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MobileSelected": {
          "kind": "enum value",
          "value": "\"MobileSelected\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Money": {
          "kind": "enum value",
          "value": "\"Money\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "More": {
          "kind": "enum value",
          "value": "\"More\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MoreSports": {
          "kind": "enum value",
          "value": "\"MoreSports\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MoreVertical": {
          "kind": "enum value",
          "value": "\"MoreVertical\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MountainClimbing": {
          "kind": "enum value",
          "value": "\"MountainClimbing\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Move": {
          "kind": "enum value",
          "value": "\"Move\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Movers": {
          "kind": "enum value",
          "value": "\"Movers\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MoveToFolder": {
          "kind": "enum value",
          "value": "\"MoveToFolder\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MSNLogo": {
          "kind": "enum value",
          "value": "\"MSNLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MSNVideos": {
          "kind": "enum value",
          "value": "\"MSNVideos\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MSNVideosSolid": {
          "kind": "enum value",
          "value": "\"MSNVideosSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MultiSelect": {
          "kind": "enum value",
          "value": "\"MultiSelect\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MultiSelectMirrored": {
          "kind": "enum value",
          "value": "\"MultiSelectMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MusicInCollection": {
          "kind": "enum value",
          "value": "\"MusicInCollection\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MusicInCollectionFill": {
          "kind": "enum value",
          "value": "\"MusicInCollectionFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MusicNote": {
          "kind": "enum value",
          "value": "\"MusicNote\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "MyMoviesTV": {
          "kind": "enum value",
          "value": "\"MyMoviesTV\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Nav2DMapView": {
          "kind": "enum value",
          "value": "\"Nav2DMapView\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NavigateBack": {
          "kind": "enum value",
          "value": "\"NavigateBack\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NavigateBackMirrored": {
          "kind": "enum value",
          "value": "\"NavigateBackMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NavigateExternalInline": {
          "kind": "enum value",
          "value": "\"NavigateExternalInline\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NavigateForward": {
          "kind": "enum value",
          "value": "\"NavigateForward\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NavigateForwardMirrored": {
          "kind": "enum value",
          "value": "\"NavigateForwardMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NavigationFlipper": {
          "kind": "enum value",
          "value": "\"NavigationFlipper\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NetworkTower": {
          "kind": "enum value",
          "value": "\"NetworkTower\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NewAnalyticsQuery": {
          "kind": "enum value",
          "value": "\"NewAnalyticsQuery\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NewFolder": {
          "kind": "enum value",
          "value": "\"NewFolder\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "News": {
          "kind": "enum value",
          "value": "\"News\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NewsSearch": {
          "kind": "enum value",
          "value": "\"NewsSearch\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NewTeamProject": {
          "kind": "enum value",
          "value": "\"NewTeamProject\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Next": {
          "kind": "enum value",
          "value": "\"Next\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NormalWeight": {
          "kind": "enum value",
          "value": "\"NormalWeight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NoteForward": {
          "kind": "enum value",
          "value": "\"NoteForward\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NotePinned": {
          "kind": "enum value",
          "value": "\"NotePinned\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NoteReply": {
          "kind": "enum value",
          "value": "\"NoteReply\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NotExecuted": {
          "kind": "enum value",
          "value": "\"NotExecuted\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NotImpactedSolid": {
          "kind": "enum value",
          "value": "\"NotImpactedSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NugetLogo": {
          "kind": "enum value",
          "value": "\"NugetLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NumberedList": {
          "kind": "enum value",
          "value": "\"NumberedList\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NumberField": {
          "kind": "enum value",
          "value": "\"NumberField\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "NumberSequence": {
          "kind": "enum value",
          "value": "\"NumberSequence\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Octagon": {
          "kind": "enum value",
          "value": "\"Octagon\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OEM": {
          "kind": "enum value",
          "value": "\"OEM\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfficeAddinsLogo": {
          "kind": "enum value",
          "value": "\"OfficeAddinsLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfficeAssistantLogo": {
          "kind": "enum value",
          "value": "\"OfficeAssistantLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfficeChat": {
          "kind": "enum value",
          "value": "\"OfficeChat\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfficeChatSolid": {
          "kind": "enum value",
          "value": "\"OfficeChatSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfficeFormsLogo": {
          "kind": "enum value",
          "value": "\"OfficeFormsLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfficeFormsLogo16": {
          "kind": "enum value",
          "value": "\"OfficeFormsLogo16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfficeFormsLogo24": {
          "kind": "enum value",
          "value": "\"OfficeFormsLogo24\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfficeFormsLogoFill": {
          "kind": "enum value",
          "value": "\"OfficeFormsLogoFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfficeFormsLogoFill16": {
          "kind": "enum value",
          "value": "\"OfficeFormsLogoFill16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfficeFormsLogoFill24": {
          "kind": "enum value",
          "value": "\"OfficeFormsLogoFill24\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfficeFormsLogoInverse": {
          "kind": "enum value",
          "value": "\"OfficeFormsLogoInverse\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfficeFormsLogoInverse16": {
          "kind": "enum value",
          "value": "\"OfficeFormsLogoInverse16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfficeFormsLogoInverse24": {
          "kind": "enum value",
          "value": "\"OfficeFormsLogoInverse24\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfficeLogo": {
          "kind": "enum value",
          "value": "\"OfficeLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfficeStoreLogo": {
          "kind": "enum value",
          "value": "\"OfficeStoreLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfficeVideoLogo": {
          "kind": "enum value",
          "value": "\"OfficeVideoLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfficeVideoLogoFill": {
          "kind": "enum value",
          "value": "\"OfficeVideoLogoFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfficeVideoLogoInverse": {
          "kind": "enum value",
          "value": "\"OfficeVideoLogoInverse\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfflineOneDriveParachute": {
          "kind": "enum value",
          "value": "\"OfflineOneDriveParachute\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfflineOneDriveParachuteDisabled": {
          "kind": "enum value",
          "value": "\"OfflineOneDriveParachuteDisabled\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OfflineStorageSolid": {
          "kind": "enum value",
          "value": "\"OfflineStorageSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OneDriveAdd": {
          "kind": "enum value",
          "value": "\"OneDriveAdd\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OneDriveFolder16": {
          "kind": "enum value",
          "value": "\"OneDriveFolder16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OneDriveLogo": {
          "kind": "enum value",
          "value": "\"OneDriveLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OneNoteEduLogoInverse": {
          "kind": "enum value",
          "value": "\"OneNoteEduLogoInverse\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OneNoteLogo": {
          "kind": "enum value",
          "value": "\"OneNoteLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OneNoteLogo16": {
          "kind": "enum value",
          "value": "\"OneNoteLogo16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OneNoteLogoFill": {
          "kind": "enum value",
          "value": "\"OneNoteLogoFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OneNoteLogoFill16": {
          "kind": "enum value",
          "value": "\"OneNoteLogoFill16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OneNoteLogoInverse": {
          "kind": "enum value",
          "value": "\"OneNoteLogoInverse\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OneNoteLogoInverse16": {
          "kind": "enum value",
          "value": "\"OneNoteLogoInverse16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OpenFile": {
          "kind": "enum value",
          "value": "\"OpenFile\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OpenFolderHorizontal": {
          "kind": "enum value",
          "value": "\"OpenFolderHorizontal\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OpenInNewWindow": {
          "kind": "enum value",
          "value": "\"OpenInNewWindow\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OpenPane": {
          "kind": "enum value",
          "value": "\"OpenPane\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OpenPaneMirrored": {
          "kind": "enum value",
          "value": "\"OpenPaneMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OpenSource": {
          "kind": "enum value",
          "value": "\"OpenSource\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Org": {
          "kind": "enum value",
          "value": "\"Org\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Orientation": {
          "kind": "enum value",
          "value": "\"Orientation\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OutlookLogo": {
          "kind": "enum value",
          "value": "\"OutlookLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OutlookLogo16": {
          "kind": "enum value",
          "value": "\"OutlookLogo16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OutlookLogoFill": {
          "kind": "enum value",
          "value": "\"OutlookLogoFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OutlookLogoFill16": {
          "kind": "enum value",
          "value": "\"OutlookLogoFill16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OutlookLogoInverse": {
          "kind": "enum value",
          "value": "\"OutlookLogoInverse\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OutlookLogoInverse16": {
          "kind": "enum value",
          "value": "\"OutlookLogoInverse16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "OutOfOffice": {
          "kind": "enum value",
          "value": "\"OutOfOffice\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Package": {
          "kind": "enum value",
          "value": "\"Package\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Packages": {
          "kind": "enum value",
          "value": "\"Packages\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Padding": {
          "kind": "enum value",
          "value": "\"Padding\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PaddingBottom": {
          "kind": "enum value",
          "value": "\"PaddingBottom\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PaddingLeft": {
          "kind": "enum value",
          "value": "\"PaddingLeft\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PaddingRight": {
          "kind": "enum value",
          "value": "\"PaddingRight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PaddingTop": {
          "kind": "enum value",
          "value": "\"PaddingTop\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Page": {
          "kind": "enum value",
          "value": "\"Page\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PageAdd": {
          "kind": "enum value",
          "value": "\"PageAdd\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PageCheckedin": {
          "kind": "enum value",
          "value": "\"PageCheckedin\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PageCheckedOut": {
          "kind": "enum value",
          "value": "\"PageCheckedOut\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PageEdit": {
          "kind": "enum value",
          "value": "\"PageEdit\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PageLeft": {
          "kind": "enum value",
          "value": "\"PageLeft\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PageListMirroredSolid": {
          "kind": "enum value",
          "value": "\"PageListMirroredSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PageListSolid": {
          "kind": "enum value",
          "value": "\"PageListSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PageLock": {
          "kind": "enum value",
          "value": "\"PageLock\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PageRemove": {
          "kind": "enum value",
          "value": "\"PageRemove\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PageRight": {
          "kind": "enum value",
          "value": "\"PageRight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PageSolid": {
          "kind": "enum value",
          "value": "\"PageSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PanoIndicator": {
          "kind": "enum value",
          "value": "\"PanoIndicator\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Parachute": {
          "kind": "enum value",
          "value": "\"Parachute\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ParachuteSolid": {
          "kind": "enum value",
          "value": "\"ParachuteSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Parameter": {
          "kind": "enum value",
          "value": "\"Parameter\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ParkingLocation": {
          "kind": "enum value",
          "value": "\"ParkingLocation\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ParkingLocationMirrored": {
          "kind": "enum value",
          "value": "\"ParkingLocationMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ParkingMirroredSolid": {
          "kind": "enum value",
          "value": "\"ParkingMirroredSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ParkingSolid": {
          "kind": "enum value",
          "value": "\"ParkingSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PartlyCloudyDay": {
          "kind": "enum value",
          "value": "\"PartlyCloudyDay\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PartlyCloudyNight": {
          "kind": "enum value",
          "value": "\"PartlyCloudyNight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PartyLeader": {
          "kind": "enum value",
          "value": "\"PartyLeader\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PassiveAuthentication": {
          "kind": "enum value",
          "value": "\"PassiveAuthentication\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Paste": {
          "kind": "enum value",
          "value": "\"Paste\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PasteAsCode": {
          "kind": "enum value",
          "value": "\"PasteAsCode\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PasteAsText": {
          "kind": "enum value",
          "value": "\"PasteAsText\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Pause": {
          "kind": "enum value",
          "value": "\"Pause\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PaymentCard": {
          "kind": "enum value",
          "value": "\"PaymentCard\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PC1": {
          "kind": "enum value",
          "value": "\"PC1\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PDF": {
          "kind": "enum value",
          "value": "\"PDF\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PencilReply": {
          "kind": "enum value",
          "value": "\"PencilReply\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Pentagon": {
          "kind": "enum value",
          "value": "\"Pentagon\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "People": {
          "kind": "enum value",
          "value": "\"People\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PeopleAdd": {
          "kind": "enum value",
          "value": "\"PeopleAdd\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PeopleAlert": {
          "kind": "enum value",
          "value": "\"PeopleAlert\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PeopleBlock": {
          "kind": "enum value",
          "value": "\"PeopleBlock\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PeoplePause": {
          "kind": "enum value",
          "value": "\"PeoplePause\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PeopleRepeat": {
          "kind": "enum value",
          "value": "\"PeopleRepeat\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Permissions": {
          "kind": "enum value",
          "value": "\"Permissions\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PermissionsSolid": {
          "kind": "enum value",
          "value": "\"PermissionsSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Personalize": {
          "kind": "enum value",
          "value": "\"Personalize\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Phishing": {
          "kind": "enum value",
          "value": "\"Phishing\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Phone": {
          "kind": "enum value",
          "value": "\"Phone\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Photo": {
          "kind": "enum value",
          "value": "\"Photo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Photo2": {
          "kind": "enum value",
          "value": "\"Photo2\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Photo2Add": {
          "kind": "enum value",
          "value": "\"Photo2Add\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Photo2Remove": {
          "kind": "enum value",
          "value": "\"Photo2Remove\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PhotoCollection": {
          "kind": "enum value",
          "value": "\"PhotoCollection\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Picture": {
          "kind": "enum value",
          "value": "\"Picture\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PictureCenter": {
          "kind": "enum value",
          "value": "\"PictureCenter\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PictureFill": {
          "kind": "enum value",
          "value": "\"PictureFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PictureLibrary": {
          "kind": "enum value",
          "value": "\"PictureLibrary\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PicturePosition": {
          "kind": "enum value",
          "value": "\"PicturePosition\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PictureStretch": {
          "kind": "enum value",
          "value": "\"PictureStretch\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PictureTile": {
          "kind": "enum value",
          "value": "\"PictureTile\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PieDouble": {
          "kind": "enum value",
          "value": "\"PieDouble\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PieSingle": {
          "kind": "enum value",
          "value": "\"PieSingle\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PieSingleSolid": {
          "kind": "enum value",
          "value": "\"PieSingleSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Pill": {
          "kind": "enum value",
          "value": "\"Pill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Pin": {
          "kind": "enum value",
          "value": "\"Pin\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Pinned": {
          "kind": "enum value",
          "value": "\"Pinned\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PinnedFill": {
          "kind": "enum value",
          "value": "\"PinnedFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PivotChart": {
          "kind": "enum value",
          "value": "\"PivotChart\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PlannerLogo": {
          "kind": "enum value",
          "value": "\"PlannerLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PlanView": {
          "kind": "enum value",
          "value": "\"PlanView\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Play": {
          "kind": "enum value",
          "value": "\"Play\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PlayerSettings": {
          "kind": "enum value",
          "value": "\"PlayerSettings\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PlayResume": {
          "kind": "enum value",
          "value": "\"PlayResume\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Plug": {
          "kind": "enum value",
          "value": "\"Plug\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PlugConnected": {
          "kind": "enum value",
          "value": "\"PlugConnected\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PlugDisconnected": {
          "kind": "enum value",
          "value": "\"PlugDisconnected\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PlugSolid": {
          "kind": "enum value",
          "value": "\"PlugSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "POI": {
          "kind": "enum value",
          "value": "\"POI\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "POISolid": {
          "kind": "enum value",
          "value": "\"POISolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PostUpdate": {
          "kind": "enum value",
          "value": "\"PostUpdate\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PowerApps": {
          "kind": "enum value",
          "value": "\"PowerApps\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PowerApps2Logo": {
          "kind": "enum value",
          "value": "\"PowerApps2Logo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PowerAppsLogo": {
          "kind": "enum value",
          "value": "\"PowerAppsLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PowerBILogo": {
          "kind": "enum value",
          "value": "\"PowerBILogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PowerButton": {
          "kind": "enum value",
          "value": "\"PowerButton\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PowerPointDocument": {
          "kind": "enum value",
          "value": "\"PowerPointDocument\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PowerPointLogo": {
          "kind": "enum value",
          "value": "\"PowerPointLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PowerPointLogo16": {
          "kind": "enum value",
          "value": "\"PowerPointLogo16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PowerPointLogoFill": {
          "kind": "enum value",
          "value": "\"PowerPointLogoFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PowerPointLogoFill16": {
          "kind": "enum value",
          "value": "\"PowerPointLogoFill16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PowerPointLogoInverse": {
          "kind": "enum value",
          "value": "\"PowerPointLogoInverse\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PowerPointLogoInverse16": {
          "kind": "enum value",
          "value": "\"PowerPointLogoInverse16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Precipitation": {
          "kind": "enum value",
          "value": "\"Precipitation\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PresenceChickletVideo": {
          "kind": "enum value",
          "value": "\"PresenceChickletVideo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Presentation": {
          "kind": "enum value",
          "value": "\"Presentation\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Presentation12": {
          "kind": "enum value",
          "value": "\"Presentation12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Preview": {
          "kind": "enum value",
          "value": "\"Preview\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PreviewLink": {
          "kind": "enum value",
          "value": "\"PreviewLink\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Previous": {
          "kind": "enum value",
          "value": "\"Previous\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PrimaryCalendar": {
          "kind": "enum value",
          "value": "\"PrimaryCalendar\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Print": {
          "kind": "enum value",
          "value": "\"Print\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PrintfaxPrinterFile": {
          "kind": "enum value",
          "value": "\"PrintfaxPrinterFile\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Processing": {
          "kind": "enum value",
          "value": "\"Processing\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ProcessMetaTask": {
          "kind": "enum value",
          "value": "\"ProcessMetaTask\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Product": {
          "kind": "enum value",
          "value": "\"Product\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ProfileSearch": {
          "kind": "enum value",
          "value": "\"ProfileSearch\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ProFootball": {
          "kind": "enum value",
          "value": "\"ProFootball\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ProgressLoopInner": {
          "kind": "enum value",
          "value": "\"ProgressLoopInner\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ProgressLoopOuter": {
          "kind": "enum value",
          "value": "\"ProgressLoopOuter\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ProgressRingDots": {
          "kind": "enum value",
          "value": "\"ProgressRingDots\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ProHockey": {
          "kind": "enum value",
          "value": "\"ProHockey\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ProjectCollection": {
          "kind": "enum value",
          "value": "\"ProjectCollection\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ProjectLogo16": {
          "kind": "enum value",
          "value": "\"ProjectLogo16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ProjectLogo32": {
          "kind": "enum value",
          "value": "\"ProjectLogo32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ProjectLogoFill16": {
          "kind": "enum value",
          "value": "\"ProjectLogoFill16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ProjectLogoFill32": {
          "kind": "enum value",
          "value": "\"ProjectLogoFill32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ProjectLogoInverse": {
          "kind": "enum value",
          "value": "\"ProjectLogoInverse\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ProtectedDocument": {
          "kind": "enum value",
          "value": "\"ProtectedDocument\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ProtectionCenterLogo32": {
          "kind": "enum value",
          "value": "\"ProtectionCenterLogo32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ProtectRestrict": {
          "kind": "enum value",
          "value": "\"ProtectRestrict\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PublicCalendar": {
          "kind": "enum value",
          "value": "\"PublicCalendar\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PublicContactCard": {
          "kind": "enum value",
          "value": "\"PublicContactCard\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PublicContactCardMirrored": {
          "kind": "enum value",
          "value": "\"PublicContactCardMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PublicEmail": {
          "kind": "enum value",
          "value": "\"PublicEmail\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PublicFolder": {
          "kind": "enum value",
          "value": "\"PublicFolder\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PublishCourse": {
          "kind": "enum value",
          "value": "\"PublishCourse\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PublisherLogo": {
          "kind": "enum value",
          "value": "\"PublisherLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PublisherLogo16": {
          "kind": "enum value",
          "value": "\"PublisherLogo16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PublisherLogoFill": {
          "kind": "enum value",
          "value": "\"PublisherLogoFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PublisherLogoFill16": {
          "kind": "enum value",
          "value": "\"PublisherLogoFill16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PublisherLogoInverse16": {
          "kind": "enum value",
          "value": "\"PublisherLogoInverse16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Puzzle": {
          "kind": "enum value",
          "value": "\"Puzzle\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PY": {
          "kind": "enum value",
          "value": "\"PY\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "PythonLanguage": {
          "kind": "enum value",
          "value": "\"PythonLanguage\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "QuarterCircle": {
          "kind": "enum value",
          "value": "\"QuarterCircle\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "QueryList": {
          "kind": "enum value",
          "value": "\"QueryList\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Questionnaire": {
          "kind": "enum value",
          "value": "\"Questionnaire\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "QuestionnaireMirrored": {
          "kind": "enum value",
          "value": "\"QuestionnaireMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "QuickNote": {
          "kind": "enum value",
          "value": "\"QuickNote\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "QuickNoteSolid": {
          "kind": "enum value",
          "value": "\"QuickNoteSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "R": {
          "kind": "enum value",
          "value": "\"R\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RadioBtnOff": {
          "kind": "enum value",
          "value": "\"RadioBtnOff\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RadioBtnOn": {
          "kind": "enum value",
          "value": "\"RadioBtnOn\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RadioBullet": {
          "kind": "enum value",
          "value": "\"RadioBullet\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Rain": {
          "kind": "enum value",
          "value": "\"Rain\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RainShowersDay": {
          "kind": "enum value",
          "value": "\"RainShowersDay\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RainShowersNight": {
          "kind": "enum value",
          "value": "\"RainShowersNight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RainSnow": {
          "kind": "enum value",
          "value": "\"RainSnow\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RawSource": {
          "kind": "enum value",
          "value": "\"RawSource\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Read": {
          "kind": "enum value",
          "value": "\"Read\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReadingMode": {
          "kind": "enum value",
          "value": "\"ReadingMode\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReadingModeSolid": {
          "kind": "enum value",
          "value": "\"ReadingModeSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReadOutLoud": {
          "kind": "enum value",
          "value": "\"ReadOutLoud\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReceiptCheck": {
          "kind": "enum value",
          "value": "\"ReceiptCheck\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReceiptForward": {
          "kind": "enum value",
          "value": "\"ReceiptForward\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReceiptReply": {
          "kind": "enum value",
          "value": "\"ReceiptReply\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReceiptTentative": {
          "kind": "enum value",
          "value": "\"ReceiptTentative\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReceiptTentativeMirrored": {
          "kind": "enum value",
          "value": "\"ReceiptTentativeMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReceiptUndelivered": {
          "kind": "enum value",
          "value": "\"ReceiptUndelivered\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Recent": {
          "kind": "enum value",
          "value": "\"Recent\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Record2": {
          "kind": "enum value",
          "value": "\"Record2\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RecruitmentManagement": {
          "kind": "enum value",
          "value": "\"RecruitmentManagement\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RectangleShapeSolid": {
          "kind": "enum value",
          "value": "\"RectangleShapeSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RectangularClipping": {
          "kind": "enum value",
          "value": "\"RectangularClipping\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RecurringEvent": {
          "kind": "enum value",
          "value": "\"RecurringEvent\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RecurringTask": {
          "kind": "enum value",
          "value": "\"RecurringTask\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RecycleBin": {
          "kind": "enum value",
          "value": "\"RecycleBin\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Redeploy": {
          "kind": "enum value",
          "value": "\"Redeploy\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RedEye": {
          "kind": "enum value",
          "value": "\"RedEye\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Redo": {
          "kind": "enum value",
          "value": "\"Redo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Refresh": {
          "kind": "enum value",
          "value": "\"Refresh\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReleaseDefinition": {
          "kind": "enum value",
          "value": "\"ReleaseDefinition\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReminderGroup": {
          "kind": "enum value",
          "value": "\"ReminderGroup\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReminderPerson": {
          "kind": "enum value",
          "value": "\"ReminderPerson\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Remote": {
          "kind": "enum value",
          "value": "\"Remote\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Remove": {
          "kind": "enum value",
          "value": "\"Remove\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RemoveEvent": {
          "kind": "enum value",
          "value": "\"RemoveEvent\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RemoveFilter": {
          "kind": "enum value",
          "value": "\"RemoveFilter\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RemoveLink": {
          "kind": "enum value",
          "value": "\"RemoveLink\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RemoveOccurrence": {
          "kind": "enum value",
          "value": "\"RemoveOccurrence\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Rename": {
          "kind": "enum value",
          "value": "\"Rename\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RenewalCurrent": {
          "kind": "enum value",
          "value": "\"RenewalCurrent\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RenewalFuture": {
          "kind": "enum value",
          "value": "\"RenewalFuture\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReopenPages": {
          "kind": "enum value",
          "value": "\"ReopenPages\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Repair": {
          "kind": "enum value",
          "value": "\"Repair\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Reply": {
          "kind": "enum value",
          "value": "\"Reply\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReplyAll": {
          "kind": "enum value",
          "value": "\"ReplyAll\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReplyAllAlt": {
          "kind": "enum value",
          "value": "\"ReplyAllAlt\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReplyAllMirrored": {
          "kind": "enum value",
          "value": "\"ReplyAllMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReplyAlt": {
          "kind": "enum value",
          "value": "\"ReplyAlt\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReplyMirrored": {
          "kind": "enum value",
          "value": "\"ReplyMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Repo": {
          "kind": "enum value",
          "value": "\"Repo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReportAdd": {
          "kind": "enum value",
          "value": "\"ReportAdd\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReportHacked": {
          "kind": "enum value",
          "value": "\"ReportHacked\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReportLibrary": {
          "kind": "enum value",
          "value": "\"ReportLibrary\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReportLibraryMirrored": {
          "kind": "enum value",
          "value": "\"ReportLibraryMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RepoSolid": {
          "kind": "enum value",
          "value": "\"RepoSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReturnToSession": {
          "kind": "enum value",
          "value": "\"ReturnToSession\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReviewRequestMirroredSolid": {
          "kind": "enum value",
          "value": "\"ReviewRequestMirroredSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReviewRequestSolid": {
          "kind": "enum value",
          "value": "\"ReviewRequestSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReviewResponseSolid": {
          "kind": "enum value",
          "value": "\"ReviewResponseSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ReviewSolid": {
          "kind": "enum value",
          "value": "\"ReviewSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RevToggleKey": {
          "kind": "enum value",
          "value": "\"RevToggleKey\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Rewind": {
          "kind": "enum value",
          "value": "\"Rewind\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Ribbon": {
          "kind": "enum value",
          "value": "\"Ribbon\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RibbonSolid": {
          "kind": "enum value",
          "value": "\"RibbonSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RightDoubleQuote": {
          "kind": "enum value",
          "value": "\"RightDoubleQuote\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RightTriangle": {
          "kind": "enum value",
          "value": "\"RightTriangle\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Ringer": {
          "kind": "enum value",
          "value": "\"Ringer\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RingerOff": {
          "kind": "enum value",
          "value": "\"RingerOff\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RingerRemove": {
          "kind": "enum value",
          "value": "\"RingerRemove\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Robot": {
          "kind": "enum value",
          "value": "\"Robot\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Rocket": {
          "kind": "enum value",
          "value": "\"Rocket\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Room": {
          "kind": "enum value",
          "value": "\"Room\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Rotate": {
          "kind": "enum value",
          "value": "\"Rotate\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RowsChild": {
          "kind": "enum value",
          "value": "\"RowsChild\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "RowsGroup": {
          "kind": "enum value",
          "value": "\"RowsGroup\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Rugby": {
          "kind": "enum value",
          "value": "\"Rugby\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Running": {
          "kind": "enum value",
          "value": "\"Running\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Sad": {
          "kind": "enum value",
          "value": "\"Sad\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SadSolid": {
          "kind": "enum value",
          "value": "\"SadSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Save": {
          "kind": "enum value",
          "value": "\"Save\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SaveAll": {
          "kind": "enum value",
          "value": "\"SaveAll\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SaveAndClose": {
          "kind": "enum value",
          "value": "\"SaveAndClose\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SaveAs": {
          "kind": "enum value",
          "value": "\"SaveAs\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SaveTemplate": {
          "kind": "enum value",
          "value": "\"SaveTemplate\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Savings": {
          "kind": "enum value",
          "value": "\"Savings\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ScaleUp": {
          "kind": "enum value",
          "value": "\"ScaleUp\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ScheduleEventAction": {
          "kind": "enum value",
          "value": "\"ScheduleEventAction\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ScopeTemplate": {
          "kind": "enum value",
          "value": "\"ScopeTemplate\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Script": {
          "kind": "enum value",
          "value": "\"Script\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ScrollUpDown": {
          "kind": "enum value",
          "value": "\"ScrollUpDown\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Search": {
          "kind": "enum value",
          "value": "\"Search\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SearchAndApps": {
          "kind": "enum value",
          "value": "\"SearchAndApps\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SearchBookmark": {
          "kind": "enum value",
          "value": "\"SearchBookmark\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SearchCalendar": {
          "kind": "enum value",
          "value": "\"SearchCalendar\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SearchIssue": {
          "kind": "enum value",
          "value": "\"SearchIssue\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SearchIssueMirrored": {
          "kind": "enum value",
          "value": "\"SearchIssueMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Section": {
          "kind": "enum value",
          "value": "\"Section\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Sections": {
          "kind": "enum value",
          "value": "\"Sections\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SecurityGroup": {
          "kind": "enum value",
          "value": "\"SecurityGroup\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SelectAll": {
          "kind": "enum value",
          "value": "\"SelectAll\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Sell": {
          "kind": "enum value",
          "value": "\"Sell\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SemiboldWeight": {
          "kind": "enum value",
          "value": "\"SemiboldWeight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Send": {
          "kind": "enum value",
          "value": "\"Send\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SendMirrored": {
          "kind": "enum value",
          "value": "\"SendMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Separator": {
          "kind": "enum value",
          "value": "\"Separator\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Server": {
          "kind": "enum value",
          "value": "\"Server\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ServerEnviroment": {
          "kind": "enum value",
          "value": "\"ServerEnviroment\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ServerProcesses": {
          "kind": "enum value",
          "value": "\"ServerProcesses\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SetAction": {
          "kind": "enum value",
          "value": "\"SetAction\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Settings": {
          "kind": "enum value",
          "value": "\"Settings\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Share": {
          "kind": "enum value",
          "value": "\"Share\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ShareiOS": {
          "kind": "enum value",
          "value": "\"ShareiOS\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SharepointLogo": {
          "kind": "enum value",
          "value": "\"SharepointLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SharepointLogoFill": {
          "kind": "enum value",
          "value": "\"SharepointLogoFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SharepointLogoInverse": {
          "kind": "enum value",
          "value": "\"SharepointLogoInverse\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Shield": {
          "kind": "enum value",
          "value": "\"Shield\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ShieldSolid": {
          "kind": "enum value",
          "value": "\"ShieldSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Shop": {
          "kind": "enum value",
          "value": "\"Shop\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ShoppingCart": {
          "kind": "enum value",
          "value": "\"ShoppingCart\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ShoppingCartSolid": {
          "kind": "enum value",
          "value": "\"ShoppingCartSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ShopServer": {
          "kind": "enum value",
          "value": "\"ShopServer\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ShowResults": {
          "kind": "enum value",
          "value": "\"ShowResults\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ShowResultsMirrored": {
          "kind": "enum value",
          "value": "\"ShowResultsMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SidePanel": {
          "kind": "enum value",
          "value": "\"SidePanel\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SidePanelMirrored": {
          "kind": "enum value",
          "value": "\"SidePanelMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SignOut": {
          "kind": "enum value",
          "value": "\"SignOut\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SingleBookmark": {
          "kind": "enum value",
          "value": "\"SingleBookmark\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SingleBookmarkSolid": {
          "kind": "enum value",
          "value": "\"SingleBookmarkSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SingleColumn": {
          "kind": "enum value",
          "value": "\"SingleColumn\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SingleColumnEdit": {
          "kind": "enum value",
          "value": "\"SingleColumnEdit\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SIPMove": {
          "kind": "enum value",
          "value": "\"SIPMove\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SiteScan": {
          "kind": "enum value",
          "value": "\"SiteScan\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SixPointStar": {
          "kind": "enum value",
          "value": "\"SixPointStar\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SizeLegacy": {
          "kind": "enum value",
          "value": "\"SizeLegacy\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SkiResorts": {
          "kind": "enum value",
          "value": "\"SkiResorts\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SkypeCheck": {
          "kind": "enum value",
          "value": "\"SkypeCheck\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SkypeCircleCheck": {
          "kind": "enum value",
          "value": "\"SkypeCircleCheck\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SkypeCircleClock": {
          "kind": "enum value",
          "value": "\"SkypeCircleClock\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SkypeCircleMinus": {
          "kind": "enum value",
          "value": "\"SkypeCircleMinus\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SkypeClock": {
          "kind": "enum value",
          "value": "\"SkypeClock\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SkypeForBusinessLogo": {
          "kind": "enum value",
          "value": "\"SkypeForBusinessLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SkypeForBusinessLogo16": {
          "kind": "enum value",
          "value": "\"SkypeForBusinessLogo16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SkypeForBusinessLogoFill": {
          "kind": "enum value",
          "value": "\"SkypeForBusinessLogoFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SkypeForBusinessLogoFill16": {
          "kind": "enum value",
          "value": "\"SkypeForBusinessLogoFill16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SkypeLogo": {
          "kind": "enum value",
          "value": "\"SkypeLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SkypeLogo16": {
          "kind": "enum value",
          "value": "\"SkypeLogo16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SkypeMessage": {
          "kind": "enum value",
          "value": "\"SkypeMessage\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SkypeMinus": {
          "kind": "enum value",
          "value": "\"SkypeMinus\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Slider": {
          "kind": "enum value",
          "value": "\"Slider\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SliderHandleSize": {
          "kind": "enum value",
          "value": "\"SliderHandleSize\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SliderThumb": {
          "kind": "enum value",
          "value": "\"SliderThumb\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Snooze": {
          "kind": "enum value",
          "value": "\"Snooze\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Snow": {
          "kind": "enum value",
          "value": "\"Snow\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Snowflake": {
          "kind": "enum value",
          "value": "\"Snowflake\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SnowShowerDay": {
          "kind": "enum value",
          "value": "\"SnowShowerDay\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SnowShowerNight": {
          "kind": "enum value",
          "value": "\"SnowShowerNight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Soccer": {
          "kind": "enum value",
          "value": "\"Soccer\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SocialListeningLogo": {
          "kind": "enum value",
          "value": "\"SocialListeningLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Sort": {
          "kind": "enum value",
          "value": "\"Sort\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SortDown": {
          "kind": "enum value",
          "value": "\"SortDown\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SortLines": {
          "kind": "enum value",
          "value": "\"SortLines\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SortUp": {
          "kind": "enum value",
          "value": "\"SortUp\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Source": {
          "kind": "enum value",
          "value": "\"Source\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Spacer": {
          "kind": "enum value",
          "value": "\"Spacer\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Speakers": {
          "kind": "enum value",
          "value": "\"Speakers\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SpeedHigh": {
          "kind": "enum value",
          "value": "\"SpeedHigh\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Split": {
          "kind": "enum value",
          "value": "\"Split\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SplitObject": {
          "kind": "enum value",
          "value": "\"SplitObject\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Sprint": {
          "kind": "enum value",
          "value": "\"Sprint\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Squalls": {
          "kind": "enum value",
          "value": "\"Squalls\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SquareShapeSolid": {
          "kind": "enum value",
          "value": "\"SquareShapeSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Stack": {
          "kind": "enum value",
          "value": "\"Stack\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StackedBarChart": {
          "kind": "enum value",
          "value": "\"StackedBarChart\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StackedLineChart": {
          "kind": "enum value",
          "value": "\"StackedLineChart\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StackIndicator": {
          "kind": "enum value",
          "value": "\"StackIndicator\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StaffNotebookLogo16": {
          "kind": "enum value",
          "value": "\"StaffNotebookLogo16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StaffNotebookLogo32": {
          "kind": "enum value",
          "value": "\"StaffNotebookLogo32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StaffNotebookLogoFill16": {
          "kind": "enum value",
          "value": "\"StaffNotebookLogoFill16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StaffNotebookLogoFill32": {
          "kind": "enum value",
          "value": "\"StaffNotebookLogoFill32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StaffNotebookLogoInverted16": {
          "kind": "enum value",
          "value": "\"StaffNotebookLogoInverted16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StaffNotebookLogoInverted32": {
          "kind": "enum value",
          "value": "\"StaffNotebookLogoInverted32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Starburst": {
          "kind": "enum value",
          "value": "\"Starburst\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StarburstSolid": {
          "kind": "enum value",
          "value": "\"StarburstSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StatusCircleBlock2": {
          "kind": "enum value",
          "value": "\"StatusCircleBlock2\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StatusCircleCheckmark": {
          "kind": "enum value",
          "value": "\"StatusCircleCheckmark\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StatusCircleErrorX": {
          "kind": "enum value",
          "value": "\"StatusCircleErrorX\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StatusCircleExclamation": {
          "kind": "enum value",
          "value": "\"StatusCircleExclamation\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StatusCircleInfo": {
          "kind": "enum value",
          "value": "\"StatusCircleInfo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StatusCircleInner": {
          "kind": "enum value",
          "value": "\"StatusCircleInner\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StatusCircleOuter": {
          "kind": "enum value",
          "value": "\"StatusCircleOuter\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StatusCircleQuestionMark": {
          "kind": "enum value",
          "value": "\"StatusCircleQuestionMark\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StatusCircleRing": {
          "kind": "enum value",
          "value": "\"StatusCircleRing\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StatusErrorFull": {
          "kind": "enum value",
          "value": "\"StatusErrorFull\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StatusTriangle": {
          "kind": "enum value",
          "value": "\"StatusTriangle\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StatusTriangleExclamation": {
          "kind": "enum value",
          "value": "\"StatusTriangleExclamation\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StatusTriangleInner": {
          "kind": "enum value",
          "value": "\"StatusTriangleInner\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StatusTriangleOuter": {
          "kind": "enum value",
          "value": "\"StatusTriangleOuter\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Step": {
          "kind": "enum value",
          "value": "\"Step\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StepInsert": {
          "kind": "enum value",
          "value": "\"StepInsert\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StepShared": {
          "kind": "enum value",
          "value": "\"StepShared\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StepSharedAdd": {
          "kind": "enum value",
          "value": "\"StepSharedAdd\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StepSharedInsert": {
          "kind": "enum value",
          "value": "\"StepSharedInsert\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StockDown": {
          "kind": "enum value",
          "value": "\"StockDown\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StockUp": {
          "kind": "enum value",
          "value": "\"StockUp\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Stop": {
          "kind": "enum value",
          "value": "\"Stop\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StopSolid": {
          "kind": "enum value",
          "value": "\"StopSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Stopwatch": {
          "kind": "enum value",
          "value": "\"Stopwatch\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StoreLogo16": {
          "kind": "enum value",
          "value": "\"StoreLogo16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StoreLogoMed20": {
          "kind": "enum value",
          "value": "\"StoreLogoMed20\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Storyboard": {
          "kind": "enum value",
          "value": "\"Storyboard\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Streaming": {
          "kind": "enum value",
          "value": "\"Streaming\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StreamingOff": {
          "kind": "enum value",
          "value": "\"StreamingOff\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "StreamLogo": {
          "kind": "enum value",
          "value": "\"StreamLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Strikethrough": {
          "kind": "enum value",
          "value": "\"Strikethrough\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Subscribe": {
          "kind": "enum value",
          "value": "\"Subscribe\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Subscript": {
          "kind": "enum value",
          "value": "\"Subscript\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SubstitutionsIn": {
          "kind": "enum value",
          "value": "\"SubstitutionsIn\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Suitcase": {
          "kind": "enum value",
          "value": "\"Suitcase\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SunAdd": {
          "kind": "enum value",
          "value": "\"SunAdd\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Sunny": {
          "kind": "enum value",
          "value": "\"Sunny\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SunQuestionMark": {
          "kind": "enum value",
          "value": "\"SunQuestionMark\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Superscript": {
          "kind": "enum value",
          "value": "\"Superscript\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SurveyQuestions": {
          "kind": "enum value",
          "value": "\"SurveyQuestions\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SwayLogo16": {
          "kind": "enum value",
          "value": "\"SwayLogo16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SwayLogo32": {
          "kind": "enum value",
          "value": "\"SwayLogo32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SwayLogoFill16": {
          "kind": "enum value",
          "value": "\"SwayLogoFill16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SwayLogoFill32": {
          "kind": "enum value",
          "value": "\"SwayLogoFill32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SwayLogoInverse": {
          "kind": "enum value",
          "value": "\"SwayLogoInverse\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Switch": {
          "kind": "enum value",
          "value": "\"Switch\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SwitcherStartEnd": {
          "kind": "enum value",
          "value": "\"SwitcherStartEnd\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Sync": {
          "kind": "enum value",
          "value": "\"Sync\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SyncFolder": {
          "kind": "enum value",
          "value": "\"SyncFolder\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SyncOccurence": {
          "kind": "enum value",
          "value": "\"SyncOccurence\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "SyncToPC": {
          "kind": "enum value",
          "value": "\"SyncToPC\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "System": {
          "kind": "enum value",
          "value": "\"System\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Tab": {
          "kind": "enum value",
          "value": "\"Tab\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Table": {
          "kind": "enum value",
          "value": "\"Table\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TableGroup": {
          "kind": "enum value",
          "value": "\"TableGroup\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Tablet": {
          "kind": "enum value",
          "value": "\"Tablet\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TabletMode": {
          "kind": "enum value",
          "value": "\"TabletMode\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TabletSelected": {
          "kind": "enum value",
          "value": "\"TabletSelected\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Tag": {
          "kind": "enum value",
          "value": "\"Tag\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TagSolid": {
          "kind": "enum value",
          "value": "\"TagSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TagUnknown": {
          "kind": "enum value",
          "value": "\"TagUnknown\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TagUnknown12": {
          "kind": "enum value",
          "value": "\"TagUnknown12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TagUnknown12Mirror": {
          "kind": "enum value",
          "value": "\"TagUnknown12Mirror\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TagUnknownMirror": {
          "kind": "enum value",
          "value": "\"TagUnknownMirror\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Taskboard": {
          "kind": "enum value",
          "value": "\"Taskboard\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TaskGroup": {
          "kind": "enum value",
          "value": "\"TaskGroup\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TaskGroupMirrored": {
          "kind": "enum value",
          "value": "\"TaskGroupMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TaskLogo": {
          "kind": "enum value",
          "value": "\"TaskLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TaskManager": {
          "kind": "enum value",
          "value": "\"TaskManager\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TaskManagerMirrored": {
          "kind": "enum value",
          "value": "\"TaskManagerMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TaskSolid": {
          "kind": "enum value",
          "value": "\"TaskSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Taxi": {
          "kind": "enum value",
          "value": "\"Taxi\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TeamFavorite": {
          "kind": "enum value",
          "value": "\"TeamFavorite\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TeamsLogo": {
          "kind": "enum value",
          "value": "\"TeamsLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TeamsLogo16": {
          "kind": "enum value",
          "value": "\"TeamsLogo16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TeamsLogoFill": {
          "kind": "enum value",
          "value": "\"TeamsLogoFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TeamsLogoFill16": {
          "kind": "enum value",
          "value": "\"TeamsLogoFill16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TeamsLogoInverse": {
          "kind": "enum value",
          "value": "\"TeamsLogoInverse\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Teamwork": {
          "kind": "enum value",
          "value": "\"Teamwork\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Teeth": {
          "kind": "enum value",
          "value": "\"Teeth\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TemporaryUser": {
          "kind": "enum value",
          "value": "\"TemporaryUser\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Tennis": {
          "kind": "enum value",
          "value": "\"Tennis\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TestAutoSolid": {
          "kind": "enum value",
          "value": "\"TestAutoSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TestBeaker": {
          "kind": "enum value",
          "value": "\"TestBeaker\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TestBeakerSolid": {
          "kind": "enum value",
          "value": "\"TestBeakerSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TestCase": {
          "kind": "enum value",
          "value": "\"TestCase\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TestExploreSolid": {
          "kind": "enum value",
          "value": "\"TestExploreSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TestImpactSolid": {
          "kind": "enum value",
          "value": "\"TestImpactSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TestParameter": {
          "kind": "enum value",
          "value": "\"TestParameter\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TestPlan": {
          "kind": "enum value",
          "value": "\"TestPlan\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TestStep": {
          "kind": "enum value",
          "value": "\"TestStep\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TestSuite": {
          "kind": "enum value",
          "value": "\"TestSuite\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TestUserSolid": {
          "kind": "enum value",
          "value": "\"TestUserSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TextBox": {
          "kind": "enum value",
          "value": "\"TextBox\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TextCallout": {
          "kind": "enum value",
          "value": "\"TextCallout\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TextDocument": {
          "kind": "enum value",
          "value": "\"TextDocument\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TextDocumentShared": {
          "kind": "enum value",
          "value": "\"TextDocumentShared\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TextField": {
          "kind": "enum value",
          "value": "\"TextField\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TextOverflow": {
          "kind": "enum value",
          "value": "\"TextOverflow\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TFVCLogo": {
          "kind": "enum value",
          "value": "\"TFVCLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ThisPC": {
          "kind": "enum value",
          "value": "\"ThisPC\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ThreeQuarterCircle": {
          "kind": "enum value",
          "value": "\"ThreeQuarterCircle\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ThumbnailView": {
          "kind": "enum value",
          "value": "\"ThumbnailView\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ThumbnailViewMirrored": {
          "kind": "enum value",
          "value": "\"ThumbnailViewMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Thunderstorms": {
          "kind": "enum value",
          "value": "\"Thunderstorms\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Ticket": {
          "kind": "enum value",
          "value": "\"Ticket\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Tiles": {
          "kind": "enum value",
          "value": "\"Tiles\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Tiles2": {
          "kind": "enum value",
          "value": "\"Tiles2\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TimeEntry": {
          "kind": "enum value",
          "value": "\"TimeEntry\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Timeline": {
          "kind": "enum value",
          "value": "\"Timeline\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TimelineDelivery": {
          "kind": "enum value",
          "value": "\"TimelineDelivery\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TimelineMatrixView": {
          "kind": "enum value",
          "value": "\"TimelineMatrixView\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TimelineProgress": {
          "kind": "enum value",
          "value": "\"TimelineProgress\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Timer": {
          "kind": "enum value",
          "value": "\"Timer\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TimeSheet": {
          "kind": "enum value",
          "value": "\"TimeSheet\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ToDoLogoBottom": {
          "kind": "enum value",
          "value": "\"ToDoLogoBottom\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ToDoLogoInverse": {
          "kind": "enum value",
          "value": "\"ToDoLogoInverse\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ToDoLogoTop": {
          "kind": "enum value",
          "value": "\"ToDoLogoTop\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ToggleBorder": {
          "kind": "enum value",
          "value": "\"ToggleBorder\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ToggleFilled": {
          "kind": "enum value",
          "value": "\"ToggleFilled\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ToggleOff": {
          "kind": "enum value",
          "value": "\"ToggleOff\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ToggleOn": {
          "kind": "enum value",
          "value": "\"ToggleOn\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ToggleThumb": {
          "kind": "enum value",
          "value": "\"ToggleThumb\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Toll": {
          "kind": "enum value",
          "value": "\"Toll\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Touch": {
          "kind": "enum value",
          "value": "\"Touch\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TouchPointer": {
          "kind": "enum value",
          "value": "\"TouchPointer\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Trackers": {
          "kind": "enum value",
          "value": "\"Trackers\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TrackersMirrored": {
          "kind": "enum value",
          "value": "\"TrackersMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Train": {
          "kind": "enum value",
          "value": "\"Train\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TrainSolid": {
          "kind": "enum value",
          "value": "\"TrainSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TransferCall": {
          "kind": "enum value",
          "value": "\"TransferCall\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Transition": {
          "kind": "enum value",
          "value": "\"Transition\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TransitionEffect": {
          "kind": "enum value",
          "value": "\"TransitionEffect\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TransitionPop": {
          "kind": "enum value",
          "value": "\"TransitionPop\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TransitionPush": {
          "kind": "enum value",
          "value": "\"TransitionPush\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Trending12": {
          "kind": "enum value",
          "value": "\"Trending12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TriangleDown12": {
          "kind": "enum value",
          "value": "\"TriangleDown12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TriangleLeft12": {
          "kind": "enum value",
          "value": "\"TriangleLeft12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TriangleRight12": {
          "kind": "enum value",
          "value": "\"TriangleRight12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TriangleShapeSolid": {
          "kind": "enum value",
          "value": "\"TriangleShapeSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TriangleSolid": {
          "kind": "enum value",
          "value": "\"TriangleSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TriangleSolidDown12": {
          "kind": "enum value",
          "value": "\"TriangleSolidDown12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TriangleSolidLeft12": {
          "kind": "enum value",
          "value": "\"TriangleSolidLeft12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TriangleSolidRight12": {
          "kind": "enum value",
          "value": "\"TriangleSolidRight12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TriangleSolidUp12": {
          "kind": "enum value",
          "value": "\"TriangleSolidUp12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TriangleUp12": {
          "kind": "enum value",
          "value": "\"TriangleUp12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TriggerApproval": {
          "kind": "enum value",
          "value": "\"TriggerApproval\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TriggerAuto": {
          "kind": "enum value",
          "value": "\"TriggerAuto\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TriggerUser": {
          "kind": "enum value",
          "value": "\"TriggerUser\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TripleColumn": {
          "kind": "enum value",
          "value": "\"TripleColumn\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TripleColumnEdit": {
          "kind": "enum value",
          "value": "\"TripleColumnEdit\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Trophy": {
          "kind": "enum value",
          "value": "\"Trophy\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Trophy2": {
          "kind": "enum value",
          "value": "\"Trophy2\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Trophy2Solid": {
          "kind": "enum value",
          "value": "\"Trophy2Solid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TurnRight": {
          "kind": "enum value",
          "value": "\"TurnRight\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TVMonitor": {
          "kind": "enum value",
          "value": "\"TVMonitor\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TVMonitorSelected": {
          "kind": "enum value",
          "value": "\"TVMonitorSelected\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TwelvePointStar": {
          "kind": "enum value",
          "value": "\"TwelvePointStar\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "TypeScriptLanguage": {
          "kind": "enum value",
          "value": "\"TypeScriptLanguage\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Umbrella": {
          "kind": "enum value",
          "value": "\"Umbrella\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Underline": {
          "kind": "enum value",
          "value": "\"Underline\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Undo": {
          "kind": "enum value",
          "value": "\"Undo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Uneditable": {
          "kind": "enum value",
          "value": "\"Uneditable\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "UneditableMirrored": {
          "kind": "enum value",
          "value": "\"UneditableMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "UneditableSolid12": {
          "kind": "enum value",
          "value": "\"UneditableSolid12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "UneditableSolidMirrored12": {
          "kind": "enum value",
          "value": "\"UneditableSolidMirrored12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Unfavorite": {
          "kind": "enum value",
          "value": "\"Unfavorite\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "UngroupObject": {
          "kind": "enum value",
          "value": "\"UngroupObject\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Unknown": {
          "kind": "enum value",
          "value": "\"Unknown\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "UnknownCall": {
          "kind": "enum value",
          "value": "\"UnknownCall\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "UnknownMirrored": {
          "kind": "enum value",
          "value": "\"UnknownMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "UnknownMirroredSolid": {
          "kind": "enum value",
          "value": "\"UnknownMirroredSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "UnknownSolid": {
          "kind": "enum value",
          "value": "\"UnknownSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Unlock": {
          "kind": "enum value",
          "value": "\"Unlock\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "UnlockSolid": {
          "kind": "enum value",
          "value": "\"UnlockSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Unpin": {
          "kind": "enum value",
          "value": "\"Unpin\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "UnSetColor": {
          "kind": "enum value",
          "value": "\"UnSetColor\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Unsubscribe": {
          "kind": "enum value",
          "value": "\"Unsubscribe\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "UnsyncFolder": {
          "kind": "enum value",
          "value": "\"UnsyncFolder\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "UnsyncOccurence": {
          "kind": "enum value",
          "value": "\"UnsyncOccurence\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Up": {
          "kind": "enum value",
          "value": "\"Up\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Upload": {
          "kind": "enum value",
          "value": "\"Upload\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "UserEvent": {
          "kind": "enum value",
          "value": "\"UserEvent\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "UserFollowed": {
          "kind": "enum value",
          "value": "\"UserFollowed\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "UserGauge": {
          "kind": "enum value",
          "value": "\"UserGauge\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "UserPause": {
          "kind": "enum value",
          "value": "\"UserPause\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "UserRemove": {
          "kind": "enum value",
          "value": "\"UserRemove\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "UserSync": {
          "kind": "enum value",
          "value": "\"UserSync\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Vacation": {
          "kind": "enum value",
          "value": "\"Vacation\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Variable": {
          "kind": "enum value",
          "value": "\"Variable\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VariableGroup": {
          "kind": "enum value",
          "value": "\"VariableGroup\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VB": {
          "kind": "enum value",
          "value": "\"VB\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VennDiagram": {
          "kind": "enum value",
          "value": "\"VennDiagram\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VersionControlPush": {
          "kind": "enum value",
          "value": "\"VersionControlPush\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VerticalDistributeCenter": {
          "kind": "enum value",
          "value": "\"VerticalDistributeCenter\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Video": {
          "kind": "enum value",
          "value": "\"Video\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VideoOff": {
          "kind": "enum value",
          "value": "\"VideoOff\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VideoSearch": {
          "kind": "enum value",
          "value": "\"VideoSearch\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VideoSolid": {
          "kind": "enum value",
          "value": "\"VideoSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "View": {
          "kind": "enum value",
          "value": "\"View\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ViewAll": {
          "kind": "enum value",
          "value": "\"ViewAll\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ViewAll2": {
          "kind": "enum value",
          "value": "\"ViewAll2\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ViewDashboard": {
          "kind": "enum value",
          "value": "\"ViewDashboard\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ViewList": {
          "kind": "enum value",
          "value": "\"ViewList\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ViewListGroup": {
          "kind": "enum value",
          "value": "\"ViewListGroup\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ViewListTree": {
          "kind": "enum value",
          "value": "\"ViewListTree\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VisioDiagram": {
          "kind": "enum value",
          "value": "\"VisioDiagram\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VisioDocument": {
          "kind": "enum value",
          "value": "\"VisioDocument\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VisioLogo": {
          "kind": "enum value",
          "value": "\"VisioLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VisioLogo16": {
          "kind": "enum value",
          "value": "\"VisioLogo16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VisioLogoFill": {
          "kind": "enum value",
          "value": "\"VisioLogoFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VisioLogoFill16": {
          "kind": "enum value",
          "value": "\"VisioLogoFill16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VisioLogoInverse": {
          "kind": "enum value",
          "value": "\"VisioLogoInverse\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VisioLogoInverse16": {
          "kind": "enum value",
          "value": "\"VisioLogoInverse16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VisualBasicLanguage": {
          "kind": "enum value",
          "value": "\"VisualBasicLanguage\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VisualsFolder": {
          "kind": "enum value",
          "value": "\"VisualsFolder\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VisualsStore": {
          "kind": "enum value",
          "value": "\"VisualsStore\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VisualStudioIDELogo32": {
          "kind": "enum value",
          "value": "\"VisualStudioIDELogo32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VisualStudioLogo": {
          "kind": "enum value",
          "value": "\"VisualStudioLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VoicemailForward": {
          "kind": "enum value",
          "value": "\"VoicemailForward\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VoicemailIRM": {
          "kind": "enum value",
          "value": "\"VoicemailIRM\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VoicemailReply": {
          "kind": "enum value",
          "value": "\"VoicemailReply\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Volume0": {
          "kind": "enum value",
          "value": "\"Volume0\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Volume1": {
          "kind": "enum value",
          "value": "\"Volume1\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Volume2": {
          "kind": "enum value",
          "value": "\"Volume2\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Volume3": {
          "kind": "enum value",
          "value": "\"Volume3\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VolumeDisabled": {
          "kind": "enum value",
          "value": "\"VolumeDisabled\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VSTSAltLogo1": {
          "kind": "enum value",
          "value": "\"VSTSAltLogo1\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VSTSAltLogo2": {
          "kind": "enum value",
          "value": "\"VSTSAltLogo2\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "VSTSLogo": {
          "kind": "enum value",
          "value": "\"VSTSLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Waffle": {
          "kind": "enum value",
          "value": "\"Waffle\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WaffleOffice365": {
          "kind": "enum value",
          "value": "\"WaffleOffice365\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WaitlistConfirm": {
          "kind": "enum value",
          "value": "\"WaitlistConfirm\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WaitlistConfirmMirrored": {
          "kind": "enum value",
          "value": "\"WaitlistConfirmMirrored\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Warning": {
          "kind": "enum value",
          "value": "\"Warning\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Warning12": {
          "kind": "enum value",
          "value": "\"Warning12\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WebPublish": {
          "kind": "enum value",
          "value": "\"WebPublish\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Website": {
          "kind": "enum value",
          "value": "\"Website\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Weights": {
          "kind": "enum value",
          "value": "\"Weights\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WhiteBoardApp16": {
          "kind": "enum value",
          "value": "\"WhiteBoardApp16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WhiteBoardApp32": {
          "kind": "enum value",
          "value": "\"WhiteBoardApp32\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WifiEthernet": {
          "kind": "enum value",
          "value": "\"WifiEthernet\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WindDirection": {
          "kind": "enum value",
          "value": "\"WindDirection\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WindowEdit": {
          "kind": "enum value",
          "value": "\"WindowEdit\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WindowsLogo": {
          "kind": "enum value",
          "value": "\"WindowsLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Wines": {
          "kind": "enum value",
          "value": "\"Wines\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WipePhone": {
          "kind": "enum value",
          "value": "\"WipePhone\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WordDocument": {
          "kind": "enum value",
          "value": "\"WordDocument\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WordLogo": {
          "kind": "enum value",
          "value": "\"WordLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WordLogo16": {
          "kind": "enum value",
          "value": "\"WordLogo16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WordLogoFill": {
          "kind": "enum value",
          "value": "\"WordLogoFill\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WordLogoFill16": {
          "kind": "enum value",
          "value": "\"WordLogoFill16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WordLogoInverse": {
          "kind": "enum value",
          "value": "\"WordLogoInverse\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WordLogoInverse16": {
          "kind": "enum value",
          "value": "\"WordLogoInverse16\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Work": {
          "kind": "enum value",
          "value": "\"Work\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WorkFlow": {
          "kind": "enum value",
          "value": "\"WorkFlow\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WorkforceManagement": {
          "kind": "enum value",
          "value": "\"WorkforceManagement\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WorkItem": {
          "kind": "enum value",
          "value": "\"WorkItem\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WorkItemBar": {
          "kind": "enum value",
          "value": "\"WorkItemBar\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WorkItemBarSolid": {
          "kind": "enum value",
          "value": "\"WorkItemBarSolid\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WorkItemBug": {
          "kind": "enum value",
          "value": "\"WorkItemBug\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "World": {
          "kind": "enum value",
          "value": "\"World\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "WorldClock": {
          "kind": "enum value",
          "value": "\"WorldClock\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "YammerLogo": {
          "kind": "enum value",
          "value": "\"YammerLogo\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ZipFolder": {
          "kind": "enum value",
          "value": "\"ZipFolder\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Zoom": {
          "kind": "enum value",
          "value": "\"Zoom\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ZoomIn": {
          "kind": "enum value",
          "value": "\"ZoomIn\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ZoomOut": {
          "kind": "enum value",
          "value": "\"ZoomOut\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "IContextualMenu": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IContextualMenuItem": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__index": {
          "kind": "method",
          "signature": "[propertyName: string]: any;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "any",
            "description": []
          },
          "parameters": {
            "propertyName": {
              "name": "propertyName",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Any additional properties to use when custom rendering menu items."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional accessibility label (aria-label) attribute that will be stamped on to the element. If none is specified, the aria-label attribute will contain the item name"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "canCheck": {
          "kind": "property",
          "signature": "canCheck?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not this menu item can be checked"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "checked": {
          "kind": "property",
          "signature": "checked?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not this menu item is currently checked."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional css class to apply to the menu item"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IContextualMenuRenderItem>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IContextualMenuRenderItem>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IContextualMenuRenderItem interface. This will get passed down to ContextualMenuItem."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "customOnRenderListLength": {
          "kind": "property",
          "signature": "customOnRenderListLength?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "When rendering a custom component that is passed in, the component might also be a list of elements. We want to keep track of the correct index our menu is using based off of the length of the custom list. It is up to the user to increment the count for their list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "data": {
          "kind": "property",
          "signature": "data?: any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Any custom data the developer wishes to associate with the menu item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the menu item is disabled"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getItemClassNames": {
          "kind": "property",
          "signature": "getItemClassNames?: (theme: ITheme, disabled: boolean, expanded: boolean, checked: boolean, isAnchorLink: boolean, knownIcon: boolean, itemClassName?: string, dividerClassName?: string, iconClassName?: string, subMenuClassName?: string, primaryDisabled?: boolean) => IMenuItemClassNames;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(theme: ITheme, disabled: boolean, expanded: boolean, checked: boolean, isAnchorLink: boolean, knownIcon: boolean, itemClassName?: string, dividerClassName?: string, iconClassName?: string, subMenuClassName?: string, primaryDisabled?: boolean) => IMenuItemClassNames",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "styles",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " prop of "
            },
            {
              "kind": "code",
              "text": "IContextualMenuItemProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " to leverage mergeStyles API."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Method to provide the classnames to style the individual items inside a menu. Deprecated, use "
            },
            {
              "kind": "code",
              "text": "styles",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " prop of "
            },
            {
              "kind": "code",
              "text": "IContextualMenuItemProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " to leverage mergeStyles API."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getSplitButtonVerticalDividerClassNames": {
          "kind": "property",
          "signature": "getSplitButtonVerticalDividerClassNames?: (theme: ITheme) => IVerticalDividerClassNames;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(theme: ITheme) => IVerticalDividerClassNames",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Method to provide the classnames to style the Vertical Divider of a split button inside a menu. Default value is the getVerticalDividerClassnames func defined in ContextualMenu.classnames"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "href": {
          "kind": "property",
          "signature": "href?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An optional URL to navigate to upon selection"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconProps": {
          "kind": "property",
          "signature": "iconProps?: IIconProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IIconProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Props that go to the IconComponent"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inactive": {
          "kind": "property",
          "signature": "inactive?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "in 6.38.2 will be removed in 7.0.0"
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "This prop is no longer used. All contextual menu items are now focusable when disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "itemProps": {
          "kind": "property",
          "signature": "itemProps?: Partial<IContextualMenuItemProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Partial<IContextualMenuItemProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional IContextualMenuItemProps overrides to customize behaviors such as item styling via "
            },
            {
              "kind": "code",
              "text": "styles",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "itemType": {
          "kind": "property",
          "signature": "itemType?: ContextualMenuItemType;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ContextualMenuItemType",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "key": {
          "kind": "property",
          "signature": "key: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Unique id to identify the item"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "keytipProps": {
          "kind": "property",
          "signature": "keytipProps?: IKeytipProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IKeytipProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Keytip for this contextual menu item"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "name": {
          "kind": "property",
          "signature": "name?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "text",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Text description for the menu item to display Deprecated, use "
            },
            {
              "kind": "code",
              "text": "text",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onClick": {
          "kind": "property",
          "signature": "onClick?: (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, item?: IContextualMenuItem) => boolean | void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, item?: IContextualMenuItem) => boolean | void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback issued when the menu item is invoked. If ev.preventDefault() is called in onClick, click will not close menu. Returning true will dismiss the menu even if ev.preventDefault() was called."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onMouseDown": {
          "kind": "property",
          "signature": "onMouseDown?: (item: IContextualMenuItem, event: any) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: IContextualMenuItem, event: any) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A function to be executed onMouseDown. This is executed before an onClick event and can be used to interrupt native on click events as well. The click event should still handle the commands. This should only be used in special cases when react and non-react are mixed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRender": {
          "kind": "property",
          "signature": "onRender?: (item: any, dismissMenu: (ev?: any, dismissAll?: boolean) => void) => React.ReactNode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: any, dismissMenu: (ev?: any, dismissAll?: boolean) => void) => React.ReactNode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Method to custom render this menu item. For keyboard accessibility, the top-level rendered item should be a focusable element (like an anchor or a button) or have the "
            },
            {
              "kind": "code",
              "text": "data-is-focusable",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " property set to true."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "The function receives a function that can be called to dismiss the menu as a second argument. This can be used to make sure that a custom menu item click dismisses the menu."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderIcon": {
          "kind": "property",
          "signature": "onRenderIcon?: IRenderFunction<IContextualMenuItemProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IContextualMenuItemProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom render function for the menu item icon"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryDisabled": {
          "kind": "property",
          "signature": "primaryDisabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If the menu item is a split button, this prop disables purely the primary action of the button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rel": {
          "kind": "property",
          "signature": "rel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An optional rel when using href. If target is _blank rel is defaulted to a value to prevent clickjacking."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "role": {
          "kind": "property",
          "signature": "role?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional override for the role attribute on the menu button. If one is not provided, it will have a value of menuitem or menuitemcheckbox."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "secondaryText": {
          "kind": "property",
          "signature": "secondaryText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Seconday description for the menu item to display"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "sectionProps": {
          "kind": "property",
          "signature": "sectionProps?: IContextualMenuSection;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IContextualMenuSection",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Properties to apply to render this item as a section. This prop is mutually exclusive with subMenuProps."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shortCut": {
          "kind": "property",
          "signature": "shortCut?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "[TODO] Not Yet Implemented"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "split": {
          "kind": "property",
          "signature": "split?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not this menu item is a splitButton."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "style": {
          "kind": "property",
          "signature": "style?: React.CSSProperties;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.CSSProperties",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "in favor of the "
            },
            {
              "kind": "code",
              "text": "styles",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " prop to leverage mergeStyles API."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Additional styles to apply to the menu item Deprecated, use "
            },
            {
              "kind": "code",
              "text": "styles",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "submenuIconProps": {
          "kind": "property",
          "signature": "submenuIconProps?: IIconProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IIconProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Props that go to the IconComponent used for the chevron."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "subMenuProps": {
          "kind": "property",
          "signature": "subMenuProps?: IContextualMenuProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IContextualMenuProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Properties to apply to a submenu to this item. The ContextualMenu will provide default values for 'target', 'onDismiss', 'isSubMenu', 'id', 'shouldFocusOnMount', 'directionalHint', 'className', and 'gapSpace', all of which can be overridden."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "target": {
          "kind": "property",
          "signature": "target?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An optional target when using href"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "text": {
          "kind": "property",
          "signature": "text?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Text description for the menu item to display"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "title": {
          "kind": "property",
          "signature": "title?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional title for displaying text when hovering over an item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IContextualMenuItemProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional css class to apply to the ContextualMenuItem"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "classNames": {
          "kind": "property",
          "signature": "classNames: IMenuItemClassNames;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IMenuItemClassNames",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Classnames for different aspects of a menu item"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IContextualMenuRenderItem>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IContextualMenuRenderItem>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IContextualMenuRenderItem interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dismissMenu": {
          "kind": "property",
          "signature": "dismissMenu?: (ev?: any, dismissAll?: boolean) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: any, dismissAll?: boolean) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This prop will get set by ContextualMenu and can be called to close the menu this item belongs to. If dismissAll is true, all menus will be closed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dismissSubMenu": {
          "kind": "property",
          "signature": "dismissSubMenu?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This prop will get set by ContextualMenu and can be called to close this item's subMenu, if present."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getSubmenuTarget": {
          "kind": "property",
          "signature": "getSubmenuTarget?: () => HTMLElement | undefined;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => HTMLElement | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This prop will get set by the wrapping component and will return the element that wraps this ContextualMenuItem. Used for openSubMenu."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hasIcons": {
          "kind": "property",
          "signature": "hasIcons: boolean | undefined;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If this item has icons"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "index": {
          "kind": "property",
          "signature": "index: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Index of the item"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "item": {
          "kind": "property",
          "signature": "item: IContextualMenuItem;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IContextualMenuItem",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The item to display"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onCheckmarkClick": {
          "kind": "property",
          "signature": "onCheckmarkClick?: ((item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>) => void);",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "((item: IContextualMenuItem, ev: React.MouseEvent<HTMLElement>) => void)",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Click handler for the checkmark"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "openSubMenu": {
          "kind": "property",
          "signature": "openSubMenu?: (item: any, target: HTMLElement) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: any, target: HTMLElement) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This prop will get set by ContextualMenu and can be called to open this item's subMenu, if present."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IContextualMenuItemStyleProps, IContextualMenuItemStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IContextualMenuItemStyleProps, IContextualMenuItemStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IContextualMenuItemStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "checked": {
          "kind": "property",
          "signature": "checked: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not the menu item is checked."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept custom classNames"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not the menu item is disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dividerClassName": {
          "kind": "property",
          "signature": "dividerClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The optional class name to apply to the divider element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "expanded": {
          "kind": "property",
          "signature": "expanded: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not the menu item is expanded."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconClassName": {
          "kind": "property",
          "signature": "iconClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The optional class name to apply to the icon element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isAnchorLink": {
          "kind": "property",
          "signature": "isAnchorLink: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates if a menu item is an anchor link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "itemClassName": {
          "kind": "property",
          "signature": "itemClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The optional class name to apply to the item element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "knownIcon": {
          "kind": "property",
          "signature": "knownIcon: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates if the icon used is of the known set of icons."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryDisabled": {
          "kind": "property",
          "signature": "primaryDisabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not the primary section of a split menu item is disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "subMenuClassName": {
          "kind": "property",
          "signature": "subMenuClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The optional class name to apply to the sub-menu if present."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IContextualMenuItemStyles": {
      "kind": "interface",
      "extends": "IButtonStyles",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "anchorLink": {
          "kind": "property",
          "signature": "anchorLink: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for a menu item that is an anchor link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "checkmarkIcon": {
          "kind": "property",
          "signature": "checkmarkIcon: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Default style for checkmark icons."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "divider": {
          "kind": "property",
          "signature": "divider: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for a divider item of a ContextualMenu."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "icon": {
          "kind": "property",
          "signature": "icon: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the icon element of a menu item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconColor": {
          "kind": "property",
          "signature": "iconColor: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Default icon color style for known icons."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "item": {
          "kind": "property",
          "signature": "item: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for a menu item that is an anchor link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the label of a menu item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "linkContent": {
          "kind": "property",
          "signature": "linkContent: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the content inside the button/link of the menuItem."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "linkContentMenu": {
          "kind": "property",
          "signature": "linkContentMenu: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for a menu item that is a link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "secondaryText": {
          "kind": "property",
          "signature": "secondaryText: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the secondary text of a menu item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "splitContainer": {
          "kind": "property",
          "signature": "splitContainer: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the container of a split menu item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "splitMenu": {
          "kind": "property",
          "signature": "splitMenu: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the menu portion of a split menu item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "splitPrimary": {
          "kind": "property",
          "signature": "splitPrimary: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the primary portion of a split menu item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "subMenuIcon": {
          "kind": "property",
          "signature": "subMenuIcon: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the submenu icon of a menu item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IContextualMenuListProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "hasCheckmarks": {
          "kind": "property",
          "signature": "hasCheckmarks: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hasIcons": {
          "kind": "property",
          "signature": "hasIcons: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "items": {
          "kind": "property",
          "signature": "items: IContextualMenuItem[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IContextualMenuItem[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "totalItemCount": {
          "kind": "property",
          "signature": "totalItemCount: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IContextualMenuProps": {
      "kind": "interface",
      "extends": "IBaseProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "React.Props is deprecated and we're removing it in 6.0. Usage of 'any' should go away with it."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria label for accessibility for the ContextualMenu. If none specified no aria label will be applied to the ContextualMenu."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "beakWidth": {
          "kind": "property",
          "signature": "beakWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The width of the beak."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bounds": {
          "kind": "property",
          "signature": "bounds?: IRectangle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRectangle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The bounding rectangle for which the contextual menu can appear in."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "calloutProps": {
          "kind": "property",
          "signature": "calloutProps?: ICalloutProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICalloutProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Pass in custom callout props"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional css class to apply to the ContextualMenu"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IContextualMenu>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IContextualMenu>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IContextualMenu interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "contextualMenuItemAs": {
          "kind": "property",
          "signature": "contextualMenuItemAs?: React.ComponentClass<IContextualMenuItemProps> | React.StatelessComponent<IContextualMenuItemProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.ComponentClass<IContextualMenuItemProps> | React.StatelessComponent<IContextualMenuItemProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Method to override the render of the individual menu items"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "coverTarget": {
          "kind": "property",
          "signature": "coverTarget?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true the position returned will have the menu element cover the target. If false then it will position next to the target;"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "delayUpdateFocusOnHover": {
          "kind": "property",
          "signature": "delayUpdateFocusOnHover?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true, the contextual menu will not be updated until focus enters the menu via other means. This will only result in different behavior when shouldFocusOnMount = false"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "directionalHint": {
          "kind": "property",
          "signature": "directionalHint?: DirectionalHint;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DirectionalHint",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "How the element should be positioned"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "directionalHintFixed": {
          "kind": "property",
          "signature": "directionalHintFixed?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true the position will not change sides in an attempt to fit the ContextualMenu within bounds. It will still attempt to align it to whatever bounds are given."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "directionalHintForRTL": {
          "kind": "property",
          "signature": "directionalHintForRTL?: DirectionalHint;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DirectionalHint",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "How the element should be positioned in RTL layouts. If not specified, a mirror of "
            },
            {
              "kind": "code",
              "text": "directionalHint",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " will be used instead"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "doNotLayer": {
          "kind": "property",
          "signature": "doNotLayer?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true do not render on a new layer. If false render on a new layer."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focusZoneProps": {
          "kind": "property",
          "signature": "focusZoneProps?: IFocusZoneProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IFocusZoneProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Props to pass down to the FocusZone. NOTE: the default FocusZoneDirection will be used unless a direction is specified in the focusZoneProps (even if other focusZoneProps are defined)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "gapSpace": {
          "kind": "property",
          "signature": "gapSpace?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The gap between the ContextualMenu and the target"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getMenuClassNames": {
          "kind": "property",
          "signature": "getMenuClassNames?: (theme: ITheme, className?: string) => IContextualMenuClassNames;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(theme: ITheme, className?: string) => IContextualMenuClassNames",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "styles",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " prop of "
            },
            {
              "kind": "code",
              "text": "IContextualMenuProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " to leverage mergeStyles API."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Method to provide the classnames to style the contextual menu. Default value is the getMenuClassnames func defined in ContextualMenu.classnames. Deprecated, use "
            },
            {
              "kind": "code",
              "text": "styles",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " prop of "
            },
            {
              "kind": "code",
              "text": "IContextualMenuProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " to leverage mergeStyles API."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hidden": {
          "kind": "property",
          "signature": "hidden?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If specified, renders the ContextualMenu in a hidden state. Use this flag, rather than rendering a ContextualMenu conditionally based on visibility, to improve rendering performance when it becomes visible. Note: When ContextualMenu is hidden its content will not be rendered. It will only render once the ContextualMenu is visible."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "id": {
          "kind": "property",
          "signature": "id?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "DOM id to tag the ContextualMenu with, for reference. Should be used for 'aria-owns' and other such uses, rather than direct reference for programmatic purposes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isBeakVisible": {
          "kind": "property",
          "signature": "isBeakVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true then the beak is visible. If false it will not be shown."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isSubMenu": {
          "kind": "property",
          "signature": "isSubMenu?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether this menu is a submenu of another menu or not."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "items": {
          "kind": "property",
          "signature": "items: IContextualMenuItem[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IContextualMenuItem[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Collection of menu items."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "labelElementId": {
          "kind": "property",
          "signature": "labelElementId?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria Labelled by labelElementId"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDismiss": {
          "kind": "property",
          "signature": "onDismiss?: (ev?: any, dismissAll?: boolean) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: any, dismissAll?: boolean) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback when the ContextualMenu tries to close. If dismissAll is true then all submenus will be dismissed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onItemClick": {
          "kind": "property",
          "signature": "onItemClick?: (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, item?: IContextualMenuItem) => boolean | void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>, item?: IContextualMenuItem) => boolean | void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Click handler which is invoked if onClick is not passed for individual contextual menu item. Returning true will dismiss the menu even if ev.preventDefault() was called."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onMenuDismissed": {
          "kind": "property",
          "signature": "onMenuDismissed?: (contextualMenu?: IContextualMenuProps) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(contextualMenu?: IContextualMenuProps) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when the contextualmenu is being closed (removing from the DOM)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onMenuOpened": {
          "kind": "property",
          "signature": "onMenuOpened?: (contextualMenu?: IContextualMenuProps) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(contextualMenu?: IContextualMenuProps) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when the contextualmenu has been opened."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderMenuList": {
          "kind": "property",
          "signature": "onRenderMenuList?: IRenderFunction<IContextualMenuListProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IContextualMenuListProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Method to override the render of the list of menu items."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderSubMenu": {
          "kind": "property",
          "signature": "onRenderSubMenu?: IRenderFunction<IContextualMenuProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IContextualMenuProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Method to call when trying to render a submenu."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shouldFocusOnContainer": {
          "kind": "property",
          "signature": "shouldFocusOnContainer?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether to focus on the contextual menu container (as opposed to the first menu item)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shouldFocusOnMount": {
          "kind": "property",
          "signature": "shouldFocusOnMount?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether to focus on the menu when mounted."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IContextualMenuStyleProps, IContextualMenuStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IContextualMenuStyleProps, IContextualMenuStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "subMenuHoverDelay": {
          "kind": "property",
          "signature": "subMenuHoverDelay?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Delay (in milliseconds) to wait before expanding / dismissing a submenu on mouseEnter or mouseLeave"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "target": {
          "kind": "property",
          "signature": "target?: Element | string | MouseEvent | IPoint | null;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Element | string | MouseEvent | IPoint | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The target that the ContextualMenu should try to position itself based on. It can be either an Element a querySelector string of a valid Element or a MouseEvent. If MouseEvent is given then the origin point of the event will be used."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "title": {
          "kind": "property",
          "signature": "title?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional title to be displayed on top of the menu."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "useTargetAsMinWidth": {
          "kind": "property",
          "signature": "useTargetAsMinWidth?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true the context menu will have a minimum width equal to the width of the target element"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "useTargetWidth": {
          "kind": "property",
          "signature": "useTargetWidth?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true the context menu will render as the same width as the target element"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IContextualMenuRenderItem": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "dismissMenu": {
          "kind": "property",
          "signature": "dismissMenu: (dismissAll?: boolean) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(dismissAll?: boolean) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Dismiss the menu this item belongs to."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dismissSubMenu": {
          "kind": "property",
          "signature": "dismissSubMenu: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function to close this item's subMenu, if present."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "openSubMenu": {
          "kind": "property",
          "signature": "openSubMenu: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function to open this item's subMenu, if present."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IContextualMenuSection": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "React.Props is deprecated and we're removing it in 6.0. Usage of 'any' should go away with it."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "bottomDivider": {
          "kind": "property",
          "signature": "bottomDivider?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If set to true, the section will display a divider at the bottom of the section."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "items": {
          "kind": "property",
          "signature": "items: IContextualMenuItem[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IContextualMenuItem[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The items to include inside the section."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "title": {
          "kind": "property",
          "signature": "title?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The optional section title."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "topDivider": {
          "kind": "property",
          "signature": "topDivider?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If set to true, the section will display a divider at the top of the section."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IContextualMenuState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "contextualMenuItems": {
          "kind": "property",
          "signature": "contextualMenuItems?: IContextualMenuItem[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IContextualMenuItem[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "contextualMenuTarget": {
          "kind": "property",
          "signature": "contextualMenuTarget?: Element;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Element",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dismissedMenuItemKey": {
          "kind": "property",
          "signature": "dismissedMenuItemKey?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "expandedByMouseClick": {
          "kind": "property",
          "signature": "expandedByMouseClick?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "expandedMenuItemKey": {
          "kind": "property",
          "signature": "expandedMenuItemKey?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "positions": {
          "kind": "property",
          "signature": "positions?: any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideDirectionalClassName": {
          "kind": "property",
          "signature": "slideDirectionalClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "submenuDirection": {
          "kind": "property",
          "signature": "submenuDirection?: DirectionalHint;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DirectionalHint",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "subMenuId": {
          "kind": "property",
          "signature": "subMenuId?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "submenuTarget": {
          "kind": "property",
          "signature": "submenuTarget?: Element;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Element",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IContextualMenuStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept custom classNames"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IContextualMenuStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "container": {
          "kind": "property",
          "signature": "container: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the container which parents all menu items."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "header": {
          "kind": "property",
          "signature": "header: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the header item of a ContextualMenu"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "list": {
          "kind": "property",
          "signature": "list: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the list that contains all menuItems."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Base styles for the root element of all ContextualMenus."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "title": {
          "kind": "property",
          "signature": "title: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the contextual menu title."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IconType": {
      "kind": "enum",
      "values": {
        "default": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Render using the fabric icon font."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "Default": {
          "kind": "enum value",
          "value": "100000",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "default",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated, use "
            },
            {
              "kind": "code",
              "text": "default",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "image": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Render using an image, where imageProps would be used."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "Image": {
          "kind": "enum value",
          "value": "100001",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "image",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated, use "
            },
            {
              "kind": "code",
              "text": "image",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "ICustomizableProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "fields": {
          "kind": "property",
          "signature": "fields?: string[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "List of fields which can be customized."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "scope": {
          "kind": "property",
          "signature": "scope: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Name of scope, which can be targeted using the Customizer."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICustomizations": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "scopedSettings": {
          "kind": "property",
          "signature": "scopedSettings:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        [key: string]: Settings;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "settings": {
          "kind": "property",
          "signature": "settings: Settings;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Settings",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ICustomizerContext": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "customizations": {
          "kind": "property",
          "signature": "customizations: ICustomizations;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICustomizations",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDatePicker": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the text field"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "reset": {
          "kind": "method",
          "signature": "reset(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Reset the state of the picker to the default"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "IDatePickerProps": {
      "kind": "interface",
      "extends": "IBaseProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "allFocusable": {
          "kind": "property",
          "signature": "allFocusable?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Allows all elements to be focused, including disabled ones"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "allowTextInput": {
          "kind": "property",
          "signature": "allowTextInput?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the DatePicker allows input a date string directly or not"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria Label for TextField of the DatePicker for screen reader users."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "borderless": {
          "kind": "property",
          "signature": "borderless?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Determines if DatePicker has a border."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "calendarProps": {
          "kind": "property",
          "signature": "calendarProps?: ICalendarProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICalendarProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Pass calendar props to calendar component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional Classname for datepicker root element ."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IDatePicker>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IDatePicker>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IDatePicker interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dateTimeFormatter": {
          "kind": "property",
          "signature": "dateTimeFormatter?: ICalendarFormatDateCallbacks;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICalendarFormatDateCallbacks",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Apply additional formating to dates, for example localized date formatting."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disableAutoFocus": {
          "kind": "property",
          "signature": "disableAutoFocus?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the DatePicker should open automatically when the control is focused"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Disabled state of the DatePicker."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "firstDayOfWeek": {
          "kind": "property",
          "signature": "firstDayOfWeek?: DayOfWeek;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DayOfWeek",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The first day of the week for your locale."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "firstWeekOfYear": {
          "kind": "property",
          "signature": "firstWeekOfYear?: FirstWeekOfYear;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "FirstWeekOfYear",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines when the first week of the year should start, FirstWeekOfYear.FirstDay, FirstWeekOfYear.FirstFullWeek or FirstWeekOfYear.FirstFourDayWeek are the possible values"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "formatDate": {
          "kind": "property",
          "signature": "formatDate?: (date?: Date) => string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(date?: Date) => string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional method to format the chosen date to a string to display in the DatePicker"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "highlightCurrentMonth": {
          "kind": "property",
          "signature": "highlightCurrentMonth?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the month picker should highlight the current month"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "highlightSelectedMonth": {
          "kind": "property",
          "signature": "highlightSelectedMonth?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the month picker should highlight the selected month"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "initialPickerDate": {
          "kind": "property",
          "signature": "initialPickerDate?: Date;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Date",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The initially highlighted date in the calendar picker"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isMonthPickerVisible": {
          "kind": "property",
          "signature": "isMonthPickerVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the month picker is shown beside the day picker or hidden."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isRequired": {
          "kind": "property",
          "signature": "isRequired?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the DatePicker is a required field or not"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Label for the DatePicker"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "maxDate": {
          "kind": "property",
          "signature": "maxDate?: Date;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Date",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The maximum allowable date."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "minDate": {
          "kind": "property",
          "signature": "minDate?: Date;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Date",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The minimum allowable date."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onAfterMenuDismiss": {
          "kind": "property",
          "signature": "onAfterMenuDismiss?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback that runs after DatePicker's menu (Calendar) is closed"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onSelectDate": {
          "kind": "property",
          "signature": "onSelectDate?: (date: Date | null | undefined) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(date: Date | null | undefined) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback issued when a date is selected"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "parseDateFromString": {
          "kind": "property",
          "signature": "parseDateFromString?: (dateStr: string) => Date | null;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(dateStr: string) => Date | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional method to parse the text input value to date, it is only useful when allowTextInput is set to true"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "pickerAriaLabel": {
          "kind": "property",
          "signature": "pickerAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria label for date picker popup for screen reader users."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "placeholder": {
          "kind": "property",
          "signature": "placeholder?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Placeholder text for the DatePicker"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showCloseButton": {
          "kind": "property",
          "signature": "showCloseButton?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the CalendarDay close button should be shown or not."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showGoToToday": {
          "kind": "property",
          "signature": "showGoToToday?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the \"Go to today\" link should be shown or not"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showMonthPickerAsOverlay": {
          "kind": "property",
          "signature": "showMonthPickerAsOverlay?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Show month picker on top of date picker when visible."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showWeekNumbers": {
          "kind": "property",
          "signature": "showWeekNumbers?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the calendar should show the week number (weeks 1 to 53) before each week row"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "strings": {
          "kind": "property",
          "signature": "strings?: IDatePickerStrings;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IDatePickerStrings",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Localized strings to use in the DatePicker"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunction<IDatePickerStyleProps, IDatePickerStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunction<IDatePickerStyleProps, IDatePickerStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "today": {
          "kind": "property",
          "signature": "today?: Date;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Date",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Value of today. If null, current time in client machine will be used."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "underlined": {
          "kind": "property",
          "signature": "underlined?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not the Textfield of the DatePicker is underlined."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "value?: Date;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Date",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Default value of the DatePicker, if any"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDatePickerState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "errorMessage": {
          "kind": "property",
          "signature": "errorMessage?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "formattedDate": {
          "kind": "property",
          "signature": "formattedDate?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDatePickerShown": {
          "kind": "property",
          "signature": "isDatePickerShown?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedDate": {
          "kind": "property",
          "signature": "selectedDate?: Date;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Date",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDatePickerStrings": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "closeButtonAriaLabel": {
          "kind": "property",
          "signature": "closeButtonAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria-label for the \"close\" button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "days": {
          "kind": "property",
          "signature": "days: string[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An array of strings for the full names of days of the week. The array is 0-based, so days[0] should be the full name of Sunday."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "goToToday": {
          "kind": "property",
          "signature": "goToToday: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "String to render for button to direct the user to today's date."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "invalidInputErrorMessage": {
          "kind": "property",
          "signature": "invalidInputErrorMessage?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Error message to render for TextField if input date string parsing fails."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isOutOfBoundsErrorMessage": {
          "kind": "property",
          "signature": "isOutOfBoundsErrorMessage?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Error message to render for TextField if date boundary (minDate, maxDate) validation fails."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isRequiredErrorMessage": {
          "kind": "property",
          "signature": "isRequiredErrorMessage?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Error message to render for TextField if isRequired validation fails."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "months": {
          "kind": "property",
          "signature": "months: string[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An array of strings for the full names of months. The array is 0-based, so months[0] should be the full name of January."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "nextMonthAriaLabel": {
          "kind": "property",
          "signature": "nextMonthAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria-label for the \"next month\" button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "nextYearAriaLabel": {
          "kind": "property",
          "signature": "nextYearAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria-label for the \"next year\" button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "prevMonthAriaLabel": {
          "kind": "property",
          "signature": "prevMonthAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria-label for the \"previous month\" button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "prevYearAriaLabel": {
          "kind": "property",
          "signature": "prevYearAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria-label for the \"previous year\" button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shortDays": {
          "kind": "property",
          "signature": "shortDays: string[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An array of strings for the initials of the days of the week. The array is 0-based, so days[0] should be the initial of Sunday."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shortMonths": {
          "kind": "property",
          "signature": "shortMonths: string[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An array of strings for the short names of months. The array is 0-based, so shortMonths[0] should be the short name of January."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDatePickerStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept custom classNames"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDatePickerShown": {
          "kind": "property",
          "signature": "isDatePickerShown?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDatePickerStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "callout": {
          "kind": "property",
          "signature": "callout: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "icon": {
          "kind": "property",
          "signature": "icon: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "textField": {
          "kind": "property",
          "signature": "textField: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDelayedRenderProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "DelayedRender component props."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "delay": {
          "kind": "property",
          "signature": "delay?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Number of milliseconds to delay rendering children."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDetailsFooterBaseProps": {
      "kind": "interface",
      "extends": "IDetailsItemProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IDetailsFooterProps": {
      "kind": "interface",
      "extends": "IDetailsFooterBaseProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "columns": {
          "kind": "property",
          "signature": "columns: IColumn[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IColumn[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Column metadata"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selection": {
          "kind": "property",
          "signature": "selection: ISelection;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISelection",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Selection from utilities"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectionMode": {
          "kind": "property",
          "signature": "selectionMode: SelectionMode;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SelectionMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Selection mode"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDetailsGroupDividerProps": {
      "kind": "interface",
      "extends": "IGroupDividerProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IDetailsGroupRenderProps": {
      "kind": "interface",
      "extends": "IGroupRenderProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "onRenderFooter": {
          "kind": "property",
          "signature": "onRenderFooter?: IRenderFunction<IDetailsGroupDividerProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IDetailsGroupDividerProps>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderHeader": {
          "kind": "property",
          "signature": "onRenderHeader?: IRenderFunction<IDetailsGroupDividerProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IDetailsGroupDividerProps>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDetailsHeaderBaseProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "ariaLabel for the entire header"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabelForSelectAllCheckbox": {
          "kind": "property",
          "signature": "ariaLabelForSelectAllCheckbox?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "ariaLabel for the header checkbox that selects or deselects everything"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabelForSelectionColumn": {
          "kind": "property",
          "signature": "ariaLabelForSelectionColumn?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "ariaLabel for the selection column"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Overriding class name"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "collapseAllVisibility": {
          "kind": "property",
          "signature": "collapseAllVisibility?: CollapseAllVisibility;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "CollapseAllVisibility",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether to collapse for all visibility"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "columnReorderOptions": {
          "kind": "property",
          "signature": "columnReorderOptions?: IColumnReorderOptions;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IColumnReorderOptions",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Column reordering options"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "columnReorderProps": {
          "kind": "property",
          "signature": "columnReorderProps?: IColumnReorderHeaderProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IColumnReorderHeaderProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Column reordering options"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IDetailsHeader>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IDetailsHeader>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Ref to the component itself"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isAllCollapsed": {
          "kind": "property",
          "signature": "isAllCollapsed?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not all is collapsed"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "layoutMode": {
          "kind": "property",
          "signature": "layoutMode: DetailsListLayoutMode;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DetailsListLayoutMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Layout mode - fixedColumns or justified"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "minimumPixelsForDrag": {
          "kind": "property",
          "signature": "minimumPixelsForDrag?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Minimum pixels to be moved before dragging is registered"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onColumnAutoResized": {
          "kind": "property",
          "signature": "onColumnAutoResized?: (column: IColumn, columnIndex: number) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(column: IColumn, columnIndex: number) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when column is automatically resized"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onColumnClick": {
          "kind": "property",
          "signature": "onColumnClick?: (ev: React.MouseEvent<HTMLElement>, column: IColumn) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.MouseEvent<HTMLElement>, column: IColumn) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when the column is clicked"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onColumnContextMenu": {
          "kind": "property",
          "signature": "onColumnContextMenu?: (column: IColumn, ev: React.MouseEvent<HTMLElement>) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(column: IColumn, ev: React.MouseEvent<HTMLElement>) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when the column needs to show a context menu"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onColumnIsSizingChanged": {
          "kind": "property",
          "signature": "onColumnIsSizingChanged?: (column: IColumn, isSizing: boolean) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(column: IColumn, isSizing: boolean) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when column sizing has changed"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onColumnResized": {
          "kind": "property",
          "signature": "onColumnResized?: (column: IColumn, newWidth: number, columnIndex: number) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(column: IColumn, newWidth: number, columnIndex: number) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when column is resized"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderColumnHeaderTooltip": {
          "kind": "property",
          "signature": "onRenderColumnHeaderTooltip?: IRenderFunction<ITooltipHostProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<ITooltipHostProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback to render a tooltip for the column header"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onToggleCollapseAll": {
          "kind": "property",
          "signature": "onToggleCollapseAll?: (isAllCollapsed: boolean) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(isAllCollapsed: boolean) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when collapse all is toggled"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectAllVisibility": {
          "kind": "property",
          "signature": "selectAllVisibility?: SelectAllVisibility;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SelectAllVisibility",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Select all button visibility"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IDetailsHeaderStyleProps, IDetailsHeaderStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IDetailsHeaderStyleProps, IDetailsHeaderStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme from the Higher Order Component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDetailsHeaderProps": {
      "kind": "interface",
      "extends": "IDetailsHeaderBaseProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "columns": {
          "kind": "property",
          "signature": "columns: IColumn[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IColumn[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Column metadata"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selection": {
          "kind": "property",
          "signature": "selection: ISelection;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISelection",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Selection from utilities"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectionMode": {
          "kind": "property",
          "signature": "selectionMode: SelectionMode;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SelectionMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Selection mode"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDetailsItemProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "cellStyleProps": {
          "kind": "property",
          "signature": "cellStyleProps?: ICellStyleProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICellStyleProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Rules for rendering column cells."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "checkboxVisibility": {
          "kind": "property",
          "signature": "checkboxVisibility?: CheckboxVisibility | undefined;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "CheckboxVisibility | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Checkbox visibility"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "columns": {
          "kind": "property",
          "signature": "columns?: IColumn[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IColumn[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Column metadata"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "groupNestingDepth": {
          "kind": "property",
          "signature": "groupNestingDepth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Nesting depth of a grouping"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "indentWidth": {
          "kind": "property",
          "signature": "indentWidth?: number | undefined;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "How much to indent"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selection": {
          "kind": "property",
          "signature": "selection?: ISelection | undefined;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISelection | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Selection from utilities"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectionMode": {
          "kind": "property",
          "signature": "selectionMode?: SelectionMode | undefined;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SelectionMode | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Selection mode"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "viewport": {
          "kind": "property",
          "signature": "viewport?: IViewport | undefined;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IViewport | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "View port of the virtualized list"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDetailsList": {
      "kind": "interface",
      "extends": "IList",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focusIndex": {
          "kind": "property",
          "signature": "focusIndex: (index: number, forceIntoFirstElement?: boolean, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(index: number, forceIntoFirstElement?: boolean, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Scroll to and focus the item at the given index. focusIndex will call scrollToIndex on the specified index."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "forceUpdate": {
          "kind": "property",
          "signature": "forceUpdate: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Ensures that the list content is updated. Call this in cases where the list prop updates don't change, but the list still needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change, you can call this to force a re-evaluation. Be aware that this can be an expensive operation and should be done sparingly."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getStartItemIndexInView": {
          "kind": "property",
          "signature": "getStartItemIndexInView: () => number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Get the start index of the page that is currently in view"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDetailsListProps": {
      "kind": "interface",
      "extends": "IBaseProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A text summary of the table set via aria-label."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabelForGrid": {
          "kind": "property",
          "signature": "ariaLabelForGrid?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria label for grid in details list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabelForListHeader": {
          "kind": "property",
          "signature": "ariaLabelForListHeader?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The aria-label attribute to stamp out on the list header"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabelForSelectAllCheckbox": {
          "kind": "property",
          "signature": "ariaLabelForSelectAllCheckbox?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The aria-label attribute to stamp out on select all checkbox for the list"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabelForSelectionColumn": {
          "kind": "property",
          "signature": "ariaLabelForSelectionColumn?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An ARIA label for the name of the selection column, for localization."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "cellStyleProps": {
          "kind": "property",
          "signature": "cellStyleProps?: ICellStyleProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICellStyleProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Props impacting the render style of cells. Since these have an impact on calculated column widths, they are handled separately from normal theme styling, but they are passed to the styling system."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "checkboxCellClassName": {
          "kind": "property",
          "signature": "checkboxCellClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional class name to add to the cell of a checkbox"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "checkboxVisibility": {
          "kind": "property",
          "signature": "checkboxVisibility?: CheckboxVisibility;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "CheckboxVisibility",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Controls the visibility of selection check box."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "checkButtonAriaLabel": {
          "kind": "property",
          "signature": "checkButtonAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Check button aria label for details list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional class name to add to the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "columnReorderOptions": {
          "kind": "property",
          "signature": "columnReorderOptions?: IColumnReorderOptions;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IColumnReorderOptions",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Options for column re-order using drag and drop"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "columns": {
          "kind": "property",
          "signature": "columns?: IColumn[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IColumn[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Given column defitions. If none are provided, default columns will be created based on the item's properties."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "compact": {
          "kind": "property",
          "signature": "compact?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Boolean value to indicate if the component should render in compact mode. Set to false by default"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IDetailsList>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IDetailsList>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IDetailsList interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "constrainMode": {
          "kind": "property",
          "signature": "constrainMode?: ConstrainMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ConstrainMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Controls how the list contrains overflow."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disableSelectionZone": {
          "kind": "property",
          "signature": "disableSelectionZone?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not to disable the built-in SelectionZone, so the host component can provide its own."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dragDropEvents": {
          "kind": "property",
          "signature": "dragDropEvents?: IDragDropEvents;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IDragDropEvents",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Map of callback functions related to row drag and drop functionality."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "enableShimmer": {
          "kind": "property",
          "signature": "enableShimmer?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If set to true and we provide an empty array, it will render 10 lines of whatever provided in onRenderMissingItem."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "enterModalSelectionOnTouch": {
          "kind": "property",
          "signature": "enterModalSelectionOnTouch?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not the selection zone should enter modal state on touch."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getGroupHeight": {
          "kind": "property",
          "signature": "getGroupHeight?: (group: IGroup, groupIndex: number) => number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(group: IGroup, groupIndex: number) => number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional function which will be called to estimate the height (in pixels) of the given group."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "By default, scrolling through a large virtualized GroupedList will often \"jump\" due to the order in which heights are calculated. For more details, see https://github.com/OfficeDev/office-ui-fabric-react/issues/5094"
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Pass this prop to ensure the list uses the computed height rather than cached DOM measurements, avoiding the scroll jumping issue."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getKey": {
          "kind": "property",
          "signature": "getKey?: (item: any, index?: number) => string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: any, index?: number) => string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to get the item key, to be used in the selection and on render."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getRowAriaDescribedBy": {
          "kind": "property",
          "signature": "getRowAriaDescribedBy?: (item: any) => string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: any) => string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to get the aria-describedby IDs (space separated strings) of the elements that describe the item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getRowAriaLabel": {
          "kind": "property",
          "signature": "getRowAriaLabel?: (item: any) => string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: any) => string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to get the aria-label string for a given item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "groupProps": {
          "kind": "property",
          "signature": "groupProps?: IDetailsGroupRenderProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IDetailsGroupRenderProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional override properties to render groups. The definition for IGroupRenderProps can be found under the GroupedList component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "groups": {
          "kind": "property",
          "signature": "groups?: IGroup[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IGroup[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional grouping instructions. The definition for IGroup can be found under the GroupedList component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "indentWidth": {
          "kind": "property",
          "signature": "indentWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional override for the indent width used for group nesting."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "initialFocusedIndex": {
          "kind": "property",
          "signature": "initialFocusedIndex?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional default focused index to set focus to once the items have rendered and the index exists."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isHeaderVisible": {
          "kind": "property",
          "signature": "isHeaderVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Controls the visibility of the details header."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "items": {
          "kind": "property",
          "signature": "items: any[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The items to render."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "layoutMode": {
          "kind": "property",
          "signature": "layoutMode?: DetailsListLayoutMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DetailsListLayoutMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Controls how the columns are adjusted."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "listProps": {
          "kind": "property",
          "signature": "listProps?: IListProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IListProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional properties to pass through to the list components being rendered."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "minimumPixelsForDrag": {
          "kind": "property",
          "signature": "minimumPixelsForDrag?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The minimum mouse move distance to interpret the action as drag event."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onActiveItemChanged": {
          "kind": "property",
          "signature": "onActiveItemChanged?: (item?: any, index?: number, ev?: React.FocusEvent<HTMLElement>) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item?: any, index?: number, ev?: React.FocusEvent<HTMLElement>) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when an item in the list becomes active by clicking anywhere inside the row or navigating to it with keyboard."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onColumnHeaderClick": {
          "kind": "property",
          "signature": "onColumnHeaderClick?: (ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLElement>, column?: IColumn) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when the user clicks on the column header."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onColumnHeaderContextMenu": {
          "kind": "property",
          "signature": "onColumnHeaderContextMenu?: (column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(column?: IColumn, ev?: React.MouseEvent<HTMLElement>) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when the user asks for a contextual menu (usually via right click) from a column header."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onColumnResize": {
          "kind": "property",
          "signature": "onColumnResize?: (column?: IColumn, newWidth?: number, columnIndex?: number) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(column?: IColumn, newWidth?: number, columnIndex?: number) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback fired on column resize"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDidUpdate": {
          "kind": "property",
          "signature": "onDidUpdate?: (detailsList?: DetailsListBase) => any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(detailsList?: DetailsListBase) => any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when the details list has been updated. Useful for telemetry tracking externally."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onItemContextMenu": {
          "kind": "property",
          "signature": "onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item?: any, index?: number, ev?: Event) => void | boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when the context menu of an item has been accessed. If undefined or false are returned, ev.preventDefault() will be called."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onItemInvoked": {
          "kind": "property",
          "signature": "onItemInvoked?: (item?: any, index?: number, ev?: Event) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item?: any, index?: number, ev?: Event) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when a given row has been invoked (by pressing enter while it is selected.)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderDetailsFooter": {
          "kind": "property",
          "signature": "onRenderDetailsFooter?: IRenderFunction<IDetailsFooterProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IDetailsFooterProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An override to render the details footer."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderDetailsHeader": {
          "kind": "property",
          "signature": "onRenderDetailsHeader?: IRenderFunction<IDetailsHeaderProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IDetailsHeaderProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An override to render the details header."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderItemColumn": {
          "kind": "property",
          "signature": "onRenderItemColumn?: (item?: any, index?: number, column?: IColumn) => any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item?: any, index?: number, column?: IColumn) => any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If provided, will be the \"default\" item column renderer method. This affects cells within the rows; not the rows themselves. If a column definition provides its own onRender method, that will be used instead of this."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderMissingItem": {
          "kind": "property",
          "signature": "onRenderMissingItem?: (index?: number, rowProps?: IDetailsRowProps) => React.ReactNode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(index?: number, rowProps?: IDetailsRowProps) => React.ReactNode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for what to render when the item is missing."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderRow": {
          "kind": "property",
          "signature": "onRenderRow?: IRenderFunction<IDetailsRowProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IDetailsRowProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If provided, will allow the caller to override the default row rendering."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRowDidMount": {
          "kind": "property",
          "signature": "onRowDidMount?: (item?: any, index?: number) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item?: any, index?: number) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when a given row has been mounted. Useful for identifying when a row has been rendered on the page."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRowWillUnmount": {
          "kind": "property",
          "signature": "onRowWillUnmount?: (item?: any, index?: number) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item?: any, index?: number) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when a given row has been unmounted. Useful for identifying when a row has been removed from the page."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onShouldVirtualize": {
          "kind": "property",
          "signature": "onShouldVirtualize?: (props: IListProps) => boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(props: IListProps) => boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to determine whether the list should be rendered in full, or virtualized. Virtualization will add and remove pages of items as the user scrolls them into the visible range. This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for smaller lists. The default implementation will virtualize when this callback is not provided."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rowElementEventMap": {
          "kind": "property",
          "signature": "rowElementEventMap?: {\n        eventName: string;\n        callback: (context: IDragDropContext, event?: any) => void;\n    }[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        eventName: string;\n        callback: (context: IDragDropContext, event?: any) => void;\n    }[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Event names and corresponding callbacks that will be registered to rendered row elements."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selection": {
          "kind": "property",
          "signature": "selection?: ISelection;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISelection",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional selection model to track selection state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectionMode": {
          "kind": "property",
          "signature": "selectionMode?: SelectionMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SelectionMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Controls how/if the details list manages selection. Options include none, single, multiple"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectionPreservedOnEmptyClick": {
          "kind": "property",
          "signature": "selectionPreservedOnEmptyClick?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "By default, selection is cleared when clicking on an empty (non-focusable) section of the screen. Setting this value to true overrides that behavior and maintains selection."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectionZoneProps": {
          "kind": "property",
          "signature": "selectionZoneProps?: ISelectionZoneProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISelectionZoneProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Addition props to pass through to the selection zone created by default."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "setKey": {
          "kind": "property",
          "signature": "setKey?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A key that uniquely identifies the given items. If provided, the selection will be reset when the key changes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shouldApplyApplicationRole": {
          "kind": "property",
          "signature": "shouldApplyApplicationRole?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Boolean value to indicate if the role application should be applied on details list. Set to false by default"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IDetailsListStyleProps, IDetailsListStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IDetailsListStyleProps, IDetailsListStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style function to be passed in to override the themed or default styles"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by the Higher Order Component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "usePageCache": {
          "kind": "property",
          "signature": "usePageCache?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Boolean value to enable render page caching. This is an experimental performance optimization that is off by default."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "useReducedRowRenderer": {
          "kind": "property",
          "signature": "useReducedRowRenderer?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Rerender DetailsRow only when props changed. Might cause regression when depending on external updates."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "viewport": {
          "kind": "property",
          "signature": "viewport?: IViewport;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IViewport",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Viewport, provided by the withViewport decorator."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDetailsListState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "adjustedColumns": {
          "kind": "property",
          "signature": "adjustedColumns: IColumn[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IColumn[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focusedItemIndex": {
          "kind": "property",
          "signature": "focusedItemIndex: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isCollapsed": {
          "kind": "property",
          "signature": "isCollapsed?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDropping": {
          "kind": "property",
          "signature": "isDropping?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isSizing": {
          "kind": "property",
          "signature": "isSizing?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isSomeGroupExpanded": {
          "kind": "property",
          "signature": "isSomeGroupExpanded?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "lastSelectionMode": {
          "kind": "property",
          "signature": "lastSelectionMode?: SelectionMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SelectionMode",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "lastWidth": {
          "kind": "property",
          "signature": "lastWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDetailsListStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "contentWrapper": {
          "kind": "property",
          "signature": "contentWrapper: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focusZone": {
          "kind": "property",
          "signature": "focusZone: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "headerWrapper": {
          "kind": "property",
          "signature": "headerWrapper: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDetailsRow": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IDetailsRowBaseProps": {
      "kind": "interface",
      "extends": "IBaseProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "checkboxCellClassName": {
          "kind": "property",
          "signature": "checkboxCellClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Class name for the checkbox cell"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "checkButtonAriaLabel": {
          "kind": "property",
          "signature": "checkButtonAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Check button's aria label"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Overriding class name"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "collapseAllVisibility": {
          "kind": "property",
          "signature": "collapseAllVisibility?: CollapseAllVisibility;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "CollapseAllVisibility",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Collapse all visibility"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "compact": {
          "kind": "property",
          "signature": "compact?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether to render in compact mode"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IDetailsRow>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IDetailsRow>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Ref of the component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dragDropEvents": {
          "kind": "property",
          "signature": "dragDropEvents?: IDragDropEvents;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IDragDropEvents",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Handling drag and drop events"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dragDropHelper": {
          "kind": "property",
          "signature": "dragDropHelper?: IDragDropHelper;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IDragDropHelper",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Helper for the drag and drop"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "eventsToRegister": {
          "kind": "property",
          "signature": "eventsToRegister?: {\n        eventName: string;\n        callback: (item?: any, index?: number, event?: any) => void;\n    }[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        eventName: string;\n        callback: (item?: any, index?: number, event?: any) => void;\n    }[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A list of events to register"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getRowAriaDescribedBy": {
          "kind": "property",
          "signature": "getRowAriaDescribedBy?: (item: any) => string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: any) => string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for getting the row aria-describedby"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getRowAriaLabel": {
          "kind": "property",
          "signature": "getRowAriaLabel?: (item: any) => string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: any) => string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for getting the row aria label"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "item": {
          "kind": "property",
          "signature": "item: any;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Data source for this component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "itemIndex": {
          "kind": "property",
          "signature": "itemIndex: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Index of the collection of items of the DetailsList"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDidMount": {
          "kind": "property",
          "signature": "onDidMount?: (row?: DetailsRowBase) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(row?: DetailsRowBase) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for did mount for parent"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderCheck": {
          "kind": "property",
          "signature": "onRenderCheck?: (props: IDetailsRowCheckProps) => JSX.Element;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(props: IDetailsRowCheckProps) => JSX.Element",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for rendering a checkbox"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderItemColumn": {
          "kind": "property",
          "signature": "onRenderItemColumn?: (item?: any, index?: number, column?: IColumn) => any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item?: any, index?: number, column?: IColumn) => any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for rendering an item column"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onWillUnmount": {
          "kind": "property",
          "signature": "onWillUnmount?: (row?: DetailsRowBase) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(row?: DetailsRowBase) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for will mount for parent"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rowFieldsAs": {
          "kind": "property",
          "signature": "rowFieldsAs?: React.StatelessComponent<IDetailsRowFieldsProps> | React.ComponentClass<IDetailsRowFieldsProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.StatelessComponent<IDetailsRowFieldsProps> | React.ComponentClass<IDetailsRowFieldsProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "DOM element into which to render row field"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shimmer": {
          "kind": "property",
          "signature": "shimmer?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether to render shimmer"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IDetailsRowStyleProps, IDetailsRowStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IDetailsRowStyleProps, IDetailsRowStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Overriding styles to this row"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by styled() function"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "useReducedRowRenderer": {
          "kind": "property",
          "signature": "useReducedRowRenderer?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Rerender DetailsRow only when props changed. Might cause regression when depending on external updates."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDetailsRowCheckProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "anySelected": {
          "kind": "property",
          "signature": "anySelected?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is any selected - also true for isSelectionModal"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "canSelect": {
          "kind": "property",
          "signature": "canSelect: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Can this checkbox be selectable"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "checkClassName": {
          "kind": "property",
          "signature": "checkClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The classname to be passed down to Check component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional className to attach to the slider root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "compact": {
          "kind": "property",
          "signature": "compact?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is this in compact mode?"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isHeader": {
          "kind": "property",
          "signature": "isHeader?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is the check part of the header in a DetailsList"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isSelected": {
          "kind": "property",
          "signature": "isSelected?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "selected",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated, use "
            },
            {
              "kind": "code",
              "text": "selected",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isVisible": {
          "kind": "property",
          "signature": "isVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not this checkbox is visible"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selected": {
          "kind": "property",
          "signature": "selected?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not this check is selected"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IDetailsRowCheckStyleProps, IDetailsRowCheckStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDetailsRowCheckStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "check": {
          "kind": "property",
          "signature": "check: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDisabled": {
          "kind": "property",
          "signature": "isDisabled: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDetailsRowProps": {
      "kind": "interface",
      "extends": "IDetailsRowBaseProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "columns": {
          "kind": "property",
          "signature": "columns: IColumn[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IColumn[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Column metadata"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selection": {
          "kind": "property",
          "signature": "selection: ISelection;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISelection",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Selection from utilities"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectionMode": {
          "kind": "property",
          "signature": "selectionMode: SelectionMode;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SelectionMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Selection mode"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDetailsRowSelectionState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "isSelected": {
          "kind": "property",
          "signature": "isSelected: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isSelectionModal": {
          "kind": "property",
          "signature": "isSelectionModal: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDetailsRowState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "columnMeasureInfo": {
          "kind": "property",
          "signature": "columnMeasureInfo?:",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        index: number;\n        column: IColumn;\n        onMeasureDone: (measuredWidth: number) => void;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "groupNestingDepth": {
          "kind": "property",
          "signature": "groupNestingDepth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDropping": {
          "kind": "property",
          "signature": "isDropping?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectionState": {
          "kind": "property",
          "signature": "selectionState?: IDetailsRowSelectionState;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IDetailsRowSelectionState",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDetailsRowStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "cell": {
          "kind": "property",
          "signature": "cell: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "cellMeasurer": {
          "kind": "property",
          "signature": "cellMeasurer: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "cellPadded": {
          "kind": "property",
          "signature": "cellPadded: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "cellUnpadded": {
          "kind": "property",
          "signature": "cellUnpadded: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "check": {
          "kind": "property",
          "signature": "check: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "checkCell": {
          "kind": "property",
          "signature": "checkCell: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "checkCover": {
          "kind": "property",
          "signature": "checkCover: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "fields": {
          "kind": "property",
          "signature": "fields: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isMultiline": {
          "kind": "property",
          "signature": "isMultiline: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isRowHeader": {
          "kind": "property",
          "signature": "isRowHeader: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shimmer": {
          "kind": "property",
          "signature": "shimmer: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shimmerBottomBorder": {
          "kind": "property",
          "signature": "shimmerBottomBorder: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shimmerIconPlaceholder": {
          "kind": "property",
          "signature": "shimmerIconPlaceholder: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shimmerLeftBorder": {
          "kind": "property",
          "signature": "shimmerLeftBorder: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDialog": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IDialogContent": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IDialogContentProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional override class name"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "closeButtonAriaLabel": {
          "kind": "property",
          "signature": "closeButtonAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Label to be passed to to aria-label of close button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IDialogContent>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IDialogContent>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IDialogContent interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isMultiline": {
          "kind": "property",
          "signature": "isMultiline?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is inside a multiline wrapper"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDismiss": {
          "kind": "property",
          "signature": "onDismiss?: (ev?: React.MouseEvent<HTMLButtonElement>) => any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLButtonElement>) => any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback function for when the Dialog is dismissed from the close button or light dismiss, before the animation completes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "responsiveMode": {
          "kind": "property",
          "signature": "responsiveMode?: ResponsiveMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ResponsiveMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Responsive mode passed in from decorator."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showCloseButton": {
          "kind": "property",
          "signature": "showCloseButton?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Show an 'x' close button in the upper-right corner"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IDialogContentStyleProps, IDialogContentStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IDialogContentStyleProps, IDialogContentStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "subText": {
          "kind": "property",
          "signature": "subText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The subtext to display in the dialog"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "subTextId": {
          "kind": "property",
          "signature": "subTextId?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The Id for subText container"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by HOC."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "title": {
          "kind": "property",
          "signature": "title?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The title text to display at the top of the dialog."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "titleId": {
          "kind": "property",
          "signature": "titleId?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The Id for title container"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "topButtonsProps": {
          "kind": "property",
          "signature": "topButtonsProps?: IButtonProps[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IButtonProps[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Other top buttons that will show up next to the close button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "type": {
          "kind": "property",
          "signature": "type?: DialogType;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DialogType",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The type of Dialog to display."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDialogContentStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept custom classNames"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hidden": {
          "kind": "property",
          "signature": "hidden?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isClose": {
          "kind": "property",
          "signature": "isClose?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isLargeHeader": {
          "kind": "property",
          "signature": "isLargeHeader?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isMultiline": {
          "kind": "property",
          "signature": "isMultiline?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is inside a multiline wrapper"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept theme prop."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDialogContentStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "button": {
          "kind": "property",
          "signature": "button: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "content": {
          "kind": "property",
          "signature": "content: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the content element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "header": {
          "kind": "property",
          "signature": "header: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inner": {
          "kind": "property",
          "signature": "inner: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "innerContent": {
          "kind": "property",
          "signature": "innerContent: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "subText": {
          "kind": "property",
          "signature": "subText: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "title": {
          "kind": "property",
          "signature": "title: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "topButton": {
          "kind": "property",
          "signature": "topButton: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDialogFooter": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IDialogFooterProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional override class name"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IDialogFooter>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IDialogFooter>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IDialogFooterStyleProps, IDialogFooterStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IDialogFooterStyleProps, IDialogFooterStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by HOC."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDialogFooterStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional override class name"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept theme prop."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDialogFooterStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "action": {
          "kind": "property",
          "signature": "action: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "actions": {
          "kind": "property",
          "signature": "actions: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the actions element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "actionsRight": {
          "kind": "property",
          "signature": "actionsRight: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDialogProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaDescribedById": {
          "kind": "property",
          "signature": "ariaDescribedById?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Pass through via "
            },
            {
              "kind": "code",
              "text": "modalProps.subtitleAriaId",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Optional id for aria-DescribedBy"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabelledById": {
          "kind": "property",
          "signature": "ariaLabelledById?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Pass through via "
            },
            {
              "kind": "code",
              "text": "modalProps.titleAriaId",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Optional id for aria-LabelledBy"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Pass through via "
            },
            {
              "kind": "code",
              "text": "modalProps.className",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead"
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Optional class name to be added to the root class"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IDialog>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IDialog>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IDialog interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "containerClassName": {
          "kind": "property",
          "signature": "containerClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Pass through via "
            },
            {
              "kind": "code",
              "text": "modalProps.className",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead"
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Optional override for container class"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "contentClassName": {
          "kind": "property",
          "signature": "contentClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Pass through via "
            },
            {
              "kind": "code",
              "text": "dialogContentProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead as "
            },
            {
              "kind": "code",
              "text": "className",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Optional override content class"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dialogContentProps": {
          "kind": "property",
          "signature": "dialogContentProps?: IDialogContentProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IDialogContentProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Props to be passed through to Dialog Content"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hidden": {
          "kind": "property",
          "signature": "hidden?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the dialog is hidden."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isBlocking": {
          "kind": "property",
          "signature": "isBlocking?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Pass through via "
            },
            {
              "kind": "code",
              "text": "modalProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead"
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the dialog can be light dismissed by clicking outside the dialog (on the overlay)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDarkOverlay": {
          "kind": "property",
          "signature": "isDarkOverlay?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Pass through via "
            },
            {
              "kind": "code",
              "text": "modalProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead"
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the overlay is dark themed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isOpen": {
          "kind": "property",
          "signature": "isOpen?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "hidden",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead"
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the dialog is displayed. Deprecated, use "
            },
            {
              "kind": "code",
              "text": "hidden",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "maxWidth": {
          "kind": "property",
          "signature": "maxWidth?: ICSSRule | ICSSPixelUnitRule;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICSSRule | ICSSPixelUnitRule",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the maximum width for the dialog. It limits the width property to be larger than the value specified in max-width."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "minWidth": {
          "kind": "property",
          "signature": "minWidth?: ICSSRule | ICSSPixelUnitRule;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICSSRule | ICSSPixelUnitRule",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the minimum width of the dialog. It limits the width property to be not smaller than the value specified in min-width."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "modalProps": {
          "kind": "property",
          "signature": "modalProps?: IModalProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IModalProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Props to be passed through to Modal"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDismiss": {
          "kind": "property",
          "signature": "onDismiss?: (ev?: React.MouseEvent<HTMLButtonElement>) => any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLButtonElement>) => any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback function for when the Dialog is dismissed from the close button or light dismiss. Can also be specified separately in content and modal."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDismissed": {
          "kind": "property",
          "signature": "onDismissed?: () => any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => any",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Pass through via "
            },
            {
              "kind": "code",
              "text": "modalProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead"
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "A callback function which is called after the Dialog is dismissed and the animation is complete."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onLayerDidMount": {
          "kind": "property",
          "signature": "onLayerDidMount?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Pass through via "
            },
            {
              "kind": "code",
              "text": "modalProps instead",
              "highlighter": "plain"
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "A callback function for when the Dialog content is mounted on the overlay layer"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onLayerMounted": {
          "kind": "property",
          "signature": "onLayerMounted?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "onLayerDidMount",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated at 0.81.2, use "
            },
            {
              "kind": "code",
              "text": "onLayerDidMount",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IDialogStyleProps, IDialogStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IDialogStyleProps, IDialogStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "subText": {
          "kind": "property",
          "signature": "subText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Pass through via "
            },
            {
              "kind": "code",
              "text": "dialogContentProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "The subtext to display in the dialog."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by HOC."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "title": {
          "kind": "property",
          "signature": "title?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Pass through via "
            },
            {
              "kind": "code",
              "text": "dialogContentProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "The title text to display at the top of the dialog."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "topButtonsProps": {
          "kind": "property",
          "signature": "topButtonsProps?: IButtonProps[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IButtonProps[]",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Pass through via "
            },
            {
              "kind": "code",
              "text": "dialogContentProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Other top buttons that will show up next to the close button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "type": {
          "kind": "property",
          "signature": "type?: DialogType;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DialogType",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Pass through via "
            },
            {
              "kind": "code",
              "text": "dialogContentProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "The type of Dialog to display."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDialogState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "hasBeenOpened": {
          "kind": "property",
          "signature": "hasBeenOpened?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "id": {
          "kind": "property",
          "signature": "id?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isOpen": {
          "kind": "property",
          "signature": "isOpen?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isVisible": {
          "kind": "property",
          "signature": "isVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isVisibleClose": {
          "kind": "property",
          "signature": "isVisibleClose?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "modalRectangleTop": {
          "kind": "property",
          "signature": "modalRectangleTop?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDialogStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept custom classNames"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "containerClassName": {
          "kind": "property",
          "signature": "containerClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Pass through via "
            },
            {
              "kind": "code",
              "text": "modalProps.className",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Optional override for container class"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "contentClassName": {
          "kind": "property",
          "signature": "contentClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Pass through via "
            },
            {
              "kind": "code",
              "text": "dialogContentProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead as "
            },
            {
              "kind": "code",
              "text": "className",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Optional override content class"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dialogDefaultMaxWidth": {
          "kind": "property",
          "signature": "dialogDefaultMaxWidth?: string | ICSSRule | ICSSPixelUnitRule;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | ICSSRule | ICSSPixelUnitRule",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Default max-width for the dialog box."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dialogDefaultMinWidth": {
          "kind": "property",
          "signature": "dialogDefaultMinWidth?: string | ICSSRule | ICSSPixelUnitRule;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | ICSSRule | ICSSPixelUnitRule",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Default min-width for the dialog box."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hidden": {
          "kind": "property",
          "signature": "hidden?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the dialog is hidden."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept theme prop."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDialogStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "main": {
          "kind": "property",
          "signature": "main: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDisposable": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Disposable interface."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "dispose": {
          "kind": "property",
          "signature": "dispose: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDividerAsProps": {
      "kind": "interface",
      "extends": "IIconProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "item": {
          "kind": "property",
          "signature": "item?: IBreadcrumbItem;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IBreadcrumbItem",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional breadcrumb item corresponds to left of the divider to be passed for custom rendering. For overflowed items, it will be last item in the list"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDocumentCard": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IDocumentCardActionsProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "actions": {
          "kind": "property",
          "signature": "actions: IButtonProps[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IButtonProps[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The actions available for this document."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<{}>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<{}>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "views": {
          "kind": "property",
          "signature": "views?: Number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The number of views this document has received."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDocumentCardActivityPerson": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "allowPhoneInitials": {
          "kind": "property",
          "signature": "allowPhoneInitials?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether initials are calculated for phone numbers and number sequences. Example: Set property to true to get initials for project names consisting of numbers only."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "initials": {
          "kind": "property",
          "signature": "initials?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The user's initials to display in the profile photo area when there is no image."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "initialsColor": {
          "kind": "property",
          "signature": "initialsColor?: PersonaInitialsColor;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PersonaInitialsColor",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background color when the user's initials are displayed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "name": {
          "kind": "property",
          "signature": "name: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The name of the person."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "profileImageSrc": {
          "kind": "property",
          "signature": "profileImageSrc: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Path to the profile photo of the person."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDocumentCardActivityProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "activity": {
          "kind": "property",
          "signature": "activity: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Describes the activity that has taken place, such as \"Created Feb 23, 2016\"."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<{}>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<{}>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "people": {
          "kind": "property",
          "signature": "people: IDocumentCardActivityPerson[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IDocumentCardActivityPerson[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "One or more people who are involved in this activity."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDocumentCardLocationProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria label for the link to the document location."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<{}>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<{}>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "location": {
          "kind": "property",
          "signature": "location: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Text for the location of the document."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "locationHref": {
          "kind": "property",
          "signature": "locationHref?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "URL to navigate to for this location."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onClick": {
          "kind": "property",
          "signature": "onClick?: (ev?: React.MouseEvent<HTMLElement>) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLElement>) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function to call when the location is clicked."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDocumentCardLogoProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<{}>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<{}>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "logoIcon": {
          "kind": "property",
          "signature": "logoIcon: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Describes DocumentCard Logo badge."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "logoName": {
          "kind": "property",
          "signature": "logoName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Describe Logo name, optional."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDocumentCardPreviewImage": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "accentColor": {
          "kind": "property",
          "signature": "accentColor?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "To be removed at v5.0.0."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Hex color value of the line below the preview, which should correspond to the document type."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Deprecated at v4.17.1, to be removed at >= v5.0.0."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<{}>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<{}>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "errorImageSrc": {
          "kind": "property",
          "signature": "errorImageSrc?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "To be removed at v2.0.0."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated at v1.3.6, to be removed at >= v2.0.0."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "height": {
          "kind": "property",
          "signature": "height?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If provided, forces the preview image to be this height."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconSrc": {
          "kind": "property",
          "signature": "iconSrc?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Path to the icon associated with this document type."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "imageFit": {
          "kind": "property",
          "signature": "imageFit?: ImageFit;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ImageFit",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used to determine how to size the image to fit the dimensions of the component. If both dimensions are provided, then the image is fit using ImageFit.scale, otherwise ImageFit.none is used."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "linkProps": {
          "kind": "property",
          "signature": "linkProps?: ILinkProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ILinkProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Props to pass to Link component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "name": {
          "kind": "property",
          "signature": "name?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "File name for the document this preview represents."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "previewIconContainerClass": {
          "kind": "property",
          "signature": "previewIconContainerClass?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The props for the preview icon container classname. If provided, icon container classname will be used.."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "previewIconProps": {
          "kind": "property",
          "signature": "previewIconProps?: IIconProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IIconProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The props for the preview icon. If provided, icon will be rendered instead of image."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "previewImageSrc": {
          "kind": "property",
          "signature": "previewImageSrc?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Path to the preview image."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "url": {
          "kind": "property",
          "signature": "url?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "href",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " inside of "
            },
            {
              "kind": "code",
              "text": "linkProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "URL to view the file."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "width": {
          "kind": "property",
          "signature": "width?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If provided, forces the preview image to be this width."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDocumentCardPreviewProps": {
      "kind": "interface",
      "extends": "IBaseProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<{}>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<{}>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getOverflowDocumentCountText": {
          "kind": "property",
          "signature": "getOverflowDocumentCountText?: (overflowCount: number) => string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(overflowCount: number) => string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The function return string that will describe the number of overflow documents. such as (overflowCount: number) => "
            },
            {
              "kind": "code",
              "text": "+${ overflowCount } more",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": ","
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "previewImages": {
          "kind": "property",
          "signature": "previewImages: IDocumentCardPreviewImage[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IDocumentCardPreviewImage[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "One or more preview images to display."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDocumentCardProps": {
      "kind": "interface",
      "extends": "IBaseProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "accentColor": {
          "kind": "property",
          "signature": "accentColor?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "To be removed at v5.0.0."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Hex color value of the line below the card, which should correspond to the document type. This should only be supplied when using the 'compact' card layout."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Deprecated at v4.17.1, to be removed at >= v5.0.0."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional class for document card."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IDocumentCard>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IDocumentCard>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IDocumentCard interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onClick": {
          "kind": "property",
          "signature": "onClick?: (ev?: React.SyntheticEvent<HTMLElement>) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.SyntheticEvent<HTMLElement>) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function to call when the card is clicked or keyboard Enter/Space is pushed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onClickHref": {
          "kind": "property",
          "signature": "onClickHref?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A URL to navigate to when the card is clicked. If a function has also been provided, it will be used instead of the URL."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "type": {
          "kind": "property",
          "signature": "type?: DocumentCardType;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DocumentCardType",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The type of DocumentCard to display."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDocumentCardStatusProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<{}>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<{}>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "status": {
          "kind": "property",
          "signature": "status: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Describe status information. Required field."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "statusIcon": {
          "kind": "property",
          "signature": "statusIcon?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Describes DocumentCard status icon."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDocumentCardTitleProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<{}>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<{}>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shouldTruncate": {
          "kind": "property",
          "signature": "shouldTruncate?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether we truncate the title to fit within the box. May have a performance impact."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showAsSecondaryTitle": {
          "kind": "property",
          "signature": "showAsSecondaryTitle?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether show as title as secondary title style such as smaller font and lighter color."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "title": {
          "kind": "property",
          "signature": "title: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Title text. If the card represents more than one document, this should be the title of one document and a \"+X\" string. For example, a collection of four documents would have a string of \"Document.docx +3\"."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDocumentCardTitleState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "truncatedTitleFirstPiece": {
          "kind": "property",
          "signature": "truncatedTitleFirstPiece?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "truncatedTitleSecondPiece": {
          "kind": "property",
          "signature": "truncatedTitleSecondPiece?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDropdown": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focus": {
          "kind": "property",
          "signature": "focus: (shouldOpenOnFocus?: boolean) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(shouldOpenOnFocus?: boolean) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDropdownInternalProps": {
      "kind": "interface",
      "extends": "IDropdownProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IDropdownOption": {
      "kind": "interface",
      "extends": "ISelectableOption",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "isSelected": {
          "kind": "property",
          "signature": "isSelected?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "selected",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated at v.65.1, use "
            },
            {
              "kind": "code",
              "text": "selected",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDropdownProps": {
      "kind": "interface",
      "extends": "ISelectableDroppableTextProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "defaultSelectedKeys": {
          "kind": "property",
          "signature": "defaultSelectedKeys?: string[] | number[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string[] | number[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Keys that will be initially used to set selected items."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dropdownWidth": {
          "kind": "property",
          "signature": "dropdownWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom width for dropdown. If value is 0, width of the input field is used."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDisabled": {
          "kind": "property",
          "signature": "isDisabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "disabled",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated at v0.52.0, use "
            },
            {
              "kind": "code",
              "text": "disabled",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "keytipProps": {
          "kind": "property",
          "signature": "keytipProps?: IKeytipProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IKeytipProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional keytip for this dropdown"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "multiSelect": {
          "kind": "property",
          "signature": "multiSelect?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional mode indicates if multi-choice selections is allowed. Default to false"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "multiSelectDelimiter": {
          "kind": "property",
          "signature": "multiSelectDelimiter?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "When multiple items are selected, this still will be used to separate values in the dropdown title."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "notifyOnReselect": {
          "kind": "property",
          "signature": "notifyOnReselect?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional preference to have onChanged still be called when an already selected item is clicked in single select mode. Default to false"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChange": {
          "kind": "property",
          "signature": "onChange?: (event: React.FormEvent<HTMLDivElement>, option?: IDropdownOption, index?: number) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(event: React.FormEvent<HTMLDivElement>, option?: IDropdownOption, index?: number) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback issued when the selected option changes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChanged": {
          "kind": "property",
          "signature": "onChanged?: (option: IDropdownOption, index?: number) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(option: IDropdownOption, index?: number) => void",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "onChange",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDismiss": {
          "kind": "property",
          "signature": "onDismiss?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback issues when the options callout is dismissed"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderCaretDown": {
          "kind": "property",
          "signature": "onRenderCaretDown?: IRenderFunction<IDropdownProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IDropdownProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom renderer for chevron icon"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderPlaceHolder": {
          "kind": "property",
          "signature": "onRenderPlaceHolder?: IRenderFunction<IDropdownProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IDropdownProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom renderer for placeholder text"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderTitle": {
          "kind": "property",
          "signature": "onRenderTitle?: IRenderFunction<IDropdownOption | IDropdownOption[]>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IDropdownOption | IDropdownOption[]>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom renderer for selected option displayed in input"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "options": {
          "kind": "property",
          "signature": "options: IDropdownOption[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IDropdownOption[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Options for the dropdown."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "placeHolder": {
          "kind": "property",
          "signature": "placeHolder?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Input placeholder text. Displayed until option is selected."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "responsiveMode": {
          "kind": "property",
          "signature": "responsiveMode?: ResponsiveMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ResponsiveMode",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedKeys": {
          "kind": "property",
          "signature": "selectedKeys?: string[] | number[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string[] | number[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Keys of the selected items. If you provide this, you must maintain selection state by observing onChange events and passing a new value in when changed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IDropdownStyleProps, IDropdownStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IDropdownStyleProps, IDropdownStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by higher order component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDropdownState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "calloutRenderEdge": {
          "kind": "property",
          "signature": "calloutRenderEdge?: RectangleEdge;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "RectangleEdge",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hasFocus": {
          "kind": "property",
          "signature": "hasFocus: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the root dropdown element has focus."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isOpen": {
          "kind": "property",
          "signature": "isOpen: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedIndices": {
          "kind": "property",
          "signature": "selectedIndices: number[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDropdownStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Represents the stylable areas of the control."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "callout": {
          "kind": "property",
          "signature": "callout: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Refers to the callout that hosts Dropdown options in larger viewports."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "caretDown": {
          "kind": "property",
          "signature": "caretDown: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Refers to the downward pointing caret icon users click on to expand the Dropdown."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "caretDownWrapper": {
          "kind": "property",
          "signature": "caretDownWrapper: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Refers to the wrapping container around the downward pointing caret users click on to expand the Dropdown."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dropdown": {
          "kind": "property",
          "signature": "dropdown: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Refers to the actual Dropdown element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dropdownDivider": {
          "kind": "property",
          "signature": "dropdownDivider: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Refers to the dropdown seperator."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dropdownItem": {
          "kind": "property",
          "signature": "dropdownItem: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Refers to the individual dropdown item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dropdownItemDisabled": {
          "kind": "property",
          "signature": "dropdownItemDisabled: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for a dropdown item when it is disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dropdownItemHeader": {
          "kind": "property",
          "signature": "dropdownItemHeader: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Refers to the individual dropdown items that are being rendered as a header."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dropdownItems": {
          "kind": "property",
          "signature": "dropdownItems: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Refers to the FocusZone wrapping the individual dropdown items."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dropdownItemSelected": {
          "kind": "property",
          "signature": "dropdownItemSelected: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for a dropdown item when it is being selected."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dropdownItemSelectedAndDisabled": {
          "kind": "property",
          "signature": "dropdownItemSelectedAndDisabled: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for a dropdown item when it is both selected and disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dropdownItemsWrapper": {
          "kind": "property",
          "signature": "dropdownItemsWrapper: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Refers to the element that wraps "
            },
            {
              "kind": "code",
              "text": "dropdownItems",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dropdownOptionText": {
          "kind": "property",
          "signature": "dropdownOptionText: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Refers to the text element that renders the actual dropdown item/option text. This would be wrapped by the element referred to by "
            },
            {
              "kind": "code",
              "text": "dropdownItem",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "errorMessage": {
          "kind": "property",
          "signature": "errorMessage: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Refers to the error message being rendered under the Dropdown (if any)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Refers to the label associated with the dropdown. This is enclosed by the root."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "panel": {
          "kind": "property",
          "signature": "panel: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Refers to the panel that hosts the Dropdown options in small viewports. Note: This will be deprecated when Panel supports JS Styling."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Root element of the Dropdown (includes Label and the actual Dropdown)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "subComponentStyles": {
          "kind": "property",
          "signature": "subComponentStyles: IDropdownSubComponentStyles;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IDropdownSubComponentStyles",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Subcomponent styles."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "title": {
          "kind": "property",
          "signature": "title: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Refers to the primary title of the Dropdown (rendering the selected options/placeholder/etc.)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IDropdownSubComponentStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "label": {
          "kind": "property",
          "signature": "label: IStyleFunctionOrObject<ILabelStyleProps, any>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<ILabelStyleProps, any>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Refers to the primary label for the Dropdown."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IEntityRect": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "An interface for the cached dimensions of entity inner host."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "height": {
          "kind": "property",
          "signature": "height: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "width": {
          "kind": "property",
          "signature": "width: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IExpandingCard": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IExpandingCardProps": {
      "kind": "interface",
      "extends": "IBaseCardProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "ExpandingCard component props."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "compactCardHeight": {
          "kind": "property",
          "signature": "compactCardHeight?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Height of compact card"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "expandedCardHeight": {
          "kind": "property",
          "signature": "expandedCardHeight?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Height of expanded card"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "mode": {
          "kind": "property",
          "signature": "mode?: ExpandingCardMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ExpandingCardMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Use to open the card in expanded format and not wait for the delay"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderCompactCard": {
          "kind": "property",
          "signature": "onRenderCompactCard?: IRenderFunction<IExpandingCardProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IExpandingCardProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Render function to populate compact content area"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderExpandedCard": {
          "kind": "property",
          "signature": "onRenderExpandedCard?: IRenderFunction<IExpandingCardProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IExpandingCardProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Render function to populate expanded content area"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IExpandingCardState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "firstFrameRendered": {
          "kind": "property",
          "signature": "firstFrameRendered: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "needsScroll": {
          "kind": "property",
          "signature": "needsScroll: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IExpandingCardStyleProps": {
      "kind": "interface",
      "extends": "IBaseCardStyleProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "compactCardHeight": {
          "kind": "property",
          "signature": "compactCardHeight?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Height of the compact section of the card."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "expandedCardFirstFrameRendered": {
          "kind": "property",
          "signature": "expandedCardFirstFrameRendered?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Boolean flag that expanded card is in Expanded.mode === expanded && first frame was rendered."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "expandedCardHeight": {
          "kind": "property",
          "signature": "expandedCardHeight?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Height of the expanded section of the card."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "needsScroll": {
          "kind": "property",
          "signature": "needsScroll?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the content of the expanded card overflows vertically."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IExpandingCardStyles": {
      "kind": "interface",
      "extends": "IBaseCardStyles",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "compactCard": {
          "kind": "property",
          "signature": "compactCard?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the main card element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "expandedCard": {
          "kind": "property",
          "signature": "expandedCard?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Base Style for the expanded card content."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "expandedCardScroll": {
          "kind": "property",
          "signature": "expandedCardScroll?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the expanded card scroll content."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IExtendedPeoplePickerProps": {
      "kind": "interface",
      "extends": "IBaseExtendedPickerProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IExtendedPersonaProps": {
      "kind": "interface",
      "extends": "IPersonaProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "blockRecipientRemoval": {
          "kind": "property",
          "signature": "blockRecipientRemoval?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "canExpand": {
          "kind": "property",
          "signature": "canExpand?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isEditing": {
          "kind": "property",
          "signature": "isEditing?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isValid": {
          "kind": "property",
          "signature": "isValid: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shouldBlockSelection": {
          "kind": "property",
          "signature": "shouldBlockSelection?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IFabricProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<{}>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<{}>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IFabricStyleProps, IFabricStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IFabricStyleProps, IFabricStyles>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IFabricStyleProps": {
      "kind": "interface",
      "extends": "IFabricProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "isFocusVisible": {
          "kind": "property",
          "signature": "isFocusVisible: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IFabricStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IFacepile": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IFacepilePersona": {
      "kind": "interface",
      "extends": "React.ButtonHTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "allowPhoneInitials": {
          "kind": "property",
          "signature": "allowPhoneInitials?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether initials are calculated for phone numbers and number sequences. Example: Set property to true to get initials for project names consisting of numbers only."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "data": {
          "kind": "property",
          "signature": "data?: any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Extra data - not used directly but can be handy for passing additional data to custom event handlers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "imageInitials": {
          "kind": "property",
          "signature": "imageInitials?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The user's initials to display in the image area when there is no image."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "imageUrl": {
          "kind": "property",
          "signature": "imageUrl?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Url to the image to use, should be a square aspect ratio and big enough to fit in the image area."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "initialsColor": {
          "kind": "property",
          "signature": "initialsColor?: PersonaInitialsColor;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PersonaInitialsColor",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background color when the user's initials are displayed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onClick": {
          "kind": "property",
          "signature": "onClick?: (ev?: React.MouseEvent<HTMLElement>, persona?: IFacepilePersona) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLElement>, persona?: IFacepilePersona) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If provided, persona will be rendered with cursor:pointer and the handler will be called on click."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onMouseMove": {
          "kind": "property",
          "signature": "onMouseMove?: (ev?: React.MouseEvent<HTMLElement>, persona?: IFacepilePersona) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLElement>, persona?: IFacepilePersona) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If provided, the handler will be called on mouse move."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onMouseOut": {
          "kind": "property",
          "signature": "onMouseOut?: (ev?: React.MouseEvent<HTMLElement>, persona?: IFacepilePersona) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLElement>, persona?: IFacepilePersona) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If provided, the handler will be called when mouse moves out of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "personaName": {
          "kind": "property",
          "signature": "personaName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Name of the person."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IFacepileProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "addButtonProps": {
          "kind": "property",
          "signature": "addButtonProps?: IButtonProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IButtonProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Button properties for the add face button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaDescription": {
          "kind": "property",
          "signature": "ariaDescription?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "ARIA label for persona list"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "chevronButtonProps": {
          "kind": "property",
          "signature": "chevronButtonProps?: IButtonProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IButtonProps",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "overflowButtonProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated at v0.70, use "
            },
            {
              "kind": "code",
              "text": "overflowButtonProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional css class to apply to the Facepile"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IFacepile>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IFacepile>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IFacepile interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getPersonaProps": {
          "kind": "property",
          "signature": "getPersonaProps?: (persona: IFacepilePersona) => IPersonaSharedProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(persona: IFacepilePersona) => IPersonaSharedProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Method to access properties on the underlying Persona control"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "maxDisplayablePersonas": {
          "kind": "property",
          "signature": "maxDisplayablePersonas?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Maximum number of personas to show"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "overflowButtonProps": {
          "kind": "property",
          "signature": "overflowButtonProps?: IButtonProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IButtonProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Properties for the overflow icon"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "overflowButtonType": {
          "kind": "property",
          "signature": "overflowButtonType?: OverflowButtonType;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "OverflowButtonType",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Type of overflow icon to use"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "overflowPersonas": {
          "kind": "property",
          "signature": "overflowPersonas?: IFacepilePersona[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IFacepilePersona[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Personas to place in the overflow"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "personas": {
          "kind": "property",
          "signature": "personas: IFacepilePersona[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IFacepilePersona[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Array of IPersonaProps that define each Persona."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "personaSize": {
          "kind": "property",
          "signature": "personaSize?: PersonaSize;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PersonaSize",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Size to display the personas"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showAddButton": {
          "kind": "property",
          "signature": "showAddButton?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Show add person button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IFacepileStyleProps, IFacepileStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IFacepileStyleProps, IFacepileStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IFacepileStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept custom classNames"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "spacingAroundItemButton": {
          "kind": "property",
          "signature": "spacingAroundItemButton?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Pixel value for spacing around button. Number value set in pixels"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IFacepileStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "addButton": {
          "kind": "property",
          "signature": "addButton: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "descriptiveOverflowButton": {
          "kind": "property",
          "signature": "descriptiveOverflowButton: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "itemButton": {
          "kind": "property",
          "signature": "itemButton: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "itemContainer": {
          "kind": "property",
          "signature": "itemContainer: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "member": {
          "kind": "property",
          "signature": "member: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "members": {
          "kind": "property",
          "signature": "members: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "overflowButton": {
          "kind": "property",
          "signature": "overflowButton: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "overflowInitialsIcon": {
          "kind": "property",
          "signature": "overflowInitialsIcon: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "screenReaderOnly": {
          "kind": "property",
          "signature": "screenReaderOnly: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IFitContentToBoundsOptions": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Options for fitting content sizes into bounding sizes."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "boundsSize": {
          "kind": "property",
          "signature": "boundsSize: ISize;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISize",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The size of the bounds."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "contentSize": {
          "kind": "property",
          "signature": "contentSize: ISize;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISize",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The size of the content to fit to the bounds. The output will be proportional to this value."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "maxScale": {
          "kind": "property",
          "signature": "maxScale?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An optional maximum scale factor to apply. The default is 1. Use Infinity for an unbounded resize."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "mode": {
          "kind": "property",
          "signature": "mode: FitMode;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "FitMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The fit mode to apply, either 'contain' or 'cover'."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IFocusTrapZone": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focus": {
          "kind": "property",
          "signature": "focus: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to a descendant in the Trap Zone. See firstFocusableSelector and focusPreviouslyFocusedInnerElement for details."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IFocusTrapZoneProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabelledBy": {
          "kind": "property",
          "signature": "ariaLabelledBy?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the aria-labelledby attribute."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IFocusTrapZone>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IFocusTrapZone>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IFocusTrapZone interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disableFirstFocus": {
          "kind": "property",
          "signature": "disableFirstFocus?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Do not put focus onto first element when render focus trap zone"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "elementToFocusOnDismiss": {
          "kind": "property",
          "signature": "elementToFocusOnDismiss?: HTMLElement;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "HTMLElement",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the HTMLElement to focus on when exiting the FocusTrapZone."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "firstFocusableSelector": {
          "kind": "property",
          "signature": "firstFocusableSelector?: string | (() => string);",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | (() => string)",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates the selector for first focusable item. Only applies if focusPreviouslyFocusedInnerElement == false."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focusPreviouslyFocusedInnerElement": {
          "kind": "property",
          "signature": "focusPreviouslyFocusedInnerElement?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Specifies the algorithm used to determine which descendant element to focus when focus() is called. If false, the first focusable descendant, filtered by the firstFocusableSelector property if present, is chosen. If true, the element that was focused when the Trap Zone last had a focused descendant is chosen. If it has never had a focused descendant before, behavior falls back to the first focused descendant."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "forceFocusInsideTrap": {
          "kind": "property",
          "signature": "forceFocusInsideTrap?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates whether focus trap zone should force focus inside the focus trap zone"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ignoreExternalFocusing": {
          "kind": "property",
          "signature": "ignoreExternalFocusing?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates if this Trap Zone will ignore keeping track of HTMLElement that activated the Zone."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isClickableOutsideFocusTrap": {
          "kind": "property",
          "signature": "isClickableOutsideFocusTrap?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates if this Trap Zone will allow clicks outside the FocusTrapZone"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IFocusZone": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "FocusZone component class interface."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focus": {
          "kind": "method",
          "signature": "focus(forceIntoFirstElement?: boolean): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "True if focus could be set to an active element, false if no operation was taken."
              }
            ]
          },
          "parameters": {
            "forceIntoFirstElement": {
              "name": "forceIntoFirstElement",
              "description": [
                {
                  "kind": "text",
                  "text": "If true, focus will be forced into the first element, even if focus is already in the focus zone."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the first tabbable item in the zone."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "focusElement": {
          "kind": "method",
          "signature": "focusElement(childElement?: HTMLElement): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "True if focus could be set to an active element, false if no operation was taken."
              }
            ]
          },
          "parameters": {
            "childElement": {
              "name": "childElement",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "HTMLElement"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to a specific child element within the zone. This can be used in conjunction with onBeforeFocus to created delayed focus scenarios (like animate the scroll position to the correct location and then focus.)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "IFocusZoneProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "FocusZone component props."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "allowFocusRoot": {
          "kind": "property",
          "signature": "allowFocusRoot?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Allow focus to move to root"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "allowTabKey": {
          "kind": "property",
          "signature": "allowTabKey?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "handleTabKey",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Allows tab key to be handled to tab through a list of items in the focus zone, an unfortunate side effect is that users will not be able to tab out of the focus zone and have to hit escape or some other key."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaDescribedBy": {
          "kind": "property",
          "signature": "ariaDescribedBy?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the aria-describedby attribute."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabelledBy": {
          "kind": "property",
          "signature": "ariaLabelledBy?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the aria-labelledby attribute."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "checkForNoWrap": {
          "kind": "property",
          "signature": "checkForNoWrap?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the to check for data-no-horizontal-wrap or data-no-vertical-wrap attributes when determining how to move focus"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional class name to provide on the root element, in addition to the ms-FocusZone class."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IFocusZone>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IFocusZone>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IFocusZone interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "defaultActiveElement": {
          "kind": "property",
          "signature": "defaultActiveElement?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optionally provide a selector for identifying the intial active element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "direction": {
          "kind": "property",
          "signature": "direction?: FocusZoneDirection;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "FocusZoneDirection",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines which arrows to react to."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If set, the FocusZone will not be tabbable and keyboard navigation will be disabled. This does not affect disabled attribute of any child."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "doNotAllowFocusEventToPropagate": {
          "kind": "property",
          "signature": "doNotAllowFocusEventToPropagate?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the FocusZone should allow focus events to propagate past the FocusZone"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "elementType": {
          "kind": "property",
          "signature": "elementType?: keyof React.ReactHTML;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "keyof React.ReactHTML",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Element type the root element will use. Default is \"div\"."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "handleTabKey": {
          "kind": "property",
          "signature": "handleTabKey?: FocusZoneTabbableElements;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "FocusZoneTabbableElements",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Allows tab key to be handled to tab through a list of items in the focus zone, an unfortunate side effect is that users will not be able to tab out of the focus zone and have to hit escape or some other key."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isCircularNavigation": {
          "kind": "property",
          "signature": "isCircularNavigation?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If set, will cycle to the beginning of the targets once the user navigates to the next target while at the end, and to the end when navigate to the previous at the beginning."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isInnerZoneKeystroke": {
          "kind": "property",
          "signature": "isInnerZoneKeystroke?: (ev: React.KeyboardEvent<HTMLElement>) => boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.KeyboardEvent<HTMLElement>) => boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If provided, this callback will be executed on keypresses to determine if the user intends to navigate into the inner zone. Returning true will ask the first inner zone to set focus."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onActiveElementChanged": {
          "kind": "property",
          "signature": "onActiveElementChanged?: (element?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(element?: HTMLElement, ev?: React.FocusEvent<HTMLElement>) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when one of immediate children elements gets active by getting focused or by having one of its respective children elements focused."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onBeforeFocus": {
          "kind": "property",
          "signature": "onBeforeFocus?: (childElement?: HTMLElement) => boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(childElement?: HTMLElement) => boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback method for determining if focus should indeed be set on the given element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onFocusNotification": {
          "kind": "property",
          "signature": "onFocusNotification?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback to notify creators that focus has been set on the FocusZone"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootProps": {
          "kind": "property",
          "signature": "rootProps?: React.HTMLAttributes<HTMLDivElement>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.HTMLAttributes<HTMLDivElement>",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "DIV props provided to the FocusZone will be mixed into the root element."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated at v1.12.1. DIV props provided to the FocusZone will be mixed into the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shouldInputLoseFocusOnArrowKey": {
          "kind": "property",
          "signature": "shouldInputLoseFocusOnArrowKey?: (inputElement: HTMLInputElement) => boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(inputElement: HTMLInputElement) => boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback method to determine if the input element should lose focus on arrow keys"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IFontFace": {
      "kind": "interface",
      "extends": "IRawFontStyle",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Font face definition."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "fontFeatureSettings": {
          "kind": "property",
          "signature": "fontFeatureSettings?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Feature settings for the font."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "src": {
          "kind": "property",
          "signature": "src?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Specifies the src of the font."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "unicodeRange": {
          "kind": "property",
          "signature": "unicodeRange?: ICSSRule | string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICSSRule | string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "unicode-range allows you to set a specific range of characters to be downloaded from a font (embedded using @font-face) and made available for use on the current page."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IFontStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "UI Fabric font set."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "large": {
          "kind": "property",
          "signature": "large: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "medium": {
          "kind": "property",
          "signature": "medium: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "mediumPlus": {
          "kind": "property",
          "signature": "mediumPlus: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "mega": {
          "kind": "property",
          "signature": "mega: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "small": {
          "kind": "property",
          "signature": "small: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "smallPlus": {
          "kind": "property",
          "signature": "smallPlus: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "superLarge": {
          "kind": "property",
          "signature": "superLarge: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "tiny": {
          "kind": "property",
          "signature": "tiny: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "xLarge": {
          "kind": "property",
          "signature": "xLarge: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "xSmall": {
          "kind": "property",
          "signature": "xSmall: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "xxLarge": {
          "kind": "property",
          "signature": "xxLarge: IRawStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IGap": {
      "kind": "interface",
      "extends": "IShimmerElement",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "height": {
          "kind": "property",
          "signature": "height?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the height of the shimmer gap in pixels."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "width": {
          "kind": "property",
          "signature": "width?: number | string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gap width value."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IGenericItem": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "imageInitials": {
          "kind": "property",
          "signature": "imageInitials: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryText": {
          "kind": "property",
          "signature": "primaryText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ValidationState": {
          "kind": "property",
          "signature": "ValidationState: ValidationState;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ValidationState",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IGrid": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IGridCellProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "cellDisabledStyle": {
          "kind": "property",
          "signature": "cellDisabledStyle?: string[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, the CSS class used for when the cell is disabled"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "cellIsSelectedStyle": {
          "kind": "property",
          "signature": "cellIsSelectedStyle?: string[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, the CSS class used for when the cell is selected"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, className(s) to apply"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, if the this option should be diabled"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getClassNames": {
          "kind": "property",
          "signature": "getClassNames?: (theme: ITheme, className: string, variantClassName: string, iconClassName: string | undefined, menuIconClassName: string | undefined, disabled: boolean, checked: boolean, expanded: boolean, isSplit: boolean | undefined) => IButtonClassNames;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(theme: ITheme, className: string, variantClassName: string, iconClassName: string | undefined, menuIconClassName: string | undefined, disabled: boolean, checked: boolean, expanded: boolean, isSplit: boolean | undefined) => IButtonClassNames",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Method to provide the classnames to style a button. The default value for this prop is the getClassnames func defined in BaseButton.classnames."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "id": {
          "kind": "property",
          "signature": "id: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Arbitrary unique string associated with this option"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "index": {
          "kind": "property",
          "signature": "index?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Index for this option"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "item": {
          "kind": "property",
          "signature": "item: T;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "T",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The option that will be made available to the user"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The label for this item. Visible text if this item is a header, tooltip if is this item is normal"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onClick": {
          "kind": "property",
          "signature": "onClick?: (item: T) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: T) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The on click handler"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onFocus": {
          "kind": "property",
          "signature": "onFocus?: (item: T) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: T) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, the onFocus handler"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onHover": {
          "kind": "property",
          "signature": "onHover?: (item?: T) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item?: T) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, the onHover handler"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onKeyDown": {
          "kind": "property",
          "signature": "onKeyDown?: (ev: React.KeyboardEvent<HTMLButtonElement>) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.KeyboardEvent<HTMLButtonElement>) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, onkeydown handler"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onMouseEnter": {
          "kind": "property",
          "signature": "onMouseEnter?: (ev: React.MouseEvent<HTMLButtonElement>) => boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.MouseEvent<HTMLButtonElement>) => boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, mouseEnter handler."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onMouseLeave": {
          "kind": "property",
          "signature": "onMouseLeave?: (ev: React.MouseEvent<HTMLButtonElement>) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.MouseEvent<HTMLButtonElement>) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, mouseLeave handler"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onMouseMove": {
          "kind": "property",
          "signature": "onMouseMove?: (ev: React.MouseEvent<HTMLButtonElement>) => boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.MouseEvent<HTMLButtonElement>) => boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, mouseMove handler"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderItem": {
          "kind": "property",
          "signature": "onRenderItem: (item: T) => JSX.Element;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: T) => JSX.Element",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The render callback to handle rendering the item"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onWheel": {
          "kind": "property",
          "signature": "onWheel?: (ev: React.MouseEvent<HTMLButtonElement>) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.MouseEvent<HTMLButtonElement>) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, onWheel handler"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "role": {
          "kind": "property",
          "signature": "role?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The accessible role for this option"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selected": {
          "kind": "property",
          "signature": "selected?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, if the cell is currently selected"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IGridProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "columnCount": {
          "kind": "property",
          "signature": "columnCount: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The number of columns"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IGrid>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IGrid>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "containerClassName": {
          "kind": "property",
          "signature": "containerClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "styles",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " and "
            },
            {
              "kind": "code",
              "text": "IGridStyles",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " to define a styling for the focus zone container with focusedContainer property."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, class name for the FocusZone container for the grid"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "doNotContainWithinFocusZone": {
          "kind": "property",
          "signature": "doNotContainWithinFocusZone?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true do not contain the grid inside of a FocusZone. If false contain the grid inside of a FocusZone."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "items": {
          "kind": "property",
          "signature": "items: any[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The items to turn into a grid"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onBlur": {
          "kind": "property",
          "signature": "onBlur?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, handler for when the grid should blur"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderItem": {
          "kind": "property",
          "signature": "onRenderItem: (item: any, index: number) => JSX.Element;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: any, index: number) => JSX.Element",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom renderer for the individual items"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "positionInSet": {
          "kind": "property",
          "signature": "positionInSet?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The optional position this grid is in the parent set (index in a parent menu, for example)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "setSize": {
          "kind": "property",
          "signature": "setSize?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The optional size of the parent set (size of parent menu, for example)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shouldFocusCircularNavigate": {
          "kind": "property",
          "signature": "shouldFocusCircularNavigate?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Boolean indicating if the focus should support circular navigation. This prop is only relevant if doNotcontainWithinFocusZone is not true"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IGridStyleProps, IGridStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IGridStyleProps, IGridStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional styles for the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme to apply to the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IGridStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Properties required to build the styles for the grid component."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme to apply to the grid"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IGridStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Styles for the Grid Component."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focusedContainer": {
          "kind": "property",
          "signature": "focusedContainer?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, style for the FocusZone container for the grid"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the table container of a grid."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "tableCell": {
          "kind": "property",
          "signature": "tableCell: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the table cells of the grid."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IGroup": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional accessibility label (aria-label) attribute that will be stamped on to the element. If none is specified, the arai-label attribute will contain the group name"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "children": {
          "kind": "property",
          "signature": "children?: IGroup[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IGroup[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Nested groups, if any."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "count": {
          "kind": "property",
          "signature": "count: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "How many items should be rendered within the group."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "data": {
          "kind": "property",
          "signature": "data?: any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Arbitrary data required to be preserved by the caller."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hasMoreData": {
          "kind": "property",
          "signature": "hasMoreData?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional flag to indicate the group has more data to load than the current group count indicated. This can be used to indicate that a plus should be rendered next to the group count in the header."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isCollapsed": {
          "kind": "property",
          "signature": "isCollapsed?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If all the items in the group are collapsed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDropEnabled": {
          "kind": "property",
          "signature": "isDropEnabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If drag/drop is enabled for the group header."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isSelected": {
          "kind": "property",
          "signature": "isSelected?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "At 1.0.0, selection state wil be controlled by the selection store only."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated at 1.0.0, selection state will be controled by the selection store only."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isShowingAll": {
          "kind": "property",
          "signature": "isShowingAll?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If the items within the group are summarized or showing all."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "key": {
          "kind": "property",
          "signature": "key: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Unique identifier for the group."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "level": {
          "kind": "property",
          "signature": "level?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Number indicating the level of nested groups."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "name": {
          "kind": "property",
          "signature": "name: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Display name for the group, rendered on the header."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "startIndex": {
          "kind": "property",
          "signature": "startIndex: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Start index for the group within the given items."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IGroupDividerProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<{}>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<{}>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "expandButtonProps": {
          "kind": "property",
          "signature": "expandButtonProps?: React.HTMLAttributes<HTMLButtonElement>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.HTMLAttributes<HTMLButtonElement>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Props for expand/collapse button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "footerText": {
          "kind": "property",
          "signature": "footerText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Text to display for the group footer."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "group": {
          "kind": "property",
          "signature": "group?: IGroup;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IGroup",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The group to be rendered by the header."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "groupIndex": {
          "kind": "property",
          "signature": "groupIndex?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The index of the group."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "groupLevel": {
          "kind": "property",
          "signature": "groupLevel?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The indent level of the group."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "groups": {
          "kind": "property",
          "signature": "groups?: IGroup[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IGroup[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Stores parent group's children."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "indentWidth": {
          "kind": "property",
          "signature": "indentWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Width corresponding to a single level. This is multiplied by the groupLevel to get the full spacer width for the group."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isCollapsedGroupSelectVisible": {
          "kind": "property",
          "signature": "isCollapsedGroupSelectVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Determines if the group selection check box is shown for collapsed groups."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isGroupLoading": {
          "kind": "property",
          "signature": "isGroupLoading?: (group: IGroup) => boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(group: IGroup) => boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback to determine if a group has missing items and needs to load them from the server."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isSelected": {
          "kind": "property",
          "signature": "isSelected?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "selected",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated at v.65.1 and will be removed by v 1.0. Use "
            },
            {
              "kind": "code",
              "text": "selected",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "loadingText": {
          "kind": "property",
          "signature": "loadingText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Text shown on group headers to indicate the group is being loaded."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onGroupHeaderClick": {
          "kind": "property",
          "signature": "onGroupHeaderClick?: (group: IGroup) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(group: IGroup) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when the group header is clicked."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderTitle": {
          "kind": "property",
          "signature": "onRenderTitle?: IRenderFunction<IGroupDividerProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IGroupDividerProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Override which allows the caller to provider a custom title."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onToggleCollapse": {
          "kind": "property",
          "signature": "onToggleCollapse?: (group: IGroup) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(group: IGroup) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when the group is expanded or collapsed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onToggleSelectGroup": {
          "kind": "property",
          "signature": "onToggleSelectGroup?: (group: IGroup) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(group: IGroup) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when the group is selected."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onToggleSummarize": {
          "kind": "property",
          "signature": "onToggleSummarize?: (group: IGroup) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(group: IGroup) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when the group \"Show All\" link is clicked"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selected": {
          "kind": "property",
          "signature": "selected?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If all items in the group are selected."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectionMode": {
          "kind": "property",
          "signature": "selectionMode?: SelectionMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SelectionMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The selection mode of the list the group lives within."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showAllLinkText": {
          "kind": "property",
          "signature": "showAllLinkText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Text to display for the group \"Show All\" link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "viewport": {
          "kind": "property",
          "signature": "viewport?: IViewport;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IViewport",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A reference to the viewport in which the header is rendered."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IGroupedList": {
      "kind": "interface",
      "extends": "IList",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "forceUpdate": {
          "kind": "property",
          "signature": "forceUpdate: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Ensures that the list content is updated. Call this in cases where the list prop updates don't change, but the list still needs to be re-evaluated. For example, if a sizer bar is adjusted and causes the list width to change, you can call this to force a re-evaluation. Be aware that this can be an expensive operation and should be done sparingly."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "toggleCollapseAll": {
          "kind": "property",
          "signature": "toggleCollapseAll: (allCollapsed: boolean) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(allCollapsed: boolean) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Toggles the collapsed state of all the groups in the list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IGroupedListProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional class name to add to the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IGroupedList>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IGroupedList>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IGroupedList interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dragDropEvents": {
          "kind": "property",
          "signature": "dragDropEvents?: IDragDropEvents;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IDragDropEvents",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Map of callback functions related to drag and drop functionality."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dragDropHelper": {
          "kind": "property",
          "signature": "dragDropHelper?: IDragDropHelper;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IDragDropHelper",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "helper to manage drag/drop across item and groups"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "eventsToRegister": {
          "kind": "property",
          "signature": "eventsToRegister?: {\n        eventName: string;\n        callback: (context: IDragDropContext, event?: any) => void;\n    }[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        eventName: string;\n        callback: (context: IDragDropContext, event?: any) => void;\n    }[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Event names and corresponding callbacks that will be registered to groups and rendered elements"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getGroupHeight": {
          "kind": "property",
          "signature": "getGroupHeight?: (group: IGroup, groupIndex: number) => number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(group: IGroup, groupIndex: number) => number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional function which will be called to estimate the height (in pixels) of the given group."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "By default, scrolling through a large virtualized GroupedList will often \"jump\" due to the order in which heights are calculated. For more details, see https://github.com/OfficeDev/office-ui-fabric-react/issues/5094"
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Pass this prop to ensure the list uses the computed height rather than cached DOM measurements, avoiding the scroll jumping issue."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "groupProps": {
          "kind": "property",
          "signature": "groupProps?: IGroupRenderProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IGroupRenderProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional override properties to render groups."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "groups": {
          "kind": "property",
          "signature": "groups?: IGroup[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IGroup[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional grouping instructions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "items": {
          "kind": "property",
          "signature": "items: any[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "List of items to render."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "listProps": {
          "kind": "property",
          "signature": "listProps?: IListProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IListProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional properties to pass through to the list components being rendered."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onGroupExpandStateChanged": {
          "kind": "property",
          "signature": "onGroupExpandStateChanged?: (isSomeGroupExpanded: boolean) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(isSomeGroupExpanded: boolean) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback when the group expand state changes between all collapsed and at least one group is expanded."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderCell": {
          "kind": "property",
          "signature": "onRenderCell: (nestingDepth?: number, item?: any, index?: number) => React.ReactNode;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(nestingDepth?: number, item?: any, index?: number) => React.ReactNode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Rendering callback to render the group items."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onShouldVirtualize": {
          "kind": "property",
          "signature": "onShouldVirtualize?: (props: IListProps) => boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(props: IListProps) => boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to determine whether the list should be rendered in full, or virtualized. Virtualization will add and remove pages of items as the user scrolls them into the visible range. This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for smaller lists. The default implementation will virtualize when this callback is not provided."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selection": {
          "kind": "property",
          "signature": "selection?: ISelection;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISelection",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional selection model to track selection state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectionMode": {
          "kind": "property",
          "signature": "selectionMode?: SelectionMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SelectionMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Controls how/if the list manages selection."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IGroupedListStyleProps, IGroupedListStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IGroupedListStyleProps, IGroupedListStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style function to be passed in to override the themed or default styles"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme that is passed in from Higher Order Component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "usePageCache": {
          "kind": "property",
          "signature": "usePageCache?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "boolean to control if pages containing unchanged items should be cached, this is a perf optimization The same property in List.Props"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "viewport": {
          "kind": "property",
          "signature": "viewport?: IViewport;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IViewport",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional Viewport, provided by the parent component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IGroupedListState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "groups": {
          "kind": "property",
          "signature": "groups?: IGroup[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IGroup[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "lastSelectionMode": {
          "kind": "property",
          "signature": "lastSelectionMode?: SelectionMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SelectionMode",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "lastWidth": {
          "kind": "property",
          "signature": "lastWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IGroupedListStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "group": {
          "kind": "property",
          "signature": "group: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "groupIsDropping": {
          "kind": "property",
          "signature": "groupIsDropping: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IGroupRenderProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "collapseAllVisibility": {
          "kind": "property",
          "signature": "collapseAllVisibility?: CollapseAllVisibility;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "CollapseAllVisibility",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Flag to indicate whether to ignore the collapsing icon on header."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "footerProps": {
          "kind": "property",
          "signature": "footerProps?: IGroupDividerProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IGroupDividerProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Information to pass in to the group footer."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getGroupItemLimit": {
          "kind": "property",
          "signature": "getGroupItemLimit?: (group: IGroup) => number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(group: IGroup) => number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Grouping item limit."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "headerProps": {
          "kind": "property",
          "signature": "headerProps?: IGroupDividerProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IGroupDividerProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Information to pass in to the group header."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isAllGroupsCollapsed": {
          "kind": "property",
          "signature": "isAllGroupsCollapsed?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Boolean indicating if all groups are in collapsed state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderFooter": {
          "kind": "property",
          "signature": "onRenderFooter?: IRenderFunction<IGroupDividerProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IGroupDividerProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Override which allows the caller to provide a custom footer."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderHeader": {
          "kind": "property",
          "signature": "onRenderHeader?: IRenderFunction<IGroupDividerProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IGroupDividerProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Override which allows the caller to provide a custom header."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderShowAll": {
          "kind": "property",
          "signature": "onRenderShowAll?: IRenderFunction<IGroupDividerProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IGroupDividerProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Override which allows the caller to provide a custom Show All link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onToggleCollapseAll": {
          "kind": "property",
          "signature": "onToggleCollapseAll?: (isAllCollapsed: boolean) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(isAllCollapsed: boolean) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when all groups are expanded or collapsed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showAllProps": {
          "kind": "property",
          "signature": "showAllProps?: IGroupDividerProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IGroupDividerProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Information to pass in to the group Show all footer."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showEmptyGroups": {
          "kind": "property",
          "signature": "showEmptyGroups?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Boolean indicating if empty groups are shown"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IHoverCard": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IHoverCardProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "HoverCard component props."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "cardDismissDelay": {
          "kind": "property",
          "signature": "cardDismissDelay?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Length of card dismiss delay. A min number is necessary for pointer to hop between target and card"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "cardOpenDelay": {
          "kind": "property",
          "signature": "cardOpenDelay?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Length of compact card delay"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional CSS class(es) to apply to the HoverCard root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IHoverCard>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IHoverCard>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IHoverCardHost interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "expandedCardOpenDelay": {
          "kind": "property",
          "signature": "expandedCardOpenDelay?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Time in ms when expanded card should open after compact card"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "expandingCardProps": {
          "kind": "property",
          "signature": "expandingCardProps?: IExpandingCardProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IExpandingCardProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional ExpandingCard props to pass through HoverCard like renderers, target. gapSpace etc. Used along with 'type' prop set to HoverCardType.expanding. Reference detail properties in ICardProps and IExpandingCardProps."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "instantOpenOnClick": {
          "kind": "property",
          "signature": "instantOpenOnClick?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Enables instant open of the full card upon click"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onCardHide": {
          "kind": "property",
          "signature": "onCardHide?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback when card hides"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onCardVisible": {
          "kind": "property",
          "signature": "onCardVisible?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback when card becomes visible"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "openHotKey": {
          "kind": "property",
          "signature": "openHotKey?: KeyCodes;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "KeyCodes",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "HotKey used for opening the HoverCard when tabbed to target."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "plainCardProps": {
          "kind": "property",
          "signature": "plainCardProps?: IPlainCardProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IPlainCardProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional PlainCard props to pass through HoverCard like renderers, target, gapSpace etc. Used along with 'type' prop set to HoverCardType.plain. See for more details ICardProps and IPlainCardProps interfaces."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "setAriaDescribedBy": {
          "kind": "property",
          "signature": "setAriaDescribedBy?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not to mark the container as described by the hover card. If not specified, the caller should mark as element as described by the hover card id."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "setInitialFocus": {
          "kind": "property",
          "signature": "setInitialFocus?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Set to true to set focus on the first focusable element in the card. Works in pair with the 'trapFocus' prop."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shouldBlockHoverCard": {
          "kind": "property",
          "signature": "shouldBlockHoverCard?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Should block hover card or not"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "sticky": {
          "kind": "property",
          "signature": "sticky?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true disables Card dismiss upon mouse leave, so that card sticks around."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IHoverCardStyleProps, IHoverCardStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IHoverCardStyleProps, IHoverCardStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom styles for this component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "target": {
          "kind": "property",
          "signature": "target?: HTMLElement | string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "HTMLElement | string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional target element to tag hover card on. If not provided and using HoverCard as a wrapper, don't set 'data-is-focusable=true' attribute to the root of the wrapped child. When no target given, HoverCard will use it's root as a target and become the focusable element with a focus listener attached to it."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by higher order component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "trapFocus": {
          "kind": "property",
          "signature": "trapFocus?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Set to true if you want to render the content of the HoverCard in a FocusTrapZone for accessibility reasons. Optionally 'setInitialFocus' prop can be set to true to move focus inside the FocusTrapZone."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "type": {
          "kind": "property",
          "signature": "type?: HoverCardType;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "HoverCardType",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Type of the hover card to render."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IHoverCardState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "isHoverCardVisible": {
          "kind": "property",
          "signature": "isHoverCardVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "mode": {
          "kind": "property",
          "signature": "mode?: ExpandingCardMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ExpandingCardMode",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "openMode": {
          "kind": "property",
          "signature": "openMode?: OpenCardMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "OpenCardMode",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IHoverCardStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional className(s) for the host div of HoverCard."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IHoverCardStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "host": {
          "kind": "property",
          "signature": "host?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the host element in the default enabled, non-toggled state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IHSL": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "h": {
          "kind": "property",
          "signature": "h: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "l": {
          "kind": "property",
          "signature": "l: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "s": {
          "kind": "property",
          "signature": "s: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IHSV": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "h": {
          "kind": "property",
          "signature": "h: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "s": {
          "kind": "property",
          "signature": "s: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "v": {
          "kind": "property",
          "signature": "v: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IIconOptions": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "disableWarnings": {
          "kind": "property",
          "signature": "disableWarnings: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "By default, registering the same set of icons will generate a console warning per duplicate icon registered, because this scenario can create unexpected consequences."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Some scenarios include:"
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Icon set was previously registered using a different base url. Icon set was previously registered but a different version was provided. Icons in a previous registered set overlap with a new set."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "To simply ignore previously registered icons, you can specify to disable warnings. This means that if an icon which was previous registered is registered again, it will be silently ignored. However, consider whether the problems listed above will cause issues."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "warnOnMissingIcons": {
          "kind": "property",
          "signature": "warnOnMissingIcons?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use 'disableWarnings' instead."
            }
          ],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IIconProps": {
      "kind": "interface",
      "extends": "IBaseProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The aria label of the button for the benefit of screen readers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconName": {
          "kind": "property",
          "signature": "iconName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The name of the icon to use from the icon font. If string is empty, a placeholder icon will be rendered the same width as an icon"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconType": {
          "kind": "property",
          "signature": "iconType?: IconType;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IconType",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The type of icon to render (image or icon font)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "imageErrorAs": {
          "kind": "property",
          "signature": "imageErrorAs?: React.StatelessComponent<IImageProps> | React.ComponentClass<IImageProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.StatelessComponent<IImageProps> | React.ComponentClass<IImageProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If rendering an image icon, this function callback will be invoked in the event loading the image errors."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "imageProps": {
          "kind": "property",
          "signature": "imageProps?: IImageProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IImageProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If rendering an image icon, these props will be passed to the Image component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IIconStyleProps, IIconStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IIconStyleProps, IIconStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the styles for an Icon."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IIconRecord": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "code": {
          "kind": "property",
          "signature": "code: string | undefined;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | undefined",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "subset": {
          "kind": "property",
          "signature": "subset: IIconSubsetRecord;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IIconSubsetRecord",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IIconState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "imageLoadError": {
          "kind": "property",
          "signature": "imageLoadError: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IIconStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconClassName": {
          "kind": "property",
          "signature": "iconClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isImage": {
          "kind": "property",
          "signature": "isImage: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isPlaceholder": {
          "kind": "property",
          "signature": "isPlaceholder: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: Partial<IIconStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Partial<IIconStyles>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IIconStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "imageContainer": {
          "kind": "property",
          "signature": "imageContainer?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "root",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated. Use "
            },
            {
              "kind": "code",
              "text": "root",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IIconSubset": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "fontFace": {
          "kind": "property",
          "signature": "fontFace?: IFontFace;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IFontFace",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "icons": {
          "kind": "property",
          "signature": "icons:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        [key: string]: string | JSX.Element;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "style": {
          "kind": "property",
          "signature": "style?: IRawStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IImage": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IImageProps": {
      "kind": "interface",
      "extends": "React.ImgHTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional css class to apply to the Component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IImage>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IImage>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the ICheckbox interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "coverStyle": {
          "kind": "property",
          "signature": "coverStyle?: ImageCoverStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ImageCoverStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Specifies the cover style to be used for this image. If not specified, this will be dynamically calculated based on the aspect ratio for the image."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "errorSrc": {
          "kind": "property",
          "signature": "errorSrc?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "onLoadingStateChange",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead and rerender the Image with a difference src."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated at v1.3.6, to replace the src in case of errors, use "
            },
            {
              "kind": "code",
              "text": "onLoadingStateChange",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead and rerender the Image with a difference src."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "imageFit": {
          "kind": "property",
          "signature": "imageFit?: ImageFit;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ImageFit",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used to determine how the image is scaled and cropped to fit the frame."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "maximizeFrame": {
          "kind": "property",
          "signature": "maximizeFrame?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true, the image frame will expand to fill its parent container."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onLoadingStateChange": {
          "kind": "property",
          "signature": "onLoadingStateChange?: (loadState: ImageLoadState) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(loadState: ImageLoadState) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback method for when the image load state has changed. The 'loadState' parameter indicates the current state of the Image."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shouldFadeIn": {
          "kind": "property",
          "signature": "shouldFadeIn?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true, fades the image in when loaded."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shouldStartVisible": {
          "kind": "property",
          "signature": "shouldStartVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true, the image starts as visible and is hidden on error. Otherwise, the image is hidden until it is successfully loaded. This disables shouldFadeIn."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IImageStyleProps, IImageStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IImageStyleProps, IImageStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by HOC."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IImageState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "loadState": {
          "kind": "property",
          "signature": "loadState?: ImageLoadState;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ImageLoadState",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IImageStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept custom classNames"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "height": {
          "kind": "property",
          "signature": "height?: number | string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Image height valye"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isCenter": {
          "kind": "property",
          "signature": "isCenter?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "ImageFit booleans for center, cover, contain, centerCover, none"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isCenterCover": {
          "kind": "property",
          "signature": "isCenterCover?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isContain": {
          "kind": "property",
          "signature": "isContain?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isCover": {
          "kind": "property",
          "signature": "isCover?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isError": {
          "kind": "property",
          "signature": "isError?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "if true image load is in error"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isLandscape": {
          "kind": "property",
          "signature": "isLandscape?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true the image is coverStyle landscape instead of portrait"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isLoaded": {
          "kind": "property",
          "signature": "isLoaded?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true, the image is loaded"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isNone": {
          "kind": "property",
          "signature": "isNone?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isNotImageFit": {
          "kind": "property",
          "signature": "isNotImageFit?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "if true, imageFit is undefined"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "maximizeFrame": {
          "kind": "property",
          "signature": "maximizeFrame?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true, the image frame will expand to fill its parent container."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shouldFadeIn": {
          "kind": "property",
          "signature": "shouldFadeIn?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true, fades the image in when loaded."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shouldStartVisible": {
          "kind": "property",
          "signature": "shouldStartVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true, the image starts as visible and is hidden on error. Otherwise, the image is hidden until it is successfully loaded. This disables shouldFadeIn."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept theme prop."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "width": {
          "kind": "property",
          "signature": "width?: number | string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Image width valye"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IImageStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "image": {
          "kind": "property",
          "signature": "image: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the img element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the root div element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IInputProps": {
      "kind": "interface",
      "extends": "React.InputHTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "defaultVisibleValue": {
          "kind": "property",
          "signature": "defaultVisibleValue?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The default value to be visible when the autofill first created. This is different than placeholder text because the placeholder text will disappear and re-appear. This text persists until deleted or changed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IKeytip": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IKeytipLayer": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IKeytipLayerProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IKeytipLayer>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IKeytipLayer>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the KeytipLayer component. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "content": {
          "kind": "property",
          "signature": "content: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "String to put inside the layer to be used for the aria-describedby for the component with the keytip Should be one of the starting sequences"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "keytipExitSequences": {
          "kind": "property",
          "signature": "keytipExitSequences?: IKeytipTransitionKey[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IKeytipTransitionKey[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "List of key sequences that will exit keytips mode"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "keytipReturnSequences": {
          "kind": "property",
          "signature": "keytipReturnSequences?: IKeytipTransitionKey[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IKeytipTransitionKey[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "List of key sequences that execute the return functionality in keytips (going back to the previous level of keytips)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "keytipStartSequences": {
          "kind": "property",
          "signature": "keytipStartSequences?: IKeytipTransitionKey[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IKeytipTransitionKey[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "List of key sequences that will start keytips mode"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onEnterKeytipMode": {
          "kind": "property",
          "signature": "onEnterKeytipMode?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback function triggered when keytip mode is entered"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onExitKeytipMode": {
          "kind": "property",
          "signature": "onExitKeytipMode?: (ev?: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement>) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback function triggered when keytip mode is exited. ev is the Mouse or Keyboard Event that triggered the exit, if any."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IKeytipLayerStyleProps, IKeytipLayerStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IKeytipLayerStyleProps, IKeytipLayerStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "(Optional) Call to provide customized styling."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IKeytipLayerState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "inKeytipMode": {
          "kind": "property",
          "signature": "inKeytipMode: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "keytips": {
          "kind": "property",
          "signature": "keytips: IKeytipProps[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IKeytipProps[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "visibleKeytips": {
          "kind": "property",
          "signature": "visibleKeytips: IKeytipProps[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IKeytipProps[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IKeytipLayerStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IKeytipLayerStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "innerContent": {
          "kind": "property",
          "signature": "innerContent: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IKeytipProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "calloutProps": {
          "kind": "property",
          "signature": "calloutProps?: ICalloutProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICalloutProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "ICalloutProps to pass to the callout element"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IKeytip>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IKeytip>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the Keytip component. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "content": {
          "kind": "property",
          "signature": "content: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Content to put inside the keytip"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "T/F if the corresponding control for this keytip is disabled"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hasDynamicChildren": {
          "kind": "property",
          "signature": "hasDynamicChildren?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not this keytip will have children keytips that are dynamically created (DOM is generated on keytip activation) Common cases are a Pivot or Modal"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hasMenu": {
          "kind": "property",
          "signature": "hasMenu?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not this keytip belongs to a component that has a menu Keytip mode will stay on when a menu is opened, even if the items in that menu have no keytips"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "keySequences": {
          "kind": "property",
          "signature": "keySequences: string[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Array of KeySequences which is the full key sequence to trigger this keytip Should not include initial 'start' key sequence"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "offset": {
          "kind": "property",
          "signature": "offset?: IPoint;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IPoint",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Offset x and y for the keytip, added from the top-left corner By default the keytip will be anchored to the bottom-center of the element"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onExecute": {
          "kind": "property",
          "signature": "onExecute?: (executeTarget: HTMLElement | null, target: HTMLElement | null) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(executeTarget: HTMLElement | null, target: HTMLElement | null) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function to call when this keytip is activated. 'executeTarget' is the DOM element marked with 'data-ktp-execute-target'. 'target' is the DOM element marked with 'data-ktp-target'."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onReturn": {
          "kind": "property",
          "signature": "onReturn?: (executeTarget: HTMLElement | null, target: HTMLElement | null) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(executeTarget: HTMLElement | null, target: HTMLElement | null) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function to call when the keytip is the currentKeytip and a return sequence is pressed. 'executeTarget' is the DOM element marked with 'data-ktp-execute-target'. 'target' is the DOM element marked with 'data-ktp-target'."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "overflowSetSequence": {
          "kind": "property",
          "signature": "overflowSetSequence?: string[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Full KeySequence of the overflow set button, will be set automatically if this keytip is inside an overflow"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IKeytipStyleProps, IKeytipStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IKeytipStyleProps, IKeytipStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional styles for the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme for the component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "visible": {
          "kind": "property",
          "signature": "visible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "T/F if the keytip is visible"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IKeytipStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Props to style Keytip component"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the keytip is disabled or not."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The theme for the keytip."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "visible": {
          "kind": "property",
          "signature": "visible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "T/F if the keytip is visible"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IKeytipStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "container": {
          "kind": "property",
          "signature": "container: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the div container surrounding the keytip content."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the keytip content element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ILabel": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "ILabelProps": {
      "kind": "interface",
      "extends": "React.LabelHTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "as": {
          "kind": "property",
          "signature": "as?: IComponentAs<React.AllHTMLAttributes<HTMLElement>>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IComponentAs<React.AllHTMLAttributes<HTMLElement>>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Render the root element as another type."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<ILabel>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<ILabel>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the ILabel interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Renders the label as disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "required": {
          "kind": "property",
          "signature": "required?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the associated form field is required or not"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<ILabelStyleProps, ILabelStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the label."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by HOC."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ILabelStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "required": {
          "kind": "property",
          "signature": "required?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ILabelStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ILayer": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "ILayerProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional css class to apply to the Layer"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<ILayer>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<ILayer>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the ILayer interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "eventBubblingEnabled": {
          "kind": "property",
          "signature": "eventBubblingEnabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "When enabled, Layer allows events to bubble up from Layer content. Traditionally Layer has not had this behavior. This prop preserves backwards compatibility by default while allowing users to opt in to the new event bubbling functionality."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hostId": {
          "kind": "property",
          "signature": "hostId?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The optional id property provided on a LayerHost that this Layer should render within. The LayerHost does not need to be immediately available but once has been rendered, and if missing, we'll avoid trying to render the Layer content until the host is available. If an id is not provided, we will render the Layer content in a fixed position element rendered at the end of the document."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onLayerDidMount": {
          "kind": "property",
          "signature": "onLayerDidMount?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when the layer is mounted."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onLayerMounted": {
          "kind": "property",
          "signature": "onLayerMounted?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when the layer is mounted."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onLayerWillUnmount": {
          "kind": "property",
          "signature": "onLayerWillUnmount?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when the layer is unmounted."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<ILayerStyleProps, ILayerStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<ILayerStyleProps, ILayerStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by HOC."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ILayerStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept custom classNames"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isNotHost": {
          "kind": "property",
          "signature": "isNotHost?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Check if Host"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept theme prop."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ILayerStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "content": {
          "kind": "property",
          "signature": "content?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the Fabric component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the root element when fixed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ILine": {
      "kind": "interface",
      "extends": "IShimmerElement",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "height": {
          "kind": "property",
          "signature": "height?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the height of the shimmer line in pixels."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "width": {
          "kind": "property",
          "signature": "width?: number | string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Line width value."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ILink": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ILinkHTMLAttributes": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__index": {
          "kind": "method",
          "signature": "[index: string]: any;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "any",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "autoFocus": {
          "kind": "property",
          "signature": "autoFocus?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "download": {
          "kind": "property",
          "signature": "download?: any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "form": {
          "kind": "property",
          "signature": "form?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "formAction": {
          "kind": "property",
          "signature": "formAction?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "formEncType": {
          "kind": "property",
          "signature": "formEncType?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "formMethod": {
          "kind": "property",
          "signature": "formMethod?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "formNoValidate": {
          "kind": "property",
          "signature": "formNoValidate?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "formTarget": {
          "kind": "property",
          "signature": "formTarget?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "href": {
          "kind": "property",
          "signature": "href?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hrefLang": {
          "kind": "property",
          "signature": "hrefLang?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "media": {
          "kind": "property",
          "signature": "media?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "name": {
          "kind": "property",
          "signature": "name?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rel": {
          "kind": "property",
          "signature": "rel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "target": {
          "kind": "property",
          "signature": "target?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "type": {
          "kind": "property",
          "signature": "type?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "value?: string | string[] | number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | string[] | number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ILinkProps": {
      "kind": "interface",
      "extends": "ILinkHTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "as": {
          "kind": "property",
          "signature": "as?: string | React.ComponentClass | React.StatelessComponent;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | React.ComponentClass | React.StatelessComponent",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A component that should be used as the root element of the link returned from the Link component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<ILink>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<ILink>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the ILink interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the link is disabled"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "keytipProps": {
          "kind": "property",
          "signature": "keytipProps?: IKeytipProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IKeytipProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional keytip for this Link"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<ILinkStyleProps, ILinkStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<ILinkStyleProps, ILinkStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme (provided through customization.)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ILinkStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isButton": {
          "kind": "property",
          "signature": "isButton?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDisabled": {
          "kind": "property",
          "signature": "isDisabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ILinkStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IList": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "forceUpdate": {
          "kind": "property",
          "signature": "forceUpdate: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Force the component to update."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getStartItemIndexInView": {
          "kind": "property",
          "signature": "getStartItemIndexInView: () => number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Get the start index of the page that is currently in view"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "scrollToIndex": {
          "kind": "property",
          "signature": "scrollToIndex: (index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback to measure the height of an individual item is specified, will only scroll to bring the specific item into view."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Note: with items of variable height and no passed in "
            },
            {
              "kind": "code",
              "text": "getPageHeight",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " method, the list might jump after scrolling when windows before/ahead are being rendered, and the estimated height is replaced using actual elements."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IListProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional classname to append to root list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IList>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IList>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IList interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getItemCountForPage": {
          "kind": "property",
          "signature": "getItemCountForPage?: (itemIndex?: number, visibleRect?: IRectangle) => number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(itemIndex?: number, visibleRect?: IRectangle) => number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Method called by the list to get how many items to render per page from specified index. In general, use "
            },
            {
              "kind": "code",
              "text": "getPageSpecification",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getKey": {
          "kind": "property",
          "signature": "getKey?: (item: any, index?: number) => string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: any, index?: number) => string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to get the item key, to be used on render."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getPageHeight": {
          "kind": "property",
          "signature": "getPageHeight?: (itemIndex?: number, visibleRect?: IRectangle) => number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(itemIndex?: number, visibleRect?: IRectangle) => number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Method called by the list to get the pixel height for a given page. By default, we measure the first page's height and default all other pages to that height when calculating the surface space. It is ideal to be able to adequately predict page heights in order to keep the surface space from jumping in pixels, which has been seen to cause browser performance issues. In general, use "
            },
            {
              "kind": "code",
              "text": "getPageSpecification",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getPageSpecification": {
          "kind": "property",
          "signature": "getPageSpecification?: (itemIndex?: number, visibleRect?: IRectangle) => IPageSpecification;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(itemIndex?: number, visibleRect?: IRectangle) => IPageSpecification",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Called by the list to get the specification for a page. Use this method to provide an allocation of items per page, as well as an estimated rendered height for the page. The list will use this to optimize virtualization."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getPageStyle": {
          "kind": "property",
          "signature": "getPageStyle?: (page: IPage) => any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(page: IPage) => any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Method called by the list to derive the page style object. For spacer pages, the list will derive the height and passed in heights will be ignored."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "items": {
          "kind": "property",
          "signature": "items?: any[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Items to render."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onPageAdded": {
          "kind": "property",
          "signature": "onPageAdded?: (page: IPage) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(page: IPage) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback for monitoring when a page is added."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onPageRemoved": {
          "kind": "property",
          "signature": "onPageRemoved?: (page: IPage) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(page: IPage) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback for monitoring when a page is removed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onPagesUpdated": {
          "kind": "property",
          "signature": "onPagesUpdated?: (pages: IPage[]) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(pages: IPage[]) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback invoked when List rendering completed. This can be on initial mount or on re-render due to scrolling. This method will be called as a result of changes in List pages (added or removed), and after ALL the changes complete. To track individual page Add / Remove use onPageAdded / onPageRemoved instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderCell": {
          "kind": "property",
          "signature": "onRenderCell?: (item?: any, index?: number, isScrolling?: boolean) => React.ReactNode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item?: any, index?: number, isScrolling?: boolean) => React.ReactNode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Method to call when trying to render an item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderPage": {
          "kind": "property",
          "signature": "onRenderPage?: (pageProps: IPageProps, defaultRender?: IRenderFunction<IPageProps>) => React.ReactNode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(pageProps: IPageProps, defaultRender?: IRenderFunction<IPageProps>) => React.ReactNode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Called when the List will render a page. Override this to control how cells are rendered within a page."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onShouldVirtualize": {
          "kind": "property",
          "signature": "onShouldVirtualize?: (props: IListProps) => boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(props: IListProps) => boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to determine whether the list should be rendered in full, or virtualized. Virtualization will add and remove pages of items as the user scrolls them into the visible range. This benefits larger list scenarios by reducing the DOM on the screen, but can negatively affect performance for smaller lists. The default implementation will virtualize when this callback is not provided."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "renderCount": {
          "kind": "property",
          "signature": "renderCount?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Number of items to render. Defaults to items.length."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "renderedWindowsAhead": {
          "kind": "property",
          "signature": "renderedWindowsAhead?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "In addition to the visible window, how many windowHeights should we render ahead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "renderedWindowsBehind": {
          "kind": "property",
          "signature": "renderedWindowsBehind?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "In addition to the visible window, how many windowHeights should we render behind."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "role": {
          "kind": "property",
          "signature": "role?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The role to assign to the list root element. Use this to override the default assignment of 'list' to the root and 'listitem' to the cells."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "startIndex": {
          "kind": "property",
          "signature": "startIndex?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Index in items array to start rendering from. Defaults to 0."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "usePageCache": {
          "kind": "property",
          "signature": "usePageCache?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Boolean value to enable render page caching. This is an experimental performance optimization that is off by default."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IListState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "isScrolling": {
          "kind": "property",
          "signature": "isScrolling?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "measureVersion": {
          "kind": "property",
          "signature": "measureVersion?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The last versionstamp for"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "pages": {
          "kind": "property",
          "signature": "pages?: IPage[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IPage[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ImageBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IImageProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IImageProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ImageBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "ImageBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(prevProps: IImageProps, prevState: IImageState): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "prevProps": {
              "name": "prevProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IImageProps"
            },
            "prevState": {
              "name": "prevState",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IImageState"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(nextProps: IImageProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "nextProps": {
              "name": "nextProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IImageProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "{\n        shouldFadeIn: boolean;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ImageCoverStyle": {
      "kind": "enum",
      "values": {
        "landscape": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The image will be shown at 100% height of container and the width will be scaled accordingly"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "portrait": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The image will be shown at 100% width of container and the height will be scaled accordingly"
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The cover style to be used on the image"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "ImageFit": {
      "kind": "enum",
      "values": {
        "center": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The image is not scaled. The image is centered and cropped within the content box."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "centerCover": {
          "kind": "enum value",
          "value": "4",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The image will be centered horizontally and vertically within the frame and maintains its aspect ratio. It will behave as ImageFit.center if the image's natural height or width is less than the Image frame's height or width, but if both natural height and width are larger than the frame it will behave as ImageFit.cover."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "contain": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The image is scaled to maintain its aspect ratio while being fully contained within the frame. The image will be centered horizontally and vertically within the frame. The space in the top and bottom or in the sides of the frame will be empty depending on the difference in aspect ratio between the image and the frame."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "cover": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The image is scaled to maintain its aspect ratio while filling the frame. Portions of the image will be cropped from the top and bottom, or from the sides, depending on the difference in aspect ratio between the image and the frame."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "none": {
          "kind": "enum value",
          "value": "3",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Neither the image nor the frame are scaled. If their sizes do not match, the image will either be cropped or the frame will have empty space."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The possible methods that can be used to fit the image."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "ImageLoadState": {
      "kind": "enum",
      "values": {
        "error": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An error has been encountered while loading the image."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "errorLoaded": {
          "kind": "enum value",
          "value": "3",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "onLoadingStateChange",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead and rerender the Image with a difference src."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated at v1.3.6, to replace the src in case of errors, use "
            },
            {
              "kind": "code",
              "text": "onLoadingStateChange",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead and rerender the Image with a difference src."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "loaded": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The image has been loaded successfully."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "notLoaded": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The image has not yet been loaded, and there is no error yet."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "IMarqueeSelection": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IMarqueeSelectionProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional CSS class(es) to apply to the MarqueeSelection."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IMarqueeSelection>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IMarqueeSelection>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IMarqueeSelection interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDraggingConstrainedToRoot": {
          "kind": "property",
          "signature": "isDraggingConstrainedToRoot?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional flag to restrict the drag rect to the root element, instead of allowing the drag rect to start outside of the root element boundaries."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isEnabled": {
          "kind": "property",
          "signature": "isEnabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional flag to control the enabled state of marquee selection. This allows you to render it and have events all ready to go, but conditionally disable it. That way transitioning between enabled/disabled generate no difference in the DOM."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onShouldStartSelection": {
          "kind": "property",
          "signature": "onShouldStartSelection?: (ev: MouseEvent) => boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: MouseEvent) => boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback that is called, when the mouse down event occurs, in order to determine if we should start a marquee selection. If true is returned, we will cancel the mousedown event to prevent upstream mousedown handlers from executing."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootProps": {
          "kind": "property",
          "signature": "rootProps?: React.HTMLAttributes<HTMLDivElement>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.HTMLAttributes<HTMLDivElement>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional props to mix into the root DIV element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selection": {
          "kind": "property",
          "signature": "selection: ISelection;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISelection",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The selection object to interact with when updating selection changes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunction<IMarqueeSelectionStyleProps, IMarqueeSelectionStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunction<IMarqueeSelectionStyleProps, IMarqueeSelectionStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme (provided through customization.)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IMarqueeSelectionStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IMarqueeSelectionStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "box": {
          "kind": "property",
          "signature": "box?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "boxFill": {
          "kind": "property",
          "signature": "boxFill?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dragMask": {
          "kind": "property",
          "signature": "dragMask?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IMaskedTextFieldState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "props.mask: The string containing the prompt and format characters."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "displayValue": {
          "kind": "property",
          "signature": "displayValue: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The mask string formatted with the input value. This is what is displayed inside the TextField"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "maskCursorPosition": {
          "kind": "property",
          "signature": "maskCursorPosition?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The index into the rendered value of the first unfilled format character"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IMenuItemStyles": {
      "kind": "interface",
      "extends": "IButtonStyles",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "anchorLink": {
          "kind": "property",
          "signature": "anchorLink: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for a menu item that is an anchor link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "checkmarkIcon": {
          "kind": "property",
          "signature": "checkmarkIcon: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Default style for checkmark icons."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "divider": {
          "kind": "property",
          "signature": "divider: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for a divider item of a ConextualMenu."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconColor": {
          "kind": "property",
          "signature": "iconColor: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Default icon color style for known icons."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "item": {
          "kind": "property",
          "signature": "item: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for a menu item that is an anchor link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "linkContent": {
          "kind": "property",
          "signature": "linkContent: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the content inside the button/link of the menuItem."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "subMenuIcon": {
          "kind": "property",
          "signature": "subMenuIcon: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the submenu icon of a menu item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IMessageBar": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IMessageBarProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "actions": {
          "kind": "property",
          "signature": "actions?: JSX.Element;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "JSX.Element",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The actions you want to show on the other side."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A description of the message bar for the benefit of screen readers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional CSS class(es) to apply to the MessageBar."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IMessageBar>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IMessageBar>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IMessageBar interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dismissButtonAriaLabel": {
          "kind": "property",
          "signature": "dismissButtonAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria label on dismiss button if onDismiss is defined."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isMultiline": {
          "kind": "property",
          "signature": "isMultiline?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Determines if the message bar is multi lined. If false, and the text overflows over buttons or to another line, it is clipped."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "messageBarType": {
          "kind": "property",
          "signature": "messageBarType?: MessageBarType;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "MessageBarType",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The type of MessageBar to render."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDismiss": {
          "kind": "property",
          "signature": "onDismiss?: (ev?: React.MouseEvent<HTMLButtonElement | BaseButton | HTMLAnchorElement | HTMLDivElement | Button>) => any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLButtonElement | BaseButton | HTMLAnchorElement | HTMLDivElement | Button>) => any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the message bar has a dismiss button and its callback. If null, we don't show a dismiss button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "overflowButtonAriaLabel": {
          "kind": "property",
          "signature": "overflowButtonAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria label on overflow button if truncated is defined."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IMessageBarStyleProps, IMessageBarStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IMessageBarStyleProps, IMessageBarStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme (provided through customization.)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "truncated": {
          "kind": "property",
          "signature": "truncated?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Determines if the message bar text is truncated. If true, a button will render to toggle between a single line view and multiline view. This prop is for single line message bars with no buttons only in a limited space scenario."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IMessageBarState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "expandSingleLine": {
          "kind": "property",
          "signature": "expandSingleLine?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "labelId": {
          "kind": "property",
          "signature": "labelId?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showContent": {
          "kind": "property",
          "signature": "showContent?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IMessageBarStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "actions": {
          "kind": "property",
          "signature": "actions?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the MessageBar contains any action elements."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional CSS class(es)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "expandSingleLine": {
          "kind": "property",
          "signature": "expandSingleLine?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the single line MessageBar is being expanded."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isMultiline": {
          "kind": "property",
          "signature": "isMultiline?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the MessageBar is rendered in multi line (as opposed to single line) mode."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "messageBarType": {
          "kind": "property",
          "signature": "messageBarType?: MessageBarType;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "MessageBarType",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Type of the MessageBar."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDismiss": {
          "kind": "property",
          "signature": "onDismiss?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the MessageBar contains a dismiss button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme (provided through customization)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "truncated": {
          "kind": "property",
          "signature": "truncated?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the text is truncated."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IMessageBarStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "actions": {
          "kind": "property",
          "signature": "actions?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the optional element containing the action elements."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "content": {
          "kind": "property",
          "signature": "content?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the element containing the icon, text, and optional dismiss button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dismissal": {
          "kind": "property",
          "signature": "dismissal?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the optional dismiss button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dismissSingleLine": {
          "kind": "property",
          "signature": "dismissSingleLine?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the element containing the dismiss button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "expand": {
          "kind": "property",
          "signature": "expand?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the icon used to expand and collapse the MessageBar."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "expandSingleLine": {
          "kind": "property",
          "signature": "expandSingleLine?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the element containing the expand icon."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "icon": {
          "kind": "property",
          "signature": "icon?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the icon."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconContainer": {
          "kind": "property",
          "signature": "iconContainer?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the element containing the icon."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "innerText": {
          "kind": "property",
          "signature": "innerText?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the text."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "text": {
          "kind": "property",
          "signature": "text?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the element containing the text."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IModal": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focus": {
          "kind": "property",
          "signature": "focus: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus on the first focusable, or configured, child in focus trap zone"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IModalProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional class name to be added to the root class"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IModal>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IModal>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IDialog interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "containerClassName": {
          "kind": "property",
          "signature": "containerClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional override for container class"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isBlocking": {
          "kind": "property",
          "signature": "isBlocking?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the dialog can be light dismissed by clicking outside the dialog (on the overlay)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDarkOverlay": {
          "kind": "property",
          "signature": "isDarkOverlay?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the overlay is dark themed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isOpen": {
          "kind": "property",
          "signature": "isOpen?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the dialog is displayed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDismiss": {
          "kind": "property",
          "signature": "onDismiss?: (ev?: React.MouseEvent<HTMLButtonElement>) => any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLButtonElement>) => any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback function for when the Modal is dismissed light dismiss, before the animation completes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDismissed": {
          "kind": "property",
          "signature": "onDismissed?: () => any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback function which is called after the Modal is dismissed and the animation is complete."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onLayerDidMount": {
          "kind": "property",
          "signature": "onLayerDidMount?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback function for when the Modal content is mounted on the overlay layer"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "scrollableContentClassName": {
          "kind": "property",
          "signature": "scrollableContentClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional override for scrollable content class"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IModalStyleProps, IModalStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IModalStyleProps, IModalStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "subtitleAriaId": {
          "kind": "property",
          "signature": "subtitleAriaId?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "ARIA id for the subtitle of the Modal, if any"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "titleAriaId": {
          "kind": "property",
          "signature": "titleAriaId?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "ARIA id for the title of the Modal, if any"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "topOffsetFixed": {
          "kind": "property",
          "signature": "topOffsetFixed?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the modal should have top offset fixed once opened and expand from the bottom only when the content changes dynamically."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IModalStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "main": {
          "kind": "property",
          "signature": "main: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "scrollableContent": {
          "kind": "property",
          "signature": "scrollableContent: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "INav": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "selectedKey": {
          "kind": "property",
          "signature": "selectedKey: string | undefined;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The meta 'key' property of the currently selected NavItem of the Nav. Can return undefined if the currently selected nav item has no populated key property. Be aware that in order for Nav to properly understand which key is selected all NavItems in all groups of the Nav must have populated key properties."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "INavLink": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__index": {
          "kind": "method",
          "signature": "[propertyName: string]: any;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "any",
            "description": []
          },
          "parameters": {
            "propertyName": {
              "name": "propertyName",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "(Optional) Any additional properties to apply to the rendered links."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "altText": {
          "kind": "property",
          "signature": "altText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Removed at v1.0.0."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated at v0.68.1 and will be removed at >= v1.0.0."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria label for nav link"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "automationId": {
          "kind": "property",
          "signature": "automationId?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The name to use for functional automation tests"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "engagementName": {
          "kind": "property",
          "signature": "engagementName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Removed at v1.0.0."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated at v0.68.1 and will be removed at >= v1.0.0."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "forceAnchor": {
          "kind": "property",
          "signature": "forceAnchor?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "(Optional) By default, any link with onClick defined will render as a button. Set this property to true to override that behavior. (Links without onClick defined will render as anchors by default.)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "icon": {
          "kind": "property",
          "signature": "icon?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Name of an icon to render next to the link button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconClassName": {
          "kind": "property",
          "signature": "iconClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "iconProps.className",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated. Use "
            },
            {
              "kind": "code",
              "text": "iconProps.className",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconProps": {
          "kind": "property",
          "signature": "iconProps?: IIconProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IIconProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Props for an icon to render next to the link button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isExpanded": {
          "kind": "property",
          "signature": "isExpanded?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not the link is in an expanded state"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "key": {
          "kind": "property",
          "signature": "key?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Unique, stable key for the link, used when rendering the list of links and for tracking the currently selected link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "links": {
          "kind": "property",
          "signature": "links?: INavLink[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "INavLink[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Child links to this link, if any"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "name": {
          "kind": "property",
          "signature": "name: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Text to render for this link"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onClick": {
          "kind": "property",
          "signature": "onClick?: (ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback invoked when this link is clicked. Providing this callback will cause the link to render as a button (rather than an anchor) unless forceAnchor is set to true."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "parentId": {
          "kind": "property",
          "signature": "parentId?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Not used in the Nav control or anywhere else in office-ui-fabric-react."
            }
          ],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "target": {
          "kind": "property",
          "signature": "target?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Link "
            },
            {
              "kind": "html-tag",
              "token": "<a>"
            },
            {
              "kind": "text",
              "text": " target."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "title": {
          "kind": "property",
          "signature": "title?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Text for title tooltip and ARIA description."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "url": {
          "kind": "property",
          "signature": "url: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "URL to navigate to for this link"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "INavLinkGroup": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "automationId": {
          "kind": "property",
          "signature": "automationId?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The name to use for functional automation tests"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "collapseByDefault": {
          "kind": "property",
          "signature": "collapseByDefault?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true, the group should render collapsed by default"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "links": {
          "kind": "property",
          "signature": "links: INavLink[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "INavLink[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Links to render within this group"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "name": {
          "kind": "property",
          "signature": "name?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Text to render as the header of a group"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onHeaderClick": {
          "kind": "property",
          "signature": "onHeaderClick?: (ev?: React.MouseEvent<HTMLElement>, isCollapsing?: boolean) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLElement>, isCollapsing?: boolean) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback invoked when a group header is clicked"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "INavProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "(Optional) The nav container aria label."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional css class to apply to the Nav"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "collapsedStateText": {
          "kind": "property",
          "signature": "collapsedStateText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Removed at v1.0.0."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated at v0.68.1 and will be removed at >= v1.0.0."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<INav>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<INav>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the INav interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "expandButtonAriaLabel": {
          "kind": "property",
          "signature": "expandButtonAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "(Optional) The nav container aria label."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "expandedStateText": {
          "kind": "property",
          "signature": "expandedStateText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Removed at v1.0.0."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated at v0.68.1 and will be removed at >= v1.0.0."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "groups": {
          "kind": "property",
          "signature": "groups: INavLinkGroup[] | null;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "INavLinkGroup[] | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A collection of link groups to display in the navigation bar"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "initialSelectedKey": {
          "kind": "property",
          "signature": "initialSelectedKey?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "(Optional) The key of the nav item initially selected."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isOnTop": {
          "kind": "property",
          "signature": "isOnTop?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates whether the navigation component renders on top of other content in the UI"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onLinkClick": {
          "kind": "property",
          "signature": "onLinkClick?: (ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function callback invoked when a link in the navigation is clicked"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onLinkExpandClick": {
          "kind": "property",
          "signature": "onLinkExpandClick?: (ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLElement>, item?: INavLink) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function callback invoked when the chevron on a link is clicked"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderGroupHeader": {
          "kind": "property",
          "signature": "onRenderGroupHeader?: IRenderFunction<INavLinkGroup>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<INavLinkGroup>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used to customize how content inside the group header is rendered"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderLink": {
          "kind": "property",
          "signature": "onRenderLink?: IRenderFunction<INavLink>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<INavLink>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used to customize how content inside the link tag is rendered"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedKey": {
          "kind": "property",
          "signature": "selectedKey?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "(Optional) The key of the nav item selected by caller."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<INavStyleProps, INavStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<INavStyleProps, INavStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by HOC."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "INavState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "isGroupCollapsed": {
          "kind": "property",
          "signature": "isGroupCollapsed?:",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        [key: string]: boolean;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isLinkExpandStateChanged": {
          "kind": "property",
          "signature": "isLinkExpandStateChanged?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedKey": {
          "kind": "property",
          "signature": "selectedKey?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "INavStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept custom classNames"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "groups": {
          "kind": "property",
          "signature": "groups: INavLinkGroup[] | null;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "INavLinkGroup[] | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Inherited from INavProps A collection of link groups to display in the navigation bar"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isButtonEntry": {
          "kind": "property",
          "signature": "isButtonEntry?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "is button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isExpanded": {
          "kind": "property",
          "signature": "isExpanded?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "is element expanded boolean"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isGroup": {
          "kind": "property",
          "signature": "isGroup?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "is element a group boolean"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isLink": {
          "kind": "property",
          "signature": "isLink?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "is element a link boolean"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isOnTop": {
          "kind": "property",
          "signature": "isOnTop?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "is element on top boolean"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isSelected": {
          "kind": "property",
          "signature": "isSelected?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "is element selected boolean"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "leftPadding": {
          "kind": "property",
          "signature": "leftPadding?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "left padding value"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "leftPaddingExpanded": {
          "kind": "property",
          "signature": "leftPaddingExpanded?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "left padding when expanded value"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "navHeight": {
          "kind": "property",
          "signature": "navHeight?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Nav height value"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "position": {
          "kind": "property",
          "signature": "position?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "position value"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rightPadding": {
          "kind": "property",
          "signature": "rightPadding?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "right padding value"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept theme prop."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "INavStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "chevronButton": {
          "kind": "property",
          "signature": "chevronButton: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the chevron button inside the composite link and group elements."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "chevronIcon": {
          "kind": "property",
          "signature": "chevronIcon: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the chevron icon inside the composite link and group elements."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "compositeLink": {
          "kind": "property",
          "signature": "compositeLink: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the composite link container div element"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "group": {
          "kind": "property",
          "signature": "group: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the group root div."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "groupContent": {
          "kind": "property",
          "signature": "groupContent: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the group content div inside group."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "link": {
          "kind": "property",
          "signature": "link: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the link element extending the root style set for ActionButton component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "linkText": {
          "kind": "property",
          "signature": "linkText: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the link text container div element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "navItem": {
          "kind": "property",
          "signature": "navItem: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the nav links li element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "navItems": {
          "kind": "property",
          "signature": "navItems: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the nav links ul element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "initializeFocusRects": {
      "kind": "function",
      "signature": "export function initializeFocusRects(window?: Window): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "window": {
          "name": "window",
          "description": [
            {
              "kind": "text",
              "text": "the window used to add the event listeners"
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "Window"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Initializes the logic which:"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "1. Subscribes keydown and mousedown events. (It will only do it once per window, so it's safe to call this method multiple times.) 2. When the user presses directional keyboard keys, adds the 'ms-Fabric--isFocusVisible' classname to the document body. 3. When the user clicks a mouse button, we remove the classname if it exists."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "This logic allows components on the page to conditionally render focus treatments only if the global classname exists, which simplifies logic overall."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "initializeIcons": {
      "kind": "function",
      "signature": "export function initializeIcons(baseUrl?: string, options?: IIconOptions): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "baseUrl": {
          "name": "baseUrl",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "string"
        },
        "options": {
          "name": "options",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "IIconOptions"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "InjectionMode": {
      "kind": "enum",
      "values": {
        "appendChild": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Appends rules using appendChild."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "insertNode": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Inserts rules using the insertRule api."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "none": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Avoids style injection, use getRules() to read the styles."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Injection mode for the stylesheet."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "IObjectWithKey": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "key": {
          "kind": "property",
          "signature": "key?: string | number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IOverflowSet": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focus": {
          "kind": "method",
          "signature": "focus(forceIntoFirstElement?: boolean): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "True if focus could be set to an active element, false if no operation was taken."
              }
            ]
          },
          "parameters": {
            "forceIntoFirstElement": {
              "name": "forceIntoFirstElement",
              "description": [
                {
                  "kind": "text",
                  "text": "If true, focus will be forced into the first element, even if focus is already in the focus zone."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the first tabbable item in the zone."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "focusElement": {
          "kind": "method",
          "signature": "focusElement(childElement?: HTMLElement): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "True if focus could be set to an active element, false if no operation was taken."
              }
            ]
          },
          "parameters": {
            "childElement": {
              "name": "childElement",
              "description": [
                {
                  "kind": "text",
                  "text": "The child element within the zone to focus."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "HTMLElement"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to a specific child element within the zone. This can be used in conjunction with onBeforeFocus to created delayed focus scenarios (like animate the scroll position to the correct location and then focus.)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "IOverflowSetItemProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__index": {
          "kind": "method",
          "signature": "[propertyName: string]: any;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "any",
            "description": []
          },
          "parameters": {
            "propertyName": {
              "name": "propertyName",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Any additional properties to use when custom rendering menu items."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "key": {
          "kind": "property",
          "signature": "key: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Unique id to identify the item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "keytipProps": {
          "kind": "property",
          "signature": "keytipProps?: IKeytipProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IKeytipProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional keytip for the overflowSetItem."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IOverflowSetProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Class name"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IOverflowSet>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IOverflowSet>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "doNotContainWithinFocusZone": {
          "kind": "property",
          "signature": "doNotContainWithinFocusZone?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true do not contain the OverflowSet inside of a FocusZone, otherwise the OverflowSet will contain a FocusZone. If this is set to true focusZoneProps will be ignored. Use one or the other."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focusZoneProps": {
          "kind": "property",
          "signature": "focusZoneProps?: IFocusZoneProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IFocusZoneProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom properties for OverflowSet's FocusZone. If doNotContainWithinFocusZone is set to true focusZoneProps will be ignored. Use one or the other."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "items": {
          "kind": "property",
          "signature": "items?: IOverflowSetItemProps[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IOverflowSetItemProps[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An array of items to be rendered by your onRenderItem function in the primary content area"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "itemSubMenuProvider": {
          "kind": "property",
          "signature": "itemSubMenuProvider?: (item: IOverflowSetItemProps) => any[] | undefined;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: IOverflowSetItemProps) => any[] | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function that will take in an IOverflowSetItemProps and return the subMenu for that item. If not provided, will use 'item.subMenuProps.items' by default. This is only used if your overflow set has keytips."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "keytipSequences": {
          "kind": "property",
          "signature": "keytipSequences?: string[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional full keytip sequence for the overflow button, if it will have a keytip."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderItem": {
          "kind": "property",
          "signature": "onRenderItem: (item: IOverflowSetItemProps) => any;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: IOverflowSetItemProps) => any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Method to call when trying to render an item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderOverflowButton": {
          "kind": "property",
          "signature": "onRenderOverflowButton: IRenderFunction<any[]>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<any[]>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Rendering method for overflow button and contextual menu. The argument to the function is the overflowItems passed in as props to this function."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "overflowItems": {
          "kind": "property",
          "signature": "overflowItems?: IOverflowSetItemProps[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IOverflowSetItemProps[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An array of items to be passed to overflow contextual menu"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "role": {
          "kind": "property",
          "signature": "role?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The role for the OverflowSet."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IOverflowSetProps, IOverflowSetStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IOverflowSetProps, IOverflowSetStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "vertical": {
          "kind": "property",
          "signature": "vertical?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Change item layout direction to vertical/stacked."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IOverflowSetStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "item": {
          "kind": "property",
          "signature": "item?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The style that is layered onto each individual item in the overflow set."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "overflowButton": {
          "kind": "property",
          "signature": "overflowButton?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The style that is layered onto the overflow button for the overflow set."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The style that is layered onto the root element of OverflowSet."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IOverlay": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IOverlayProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional css class to apply to the Overlay"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IOverlay>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IOverlay>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDarkThemed": {
          "kind": "property",
          "signature": "isDarkThemed?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether to use the dark-themed overlay."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onClick": {
          "kind": "property",
          "signature": "onClick?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IOverlayStyleProps, IOverlayStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IOverlayStyleProps, IOverlayStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by HOC."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IOverlayStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept custom classNames"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDark": {
          "kind": "property",
          "signature": "isDark?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is overlay dark themed"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isNone": {
          "kind": "property",
          "signature": "isNone?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is overlay visible"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept theme prop."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IOverlayStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPage": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "data": {
          "kind": "property",
          "signature": "data?: any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "height": {
          "kind": "property",
          "signature": "height: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isSpacer": {
          "kind": "property",
          "signature": "isSpacer?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "itemCount": {
          "kind": "property",
          "signature": "itemCount: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "items": {
          "kind": "property",
          "signature": "items: any[] | undefined;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any[] | undefined",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "key": {
          "kind": "property",
          "signature": "key: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "startIndex": {
          "kind": "property",
          "signature": "startIndex: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "style": {
          "kind": "property",
          "signature": "style: any;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "top": {
          "kind": "property",
          "signature": "top: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPageProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "page": {
          "kind": "property",
          "signature": "page: IPage;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IPage",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The allocation data for the page."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "role": {
          "kind": "property",
          "signature": "role?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The role being assigned to the rendered page element by the list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPageSpecification": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "data": {
          "kind": "property",
          "signature": "data?: any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Data to pass through to the page when rendering."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "height": {
          "kind": "property",
          "signature": "height?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The estimated pixel height of the page."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "itemCount": {
          "kind": "property",
          "signature": "itemCount?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The number of items to allocate to the page."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "key": {
          "kind": "property",
          "signature": "key?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The key to use when creating the page."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPalette": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "UI Fabric color palette."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "accent": {
          "kind": "property",
          "signature": "accent: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for the accent."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "black": {
          "kind": "property",
          "signature": "black: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for the strongest color, which is black in the default theme. This is a very light color in inverted themes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "blackTranslucent40": {
          "kind": "property",
          "signature": "blackTranslucent40: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for blackTranslucent40."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "blue": {
          "kind": "property",
          "signature": "blue: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for blue."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "blueDark": {
          "kind": "property",
          "signature": "blueDark: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for blueDark."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "blueLight": {
          "kind": "property",
          "signature": "blueLight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for blueLight."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "blueMid": {
          "kind": "property",
          "signature": "blueMid: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for blueMid."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "green": {
          "kind": "property",
          "signature": "green: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for green."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "greenDark": {
          "kind": "property",
          "signature": "greenDark: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for greenDark."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "greenLight": {
          "kind": "property",
          "signature": "greenLight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for greenLight."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "magenta": {
          "kind": "property",
          "signature": "magenta: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for magenta."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "magentaDark": {
          "kind": "property",
          "signature": "magentaDark: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for magentaDark."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "magentaLight": {
          "kind": "property",
          "signature": "magentaLight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for magentaLight."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralDark": {
          "kind": "property",
          "signature": "neutralDark: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralDark."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralLight": {
          "kind": "property",
          "signature": "neutralLight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralLight."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralLighter": {
          "kind": "property",
          "signature": "neutralLighter: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralLighter."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralLighterAlt": {
          "kind": "property",
          "signature": "neutralLighterAlt: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralLighterAlt."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralPrimary": {
          "kind": "property",
          "signature": "neutralPrimary: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralPrimary."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralPrimaryAlt": {
          "kind": "property",
          "signature": "neutralPrimaryAlt: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralPrimaryAlt."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralQuaternary": {
          "kind": "property",
          "signature": "neutralQuaternary: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralQuaternary."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralQuaternaryAlt": {
          "kind": "property",
          "signature": "neutralQuaternaryAlt: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralQuaternaryAlt."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralSecondary": {
          "kind": "property",
          "signature": "neutralSecondary: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralSecondary."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralSecondaryAlt": {
          "kind": "property",
          "signature": "neutralSecondaryAlt: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralSecondaryAlt."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralTertiary": {
          "kind": "property",
          "signature": "neutralTertiary: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralTertiary."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "neutralTertiaryAlt": {
          "kind": "property",
          "signature": "neutralTertiaryAlt: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for neutralTertiaryAlt."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "orange": {
          "kind": "property",
          "signature": "orange: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for orange."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "orangeLight": {
          "kind": "property",
          "signature": "orangeLight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for orangeLight."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "orangeLighter": {
          "kind": "property",
          "signature": "orangeLighter: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for orangeLighter."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "purple": {
          "kind": "property",
          "signature": "purple: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for purple."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "purpleDark": {
          "kind": "property",
          "signature": "purpleDark: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for purpleDark."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "purpleLight": {
          "kind": "property",
          "signature": "purpleLight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for purpleLight."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "red": {
          "kind": "property",
          "signature": "red: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for red."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "redDark": {
          "kind": "property",
          "signature": "redDark: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for redDark."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "teal": {
          "kind": "property",
          "signature": "teal: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for teal."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "tealDark": {
          "kind": "property",
          "signature": "tealDark: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for tealDark."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "tealLight": {
          "kind": "property",
          "signature": "tealLight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for tealLight."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "themeDark": {
          "kind": "property",
          "signature": "themeDark: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for themeDark."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "themeDarkAlt": {
          "kind": "property",
          "signature": "themeDarkAlt: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for themeDarkAlt."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "themeDarker": {
          "kind": "property",
          "signature": "themeDarker: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for themeDarker."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "themeLight": {
          "kind": "property",
          "signature": "themeLight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for themeLight."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "themeLighter": {
          "kind": "property",
          "signature": "themeLighter: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for themeLighter."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "themeLighterAlt": {
          "kind": "property",
          "signature": "themeLighterAlt: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for themeLighterAlt."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "themePrimary": {
          "kind": "property",
          "signature": "themePrimary: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for themePrimary."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "themeSecondary": {
          "kind": "property",
          "signature": "themeSecondary: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for themeSecondary."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "themeTertiary": {
          "kind": "property",
          "signature": "themeTertiary: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for themeTertiary."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "white": {
          "kind": "property",
          "signature": "white: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for the softest color, which is white in the default theme. This is a very dark color in dark themes. This is the page background."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "whiteTranslucent40": {
          "kind": "property",
          "signature": "whiteTranslucent40: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for whiteTranslucent40"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "yellow": {
          "kind": "property",
          "signature": "yellow: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for yellow."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "yellowLight": {
          "kind": "property",
          "signature": "yellowLight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color code for yellowLight."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPanel": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "dismiss": {
          "kind": "property",
          "signature": "dismiss: (ev?: React.KeyboardEvent<HTMLElement>) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.KeyboardEvent<HTMLElement>) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Forces the panel to dismiss."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "open": {
          "kind": "property",
          "signature": "open: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Forces the panel to open."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPanelHeaderRenderer": {
      "kind": "interface",
      "extends": "IRenderFunction",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Renderer function which takes an additional parameter, the ID to use for the element containing the panel's title. This allows the "
        },
        {
          "kind": "code",
          "text": "aria-labelledby",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " for the panel popup to work correctly. Note that if "
        },
        {
          "kind": "code",
          "text": "headerTextId",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " is provided, it **must** be used on an element, or screen readers will be confused by the reference to a nonexistent ID."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__call": {
          "kind": "method",
          "signature": "(props?: IPanelProps, defaultRender?: IPanelHeaderRenderer, headerTextId?: string | undefined): JSX.Element | null;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element | null",
            "description": []
          },
          "parameters": {
            "props": {
              "name": "props",
              "description": [
                {
                  "kind": "text",
                  "text": "Props given to the panel"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "IPanelProps"
            },
            "defaultRender": {
              "name": "defaultRender",
              "description": [
                {
                  "kind": "text",
                  "text": "Default header renderer. If using this renderer in code that does not assign "
                },
                {
                  "kind": "code",
                  "text": "headerTextId",
                  "highlighter": "plain"
                },
                {
                  "kind": "text",
                  "text": " to an element elsewhere, it **must** be passed to this function."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "IPanelHeaderRenderer"
            },
            "headerTextId": {
              "name": "headerTextId",
              "description": [
                {
                  "kind": "text",
                  "text": "If provided, this **must** be used as the ID of an element containing the panel's title, because the panel popup uses this ID as its aria-labelledby."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "string | undefined"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "IPanelProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional css class to apply to the Panel"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "closeButtonAriaLabel": {
          "kind": "property",
          "signature": "closeButtonAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria label on close button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentId": {
          "kind": "property",
          "signature": "componentId?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Serves no function."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated property. Serves no function."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IPanel>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IPanel>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IPanel interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "customWidth": {
          "kind": "property",
          "signature": "customWidth?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom panel width, used only when type is set to PanelType.custom."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "elementToFocusOnDismiss": {
          "kind": "property",
          "signature": "elementToFocusOnDismiss?: HTMLElement;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "HTMLElement",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the HTMLElement to focus on when exiting the FocusTrapZone."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "firstFocusableSelector": {
          "kind": "property",
          "signature": "firstFocusableSelector?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "focusTrapZoneProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates the selector for first focusable item. Deprecated, use "
            },
            {
              "kind": "code",
              "text": "focusTrapZoneProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focusTrapZoneProps": {
          "kind": "property",
          "signature": "focusTrapZoneProps?: IFocusTrapZoneProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IFocusTrapZoneProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional props to pass to the FocusTrapZone component to manage focus in the panel."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "forceFocusInsideTrap": {
          "kind": "property",
          "signature": "forceFocusInsideTrap?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "focusTrapZoneProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates whether Panel should force focus inside the focus trap zone Deprecated, use "
            },
            {
              "kind": "code",
              "text": "focusTrapZoneProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hasCloseButton": {
          "kind": "property",
          "signature": "hasCloseButton?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Has the close button visible."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "headerClassName": {
          "kind": "property",
          "signature": "headerClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional parameter to provider the class name for header text"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "headerText": {
          "kind": "property",
          "signature": "headerText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Header text for the Panel."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ignoreExternalFocusing": {
          "kind": "property",
          "signature": "ignoreExternalFocusing?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "focusTrapZoneProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates if this Panel will ignore keeping track of HTMLElement that activated the Zone. Deprecated, use "
            },
            {
              "kind": "code",
              "text": "focusTrapZoneProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isBlocking": {
          "kind": "property",
          "signature": "isBlocking?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the panel uses a modal overlay or not"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isFooterAtBottom": {
          "kind": "property",
          "signature": "isFooterAtBottom?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Determines if content should stretch to fill available space putting footer at the bottom of the page"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isHiddenOnDismiss": {
          "kind": "property",
          "signature": "isHiddenOnDismiss?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the panel is hidden on dismiss, instead of destroyed in the DOM. Protects the contents from being destroyed when the panel is dismissed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isLightDismiss": {
          "kind": "property",
          "signature": "isLightDismiss?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the panel can be light dismissed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isOpen": {
          "kind": "property",
          "signature": "isOpen?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the panel is displayed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "layerProps": {
          "kind": "property",
          "signature": "layerProps?: ILayerProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ILayerProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional props to pass to the Layer component hosting the panel."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDismiss": {
          "kind": "property",
          "signature": "onDismiss?: (ev?: React.SyntheticEvent<HTMLElement>) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.SyntheticEvent<HTMLElement>) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback function for when the panel is closed, before the animation completes. If the panel should NOT be dismissed based on some keyboard event, then simply call ev.preventDefault() on it"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDismissed": {
          "kind": "property",
          "signature": "onDismissed?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback function which is called after the Panel is dismissed and the animation is complete."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onLightDismissClick": {
          "kind": "property",
          "signature": "onLightDismissClick?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom function to handle clicks outside the panel in lightdismiss mode"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onOuterClick": {
          "kind": "property",
          "signature": "onOuterClick?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom function to handle clicks outside this component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderBody": {
          "kind": "property",
          "signature": "onRenderBody?: IRenderFunction<IPanelProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IPanelProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom renderer for body region. Replaces any children passed into the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderFooter": {
          "kind": "property",
          "signature": "onRenderFooter?: IRenderFunction<IPanelProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IPanelProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom renderer for footer region. Replaces sticky footer."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderFooterContent": {
          "kind": "property",
          "signature": "onRenderFooterContent?: IRenderFunction<IPanelProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IPanelProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom renderer for content in the sticky footer"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderHeader": {
          "kind": "property",
          "signature": "onRenderHeader?: IPanelHeaderRenderer;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IPanelHeaderRenderer",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom renderer for header region. Replaces current title"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderNavigation": {
          "kind": "property",
          "signature": "onRenderNavigation?: IRenderFunction<IPanelProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IPanelProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom renderer navigation region. Replaces current close button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IPanelStyleProps, IPanelStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IPanelStyleProps, IPanelStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "type": {
          "kind": "property",
          "signature": "type?: PanelType;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PanelType",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Type of the panel."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPanelStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept custom classNames"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focusTrapZoneClassName": {
          "kind": "property",
          "signature": "focusTrapZoneClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Classname for FocusTrapZone element"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hasCloseButton": {
          "kind": "property",
          "signature": "hasCloseButton?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Panel has close button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "headerClassName": {
          "kind": "property",
          "signature": "headerClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional parameter to provider the class name for header text"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isAnimating": {
          "kind": "property",
          "signature": "isAnimating?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is animation currently running"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isFooterAtBottom": {
          "kind": "property",
          "signature": "isFooterAtBottom?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Determines if content should stretch to fill available space putting footer at the bottom of the page"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isFooterSticky": {
          "kind": "property",
          "signature": "isFooterSticky?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Based on state value setting footer to sticky or not"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isHiddenOnDismiss": {
          "kind": "property",
          "signature": "isHiddenOnDismiss?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is panel hidden on dismiss"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isOnRightSide": {
          "kind": "property",
          "signature": "isOnRightSide?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is panel on right side"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isOpen": {
          "kind": "property",
          "signature": "isOpen?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is Panel open"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "type": {
          "kind": "property",
          "signature": "type?: PanelType;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PanelType",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Type of the panel."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPanelStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "closeButton": {
          "kind": "property",
          "signature": "closeButton: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the close button IconButton element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "commands": {
          "kind": "property",
          "signature": "commands: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the navigation container element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "content": {
          "kind": "property",
          "signature": "content: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the body div element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "contentInner": {
          "kind": "property",
          "signature": "contentInner: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the Body and Footer container element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "footer": {
          "kind": "property",
          "signature": "footer: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the footer div element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "footerInner": {
          "kind": "property",
          "signature": "footerInner: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the inner footer div element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "header": {
          "kind": "property",
          "signature": "header: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the header container div element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "headerText": {
          "kind": "property",
          "signature": "headerText: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the header inner p element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hiddenPanel": {
          "kind": "property",
          "signature": "hiddenPanel: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the hidden element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "main": {
          "kind": "property",
          "signature": "main: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the main section element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "navigation": {
          "kind": "property",
          "signature": "navigation: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the close button container element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "overlay": {
          "kind": "property",
          "signature": "overlay: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the overlay element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "scrollableContent": {
          "kind": "property",
          "signature": "scrollableContent: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the scrollable content area container element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPeopleFloatingPickerProps": {
      "kind": "interface",
      "extends": "IBaseFloatingPickerProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IPeoplePickerItemProps": {
      "kind": "interface",
      "extends": "IPickerItemProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IPeoplePickerItemState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "contextualMenuVisible": {
          "kind": "property",
          "signature": "contextualMenuVisible: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPeoplePickerProps": {
      "kind": "interface",
      "extends": "IBasePickerProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IPersona": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IPersonaCoinProps": {
      "kind": "interface",
      "extends": "IPersonaSharedProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional css class to apply to the PersonaCoin"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<{}>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<{}>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IPersonaCoinStyleProps, IPersonaCoinStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IPersonaCoinStyleProps, IPersonaCoinStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPersonaCoinStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom class name."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "coinSize": {
          "kind": "property",
          "signature": "coinSize?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom persona coin size in pixel."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showUnknownPersonaCoin": {
          "kind": "property",
          "signature": "showUnknownPersonaCoin?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Decides whether to display coin for unknown persona"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "size": {
          "kind": "property",
          "signature": "size?: PersonaSize;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PersonaSize",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Decides the size of the control."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPersonaCoinStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "coin": {
          "kind": "property",
          "signature": "coin: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "image": {
          "kind": "property",
          "signature": "image: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "imageArea": {
          "kind": "property",
          "signature": "imageArea: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "initials": {
          "kind": "property",
          "signature": "initials: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "size10WithoutPresenceIcon": {
          "kind": "property",
          "signature": "size10WithoutPresenceIcon: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPersonaPresenceProps": {
      "kind": "interface",
      "extends": "IPersonaSharedProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<{}>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<{}>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IPersonaPresenceStyleProps, IPersonaPresenceStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IPersonaPresenceStyleProps, IPersonaPresenceStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPersonaPresenceStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom class name."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "presence": {
          "kind": "property",
          "signature": "presence?: PersonaPresence;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PersonaPresence",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Presence of the person to display - will not display presence if undefined."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "size": {
          "kind": "property",
          "signature": "size?: PersonaSize;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PersonaSize",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Decides the size of the control."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPersonaPresenceStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "presence": {
          "kind": "property",
          "signature": "presence: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "presenceIcon": {
          "kind": "property",
          "signature": "presenceIcon: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPersonaProps": {
      "kind": "interface",
      "extends": "IPersonaSharedProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional CSS class(es) to apply to the Persona"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IPersona>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IPersona>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IPersona interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderOptionalText": {
          "kind": "property",
          "signature": "onRenderOptionalText?: IRenderFunction<IPersonaProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IPersonaProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom renderer for the optional text."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderPrimaryText": {
          "kind": "property",
          "signature": "onRenderPrimaryText?: IRenderFunction<IPersonaProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IPersonaProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom renderer for the primary text."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderSecondaryText": {
          "kind": "property",
          "signature": "onRenderSecondaryText?: IRenderFunction<IPersonaProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IPersonaProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom renderer for the secondary text."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderTertiaryText": {
          "kind": "property",
          "signature": "onRenderTertiaryText?: IRenderFunction<IPersonaProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IPersonaProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom renderer for the tertiary text."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IPersonaStyleProps, IPersonaStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IPersonaStyleProps, IPersonaStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of variant rules"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPersonaSharedProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "allowPhoneInitials": {
          "kind": "property",
          "signature": "allowPhoneInitials?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether initials are calculated for phone numbers and number sequences. Example: Set property to true to get initials for project names consisting of numbers only."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "coinProps": {
          "kind": "property",
          "signature": "coinProps?: React.HTMLAttributes<HTMLDivElement>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.HTMLAttributes<HTMLDivElement>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional HTML element props for Persona coin."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "coinSize": {
          "kind": "property",
          "signature": "coinSize?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom persona coin size in pixel."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hidePersonaDetails": {
          "kind": "property",
          "signature": "hidePersonaDetails?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether to not render persona details, and just render the persona image/initials."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "imageAlt": {
          "kind": "property",
          "signature": "imageAlt?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Alt text for the image to use. Defaults to an empty string."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "imageInitials": {
          "kind": "property",
          "signature": "imageInitials?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The user's initials to display in the image area when there is no image."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "imageShouldFadeIn": {
          "kind": "property",
          "signature": "imageShouldFadeIn?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true, adds the css class 'is-fadeIn' to the image."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "imageShouldStartVisible": {
          "kind": "property",
          "signature": "imageShouldStartVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true, the image starts as visible and is hidden on error. Otherwise, the image is hidden until it is successfully loaded. This disables imageShouldFadeIn."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "imageUrl": {
          "kind": "property",
          "signature": "imageUrl?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Url to the image to use, should be a square aspect ratio and big enough to fit in the image area."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "initialsColor": {
          "kind": "property",
          "signature": "initialsColor?: PersonaInitialsColor | string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PersonaInitialsColor | string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background color when the user's initials are displayed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onPhotoLoadingStateChange": {
          "kind": "property",
          "signature": "onPhotoLoadingStateChange?: (newImageLoadState: ImageLoadState) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(newImageLoadState: ImageLoadState) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback for when loading state of the photo changes"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderCoin": {
          "kind": "property",
          "signature": "onRenderCoin?: IRenderFunction<IPersonaSharedProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IPersonaSharedProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom renderer for the coin"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderInitials": {
          "kind": "property",
          "signature": "onRenderInitials?: IRenderFunction<IPersonaSharedProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IPersonaSharedProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom renderer for the initials"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "optionalText": {
          "kind": "property",
          "signature": "optionalText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional text to display, usually a custom message set."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "presence": {
          "kind": "property",
          "signature": "presence?: PersonaPresence;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PersonaPresence",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Presence of the person to display - will not display presence if undefined."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryText": {
          "kind": "property",
          "signature": "primaryText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "text",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Primary text to display, usually the name of the person."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "secondaryText": {
          "kind": "property",
          "signature": "secondaryText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Secondary text to display, usually the role of the user."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showInitialsUntilImageLoads": {
          "kind": "property",
          "signature": "showInitialsUntilImageLoads?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true renders the initials while the image is loading. This only applies when an imageUrl is provided."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showSecondaryText": {
          "kind": "property",
          "signature": "showSecondaryText?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showUnknownPersonaCoin": {
          "kind": "property",
          "signature": "showUnknownPersonaCoin?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true, show the special coin for unknown persona. It has '?' in place of initials, with static font and background colors"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "size": {
          "kind": "property",
          "signature": "size?: PersonaSize;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PersonaSize",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Decides the size of the control."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "tertiaryText": {
          "kind": "property",
          "signature": "tertiaryText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Tertiary text to display, usually the status of the user."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "text": {
          "kind": "property",
          "signature": "text?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Primary text to display, usually the name of the person."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPersonaState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "isImageError": {
          "kind": "property",
          "signature": "isImageError?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isImageLoaded": {
          "kind": "property",
          "signature": "isImageLoaded?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPersonaStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom class name."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "coinSize": {
          "kind": "property",
          "signature": "coinSize?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom persona coin size in pixel."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "presence": {
          "kind": "property",
          "signature": "presence?: PersonaPresence;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PersonaPresence",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Presence of the person to display - will not display presence if undefined."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showSecondaryText": {
          "kind": "property",
          "signature": "showSecondaryText?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "size": {
          "kind": "property",
          "signature": "size?: PersonaSize;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PersonaSize",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Decides the size of the control."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPersonaStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "details": {
          "kind": "property",
          "signature": "details: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "optionalText": {
          "kind": "property",
          "signature": "optionalText: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryText": {
          "kind": "property",
          "signature": "primaryText: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "secondaryText": {
          "kind": "property",
          "signature": "secondaryText: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "tertiaryText": {
          "kind": "property",
          "signature": "tertiaryText: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "textContent": {
          "kind": "property",
          "signature": "textContent: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPickerItemProps": {
      "kind": "interface",
      "extends": "React.AllHTMLAttributes",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<{}>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<{}>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "index": {
          "kind": "property",
          "signature": "index: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "item": {
          "kind": "property",
          "signature": "item: T;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "T",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "key": {
          "kind": "property",
          "signature": "key?: string | number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onItemChange": {
          "kind": "property",
          "signature": "onItemChange?: (item: T, index: number) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: T, index: number) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Internal Use only, gives a callback to the renderer to call when an item has changed. This allows the base picker to keep track of changes in the items."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRemoveItem": {
          "kind": "property",
          "signature": "onRemoveItem?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "removeButtonAriaLabel": {
          "kind": "property",
          "signature": "removeButtonAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selected": {
          "kind": "property",
          "signature": "selected?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPivot": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the first pivot tab."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "IPivotItemProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The aria label of each pivot link which will read by screen reader instead of linkText."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Note that unless you have compelling requirements you should not override aria-label."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<{}>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<{}>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "headerButtonProps": {
          "kind": "property",
          "signature": "headerButtonProps?:",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        [key: string]: string | number | boolean;\n    }",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Props for the header command button supporting native props - data-* and aria-* - for each pivot header/link element"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "headerText": {
          "kind": "property",
          "signature": "headerText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text displayed of each pivot link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "itemCount": {
          "kind": "property",
          "signature": "itemCount?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An optional item count that gets displayed just after the linkText(itemCount)"
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Example: completed(4)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "itemIcon": {
          "kind": "property",
          "signature": "itemIcon?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An optional icon to show next to the pivot link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "itemKey": {
          "kind": "property",
          "signature": "itemKey?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An required key to uniquely identify a pivot item."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Note: The 'key' from react props cannot be used inside component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "keytipProps": {
          "kind": "property",
          "signature": "keytipProps?: IKeytipProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IKeytipProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional keytip for this PivotItem"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "linkText": {
          "kind": "property",
          "signature": "linkText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "headerText",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "The text displayed of each pivot link - renaming to "
            },
            {
              "kind": "code",
              "text": "headerText",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderItemLink": {
          "kind": "property",
          "signature": "onRenderItemLink?: IRenderFunction<IPivotItemProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IPivotItemProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom renderer for the pivot item link"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPivotProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional css class to apply to the Pivot"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IPivot>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IPivot>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IPivot interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getTabId": {
          "kind": "property",
          "signature": "getTabId?: (itemKey: string, index: number) => string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(itemKey: string, index: number) => string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional. Specify how IDs are generated for each tab header. Useful if you're rendering content outside and need to connect aria-labelledby."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "headersOnly": {
          "kind": "property",
          "signature": "headersOnly?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Specify whether to skip rendering the tabpanel with the content of the selected tab. Use this prop if you plan to separately render the tab content and don't want to leave an empty tabpanel in the page that may confuse Screen Readers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "initialSelectedIndex": {
          "kind": "property",
          "signature": "initialSelectedIndex?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The index of the pivot item initially selected."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "It only works when initialSelectedKey is not defined. You must not use them together."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "initialSelectedKey": {
          "kind": "property",
          "signature": "initialSelectedKey?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The key of the pivot item initially selected."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "It will make initialSelectedIndex not work. You must not use them together."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "linkFormat": {
          "kind": "property",
          "signature": "linkFormat?: PivotLinkFormat;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PivotLinkFormat",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Specify the PivotLinkFormat to use (links, tabs)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "linkSize": {
          "kind": "property",
          "signature": "linkSize?: PivotLinkSize;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PivotLinkSize",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Specify the PivotLinkSize to use (normal, large)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onLinkClick": {
          "kind": "property",
          "signature": "onLinkClick?: (item?: PivotItem, ev?: React.MouseEvent<HTMLElement>) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item?: PivotItem, ev?: React.MouseEvent<HTMLElement>) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback issued when the selected pivot item is changed"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedKey": {
          "kind": "property",
          "signature": "selectedKey?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The key of the selected pivot item."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "If set, this will override the Pivot's selected item state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IPivotStyleProps, IPivotStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IPivotStyleProps, IPivotStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPivotState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Usage:"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "html-tag",
          "token": "<Pivot>"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "html-tag",
          "token": "<PivotItem linkText=\"Foo\">"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "html-tag",
          "token": "<Label>"
        },
        {
          "kind": "text",
          "text": "Pivot #1"
        },
        {
          "kind": "html-tag",
          "token": "</Label>"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "html-tag",
          "token": "</PivotItem>"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "html-tag",
          "token": "<PivotItem linkText=\"Bar\">"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "html-tag",
          "token": "<Label>"
        },
        {
          "kind": "text",
          "text": "Pivot #2"
        },
        {
          "kind": "html-tag",
          "token": "</Label>"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "html-tag",
          "token": "</PivotItem>"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "html-tag",
          "token": "<PivotItem linkText=\"Bas\">"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "html-tag",
          "token": "<Label>"
        },
        {
          "kind": "text",
          "text": "Pivot #3"
        },
        {
          "kind": "html-tag",
          "token": "</Label>"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "html-tag",
          "token": "</PivotItem>"
        },
        {
          "kind": "text",
          "text": " "
        },
        {
          "kind": "html-tag",
          "token": "</Pivot>"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "links": {
          "kind": "property",
          "signature": "links: IPivotItemProps[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IPivotItemProps[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedKey": {
          "kind": "property",
          "signature": "selectedKey: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedTabId": {
          "kind": "property",
          "signature": "selectedTabId: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPivotStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "count": {
          "kind": "property",
          "signature": "count: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "icon": {
          "kind": "property",
          "signature": "icon: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "link": {
          "kind": "property",
          "signature": "link: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "linkContent": {
          "kind": "property",
          "signature": "linkContent: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "linkIsSelected": {
          "kind": "property",
          "signature": "linkIsSelected: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "text": {
          "kind": "property",
          "signature": "text: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPlainCard": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IPlainCardProps": {
      "kind": "interface",
      "extends": "IBaseCardProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "PlainCard component props."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "onRenderPlainCard": {
          "kind": "property",
          "signature": "onRenderPlainCard?: IRenderFunction<IPlainCardProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IPlainCardProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Render function to populate compact content area"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPlainCardStyleProps": {
      "kind": "interface",
      "extends": "IBaseCardStyleProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IPlainCardStyles": {
      "kind": "interface",
      "extends": "IBaseCardStyles",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IPoint": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Point interface."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "x": {
          "kind": "property",
          "signature": "x: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "y": {
          "kind": "property",
          "signature": "y: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPopup": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IPopupProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaDescribedBy": {
          "kind": "property",
          "signature": "ariaDescribedBy?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the element id referencing the element containing the description for the popup."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accessible label text for the popup."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabelledBy": {
          "kind": "property",
          "signature": "ariaLabelledBy?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the element id referencing the element containing label text for popup."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional class name for the root popup div."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IPopup>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IPopup>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IPopup interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDismiss": {
          "kind": "property",
          "signature": "onDismiss?: (ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLElement> | React.KeyboardEvent<HTMLElement>) => any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback function for when the popup is dismissed from the close button or light dismiss. If provided, will handle escape keypresses and call this. The event will be stopped/canceled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "role": {
          "kind": "property",
          "signature": "role?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria role for popup"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shouldRestoreFocus": {
          "kind": "property",
          "signature": "shouldRestoreFocus?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true, the unmounting of this component will cause focus to be restored to the element that had focus when first mounted."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPopupState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "needsVerticalScrollBar": {
          "kind": "property",
          "signature": "needsVerticalScrollBar?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPositioningContainer": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IPositioningContainerProps": {
      "kind": "interface",
      "extends": "IBaseProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaDescribedBy": {
          "kind": "property",
          "signature": "ariaDescribedBy?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the element id referencing the element containing the description for the positioningContainer."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accessible label text for positioningContainer."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabelledBy": {
          "kind": "property",
          "signature": "ariaLabelledBy?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the element id referencing the element containing label text for positioningContainer."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "backgroundColor": {
          "kind": "property",
          "signature": "backgroundColor?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background color of the positioningContainer in hex format ie. #ffffff."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bounds": {
          "kind": "property",
          "signature": "bounds?: IRectangle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRectangle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The bounding rectangle for which the contextual menu can appear in."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "CSS class to apply to the positioningContainer."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IPositioningContainer>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IPositioningContainer>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "All props for your component are to be defined here."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "coverTarget": {
          "kind": "property",
          "signature": "coverTarget?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true the position returned will have the menu element cover the target. If false then it will position next to the target;"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "directionalHint": {
          "kind": "property",
          "signature": "directionalHint?: DirectionalHint;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DirectionalHint",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "How the element should be positioned"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "directionalHintFixed": {
          "kind": "property",
          "signature": "directionalHintFixed?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true the position will not change sides in an attempt to fit the positioningContainer within bounds. It will still attempt to align it to whatever bounds are given."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "directionalHintForRTL": {
          "kind": "property",
          "signature": "directionalHintForRTL?: DirectionalHint;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DirectionalHint",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "How the element should be positioned in RTL layouts. If not specified, a mirror of "
            },
            {
              "kind": "code",
              "text": "directionalHint",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " will be used instead"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "doNotLayer": {
          "kind": "property",
          "signature": "doNotLayer?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true do not render on a new layer. If false render on a new layer."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "finalHeight": {
          "kind": "property",
          "signature": "finalHeight?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Specify the final height of the content. To be used when expanding the content dynamically so that positioningContainer can adjust its position."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "minPagePadding": {
          "kind": "property",
          "signature": "minPagePadding?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The minimum distance the positioningContainer will be away from the edge of the screen."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "offsetFromTarget": {
          "kind": "property",
          "signature": "offsetFromTarget?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The gap between the positioningContainer and the target"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDismiss": {
          "kind": "property",
          "signature": "onDismiss?: (ev?: any) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: any) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback when the positioningContainer tries to close."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onLayerMounted": {
          "kind": "property",
          "signature": "onLayerMounted?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback when the layer content has mounted."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onPositioned": {
          "kind": "property",
          "signature": "onPositioned?: (positions?: IPositionedData) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(positions?: IPositionedData) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback that is called once the positioningContainer has been correctly positioned."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "positioningContainerMaxHeight": {
          "kind": "property",
          "signature": "positioningContainerMaxHeight?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Set max height of positioningContainer When not set the positioningContainer will expand with contents up to the bottom of the screen"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "positioningContainerWidth": {
          "kind": "property",
          "signature": "positioningContainerWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom width for positioningContainer including borders. If value is 0, no width is applied."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "preventDismissOnScroll": {
          "kind": "property",
          "signature": "preventDismissOnScroll?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true then the onClose will not not dismiss on scroll"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "role": {
          "kind": "property",
          "signature": "role?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria role assigned to the positioningContainer (Eg. dialog, alertdialog)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "setInitialFocus": {
          "kind": "property",
          "signature": "setInitialFocus?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true then the positioningContainer will attempt to focus the first focusable element that it contains. If it doesn't find an element, no focus will be set and the method will return false. This means that it's the contents responsibility to either set focus or have focusable items."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "target": {
          "kind": "property",
          "signature": "target?: HTMLElement | string | MouseEvent | IPoint | null;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "HTMLElement | string | MouseEvent | IPoint | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The target that the positioningContainer should try to position itself based on. It can be either an HTMLElement a querySelector string of a valid HTMLElement or a MouseEvent. If MouseEvent is given then the origin point of the event will be used."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "targetPoint": {
          "kind": "property",
          "signature": "targetPoint?: IPoint;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IPoint",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "target",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Point used to position the positioningContainer. Deprecated, use "
            },
            {
              "kind": "code",
              "text": "target",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "useTargetPoint": {
          "kind": "property",
          "signature": "useTargetPoint?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Do not use."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "If true use a point rather than rectangle to position the positioningContainer. For example it can be used to position based on a click."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPositioningContainerState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "heightOffset": {
          "kind": "property",
          "signature": "heightOffset?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Tracks the current height offset and updates during the height animation when props.finalHeight is specified."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "positions": {
          "kind": "property",
          "signature": "positions?: IPositionedData;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IPositionedData",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Current set of calcualted positions for the outermost parent container."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IProgressIndicator": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focus": {
          "kind": "property",
          "signature": "focus: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IProgressIndicatorProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaValueText": {
          "kind": "property",
          "signature": "ariaValueText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Text alternative of the progress status, used by screen readers for reading the value of the progress."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "barHeight": {
          "kind": "property",
          "signature": "barHeight?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Height of the ProgressIndicator"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional css class to apply to the ProgressIndicator"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IProgressIndicator>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IProgressIndicator>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "description": {
          "kind": "property",
          "signature": "description?: React.ReactNode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.ReactNode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Text describing or supplementing the operation. May be a string or React virtual elements."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label?: React.ReactNode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.ReactNode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Label to display above the control. May be a string or React virtual elements."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderProgress": {
          "kind": "property",
          "signature": "onRenderProgress?: IRenderFunction<IProgressIndicatorProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IProgressIndicatorProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A render override for the progress track."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "percentComplete": {
          "kind": "property",
          "signature": "percentComplete?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Percentage of the operation's completeness. If this is not set, the indeterminate progress animation will be shown instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "progressHidden": {
          "kind": "property",
          "signature": "progressHidden?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not to hide the progress state."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IProgressIndicatorStyleProps, IProgressIndicatorStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IProgressIndicatorStyleProps, IProgressIndicatorStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "title": {
          "kind": "property",
          "signature": "title?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "label",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated at v0.43.0, to be removed at >= v0.53.0. Use "
            },
            {
              "kind": "code",
              "text": "label",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IProgressIndicatorStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "barHeight": {
          "kind": "property",
          "signature": "barHeight?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept custom classNames"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "indeterminate": {
          "kind": "property",
          "signature": "indeterminate?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IProgressIndicatorStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "itemDescription": {
          "kind": "property",
          "signature": "itemDescription: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "itemName": {
          "kind": "property",
          "signature": "itemName: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "itemProgress": {
          "kind": "property",
          "signature": "itemProgress: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "progressBar": {
          "kind": "property",
          "signature": "progressBar: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "progressTrack": {
          "kind": "property",
          "signature": "progressTrack: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IPropsWithStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "TStyleProps",
        "TStyleSet extends IStyleSet<TStyleSet>"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<TStyleProps, TStyleSet>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<TStyleProps, TStyleSet>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IRating": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IRatingProps": {
      "kind": "interface",
      "extends": "React.AllHTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Rating component props."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "allowZeroStars": {
          "kind": "property",
          "signature": "allowZeroStars?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Allow the rating value to be set to 0 instead of a minimum of 1."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabelFormat": {
          "kind": "property",
          "signature": "ariaLabelFormat?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional label format for star ratings, will be read by screen readers, defaults to ''. Can be used like \"{0} of {1} stars selected\". Where {0} will be subsituted by the current rating and {1} will be subsituted by the max rating."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabelId": {
          "kind": "property",
          "signature": "ariaLabelId?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "getAriaLabel",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated: Optional id of label describing this instance of Rating. Use "
            },
            {
              "kind": "code",
              "text": "getAriaLabel",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IRating>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IRating>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IRating interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getAriaLabel": {
          "kind": "property",
          "signature": "getAriaLabel?: (rating: number, max: number) => string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(rating: number, max: number) => string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "icon": {
          "kind": "property",
          "signature": "icon?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom icon, defaults to FavoriteStar"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "max": {
          "kind": "property",
          "signature": "max?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Maximum rating, defaults to 5, has to be >= min"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "min": {
          "kind": "property",
          "signature": "min?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "No longer used."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Minimum rating, defaults to 1, has to be >= 0"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChange": {
          "kind": "property",
          "signature": "onChange?: (event: React.FocusEvent<HTMLElement>, rating?: number) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(event: React.FocusEvent<HTMLElement>, rating?: number) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback issued when the rating changes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChanged": {
          "kind": "property",
          "signature": "onChanged?: (rating: number) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(rating: number) => void",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "onChange",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rating": {
          "kind": "property",
          "signature": "rating?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Selected rating, has to be an integer between min and max"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "readOnly": {
          "kind": "property",
          "signature": "readOnly?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional flag to mark rating control as readOnly"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "size": {
          "kind": "property",
          "signature": "size?: RatingSize;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "RatingSize",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Size of rating, defaults to small"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IRatingStyleProps, IRatingStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IRatingStyleProps, IRatingStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme (provided through customization.)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IRatingState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "rating": {
          "kind": "property",
          "signature": "rating: number | null | undefined;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | null | undefined",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IRatingStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "readOnly": {
          "kind": "property",
          "signature": "readOnly?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IRatingStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "labelText": {
          "kind": "property",
          "signature": "labelText: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ratingButton": {
          "kind": "property",
          "signature": "ratingButton: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ratingFocusZone": {
          "kind": "property",
          "signature": "ratingFocusZone: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ratingStar": {
          "kind": "property",
          "signature": "ratingStar: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ratingStarBack": {
          "kind": "property",
          "signature": "ratingStarBack: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ratingStarFront": {
          "kind": "property",
          "signature": "ratingStarFront: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ratingStarIsLarge": {
          "kind": "property",
          "signature": "ratingStarIsLarge: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ratingStarIsSmall": {
          "kind": "property",
          "signature": "ratingStarIsSmall: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootIsLarge": {
          "kind": "property",
          "signature": "rootIsLarge: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rootIsSmall": {
          "kind": "property",
          "signature": "rootIsSmall: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IRawStyle": {
      "kind": "interface",
      "extends": "IRawStyleBase",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "IStyleObject extends a raw style objects, but allows selectors to be defined under the selectors node."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "displayName": {
          "kind": "property",
          "signature": "displayName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Display name for the style."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectors": {
          "kind": "property",
          "signature": "selectors?:",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        [key: string]: IStyle;\n    }",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom selectors for the style."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IRectangle": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Rectangle interface."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "bottom": {
          "kind": "property",
          "signature": "bottom?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "height": {
          "kind": "property",
          "signature": "height: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "left": {
          "kind": "property",
          "signature": "left: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "right": {
          "kind": "property",
          "signature": "right?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "top": {
          "kind": "property",
          "signature": "top: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "width": {
          "kind": "property",
          "signature": "width: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IRenderComponent": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "TProps"
      ],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "An interface representing a component that will not output any DOM, will just render its children and pass through items to modify the children."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "children": {
          "kind": "property",
          "signature": "children: (props: TProps) => JSX.Element;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(props: TProps) => JSX.Element",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "JSX.Element to return in this component's render() function."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IRenderFunction": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "P"
      ],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Render function interface for providing overrideable render callbacks."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__call": {
          "kind": "method",
          "signature": "(props?: P, defaultRender?: (props?: P) => JSX.Element | null): JSX.Element | null;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element | null",
            "description": []
          },
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "P"
            },
            "defaultRender": {
              "name": "defaultRender",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "(props?: P) => JSX.Element | null"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "IResizeGroup": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "remeasure": {
          "kind": "method",
          "signature": "remeasure(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Remeasures the available space."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "IResizeGroupProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional css class to apply to the Component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IResizeGroup>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IResizeGroup>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IResizeGroup interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "data": {
          "kind": "property",
          "signature": "data: any;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Initial data to be passed to the onRenderData function. When there is no onGrowData provided, this data should represent what should be passed to the render function when the parent container of the ResizeGroup is at it's maximum supported width. A cacheKey property may optionally be included as part of the data. Two data objects with the same cacheKey will be assumed to take up the same width and will prevent measurements. The type of cacheKey is a string."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dataDidRender": {
          "kind": "property",
          "signature": "dataDidRender?: (renderedData: any) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(renderedData: any) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function to be called every time data is rendered. It provides the data that was actually rendered. A use case would be adding telemetry when a particular control is shown in an overflow well or dropped as a result of onReduceData or to count the number of renders that an implementation of onReduceData triggers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onGrowData": {
          "kind": "property",
          "signature": "onGrowData?: (prevData: any) => any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(prevData: any) => any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function to be performed on the data in order to increase its width. It is called in scenarios where the container has more room than the previous render and we may be able to fit more content. If there are no more scaling operations to perform on teh data, it should return undefined to prevent an infinite render loop."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onReduceData": {
          "kind": "property",
          "signature": "onReduceData: (prevData: any) => any;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(prevData: any) => any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function to be performed on the data in order to reduce its width and make it fit into the given space. If there are no more scaling steps to apply, it should return undefined to prevent an infinite render loop."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderData": {
          "kind": "property",
          "signature": "onRenderData: (data: any) => JSX.Element;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(data: any) => JSX.Element",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function to render the data. Called when rendering the contents to the screen and when rendering in a hidden div to measure the size of the contents."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IResizeGroupStyleProps, IResizeGroupStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IResizeGroupStyleProps, IResizeGroupStyles>",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Removed to reduce bundle size. Please use "
            },
            {
              "kind": "code",
              "text": "className",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " and add css rules to "
            },
            {
              "kind": "code",
              "text": "className",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by HOC."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IResizeGroupState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "dataToMeasure": {
          "kind": "property",
          "signature": "dataToMeasure?: any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Data to render in a hidden div for measurement"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "measureContainer": {
          "kind": "property",
          "signature": "measureContainer?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Set to true when the content container might have new dimensions and should be remeasured."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "renderedData": {
          "kind": "property",
          "signature": "renderedData?: any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Final data used to render proper sized component"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "resizeDirection": {
          "kind": "property",
          "signature": "resizeDirection?: 'grow' | 'shrink';",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "'grow' | 'shrink'",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Are we resizing to accommodate having more or less available space? The 'grow' direction is when the container may have more room than the last render, such as when a window resize occurs. This means we will try to fit more content in the window. The 'shrink' direction is when the contents don't fit in the container and we need to find a transformation of the data that makes everything fit."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IResizeGroupStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept custom classNames"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept theme prop."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IResizeGroupStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IRGB": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "a": {
          "kind": "property",
          "signature": "a?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "b": {
          "kind": "property",
          "signature": "b: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "g": {
          "kind": "property",
          "signature": "g: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "r": {
          "kind": "property",
          "signature": "r: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IScheme": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "disableGlobalClassNames": {
          "kind": "property",
          "signature": "disableGlobalClassNames: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This setting is for a very narrow use case and you probably don't need to worry about, unless you share a environment with others that also use fabric. It is used for disabling global styles on fabric components. This will prevent global overrides that might have been set by other fabric users from applying to your components. When you set this setting to "
            },
            {
              "kind": "code",
              "text": "true",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " on your theme the components in the subtree of your Customizer will not get the global styles applied to them."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "fonts": {
          "kind": "property",
          "signature": "fonts: IFontStyles;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IFontStyles",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isInverted": {
          "kind": "property",
          "signature": "isInverted: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "palette": {
          "kind": "property",
          "signature": "palette: IPalette;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IPalette",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "semanticColors": {
          "kind": "property",
          "signature": "semanticColors: ISemanticColors;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISemanticColors",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IScrollablePane": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "forceLayoutUpdate": {
          "kind": "method",
          "signature": "forceLayoutUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Triggers a layout update for the pane."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getScrollPosition": {
          "kind": "method",
          "signature": "getScrollPosition(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the current scroll position of the scrollable pane"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "IScrollablePaneContext": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "scrollablePane": {
          "kind": "property",
          "signature": "scrollablePane?:",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        subscribe: (handler: (container: HTMLElement, stickyContainer: HTMLElement) => void) => void;\n        unsubscribe: (handler: (container: HTMLElement, stickyContainer: HTMLElement) => void) => void;\n        addSticky: (sticky: Sticky) => void;\n        removeSticky: (sticky: Sticky) => void;\n        updateStickyRefHeights: () => void;\n        sortSticky: (sticky: Sticky) => void;\n        notifySubscribers: (sort?: boolean) => void;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IScrollablePaneProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional css class to apply to the ScrollablePane"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IScrollablePane>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IScrollablePane>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IScrollablePane interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "initialScrollPosition": {
          "kind": "property",
          "signature": "initialScrollPosition?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the initial scroll position of the ScrollablePane"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "scrollbarVisibility": {
          "kind": "property",
          "signature": "scrollbarVisibility?: ScrollbarVisibility;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ScrollbarVisibility",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IScrollablePaneStyleProps, IScrollablePaneStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IScrollablePaneStyleProps, IScrollablePaneStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by HOC."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IScrollablePaneState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "scrollbarHeight": {
          "kind": "property",
          "signature": "scrollbarHeight: number | undefined;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | undefined",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "scrollbarWidth": {
          "kind": "property",
          "signature": "scrollbarWidth: number | undefined;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | undefined",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "stickyBottomHeight": {
          "kind": "property",
          "signature": "stickyBottomHeight: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "stickyTopHeight": {
          "kind": "property",
          "signature": "stickyTopHeight: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IScrollablePaneStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept custom classNames"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "scrollbarVisibility": {
          "kind": "property",
          "signature": "scrollbarVisibility?: IScrollablePaneProps['scrollbarVisibility'];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IScrollablePaneProps['scrollbarVisibility']",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept theme prop."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IScrollablePaneStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "contentContainer": {
          "kind": "property",
          "signature": "contentContainer: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the contentContainer element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "stickyAbove": {
          "kind": "property",
          "signature": "stickyAbove: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the stickyAbove element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "stickyBelow": {
          "kind": "property",
          "signature": "stickyBelow: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the stickyBelow element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "stickyBelowItems": {
          "kind": "property",
          "signature": "stickyBelowItems: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style set for the stickyBelowItems element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "isDark": {
      "kind": "function",
      "signature": "export function isDark(color: IColor): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {
        "color": {
          "name": "color",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "IColor"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "isDirectionalKeyCode": {
      "kind": "function",
      "signature": "export function isDirectionalKeyCode(which: number): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {
        "which": {
          "name": "which",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Returns true if the keycode is a directional keyboard key."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "ISearchBox": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus inside the search input box."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "hasFocus": {
          "kind": "method",
          "signature": "hasFocus(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns whether or not the SearchBox has focus"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ISearchBoxProps": {
      "kind": "interface",
      "extends": "React.InputHTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The aria label of the SearchBox for the benefit of screen readers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "CSS class to apply to the SearchBox."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "clearButtonProps": {
          "kind": "property",
          "signature": "clearButtonProps?: IButtonProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IButtonProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The props for the clear button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<ISearchBox>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<ISearchBox>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the ISearchBox interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "defaultValue": {
          "kind": "property",
          "signature": "defaultValue?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Not implmented."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "The default value of the text in the SearchBox, in the case of an uncontrolled component. Up till now, this has not been implemented, deprecating. Will re-implement if uncontrolled component behavior is implemented."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disableAnimation": {
          "kind": "property",
          "signature": "disableAnimation?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not to animate the SearchBox icon on focus."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconProps": {
          "kind": "property",
          "signature": "iconProps?: Pick<IIconProps, Exclude<keyof IIconProps, 'className'>>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Pick<IIconProps, Exclude<keyof IIconProps, 'className'>>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The props for the icon."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "labelText": {
          "kind": "property",
          "signature": "labelText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "placeholder",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated. Use "
            },
            {
              "kind": "code",
              "text": "placeholder",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChange": {
          "kind": "property",
          "signature": "onChange?: (newValue: any) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(newValue: any) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback function for when the typed input for the SearchBox has changed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChanged": {
          "kind": "property",
          "signature": "onChanged?: (newValue: any) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(newValue: any) => void",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "onChange",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated at v0.52.2, use "
            },
            {
              "kind": "code",
              "text": "onChange",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onClear": {
          "kind": "property",
          "signature": "onClear?: (ev?: any) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: any) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback executed when the user clears the search box by either clicking 'X' or hitting escape."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onEscape": {
          "kind": "property",
          "signature": "onEscape?: (ev?: any) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: any) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback executed when the user presses escape in the search box."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onSearch": {
          "kind": "property",
          "signature": "onSearch?: (newValue: any) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(newValue: any) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback executed when the user presses enter in the search box."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "placeholder": {
          "kind": "property",
          "signature": "placeholder?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Placeholder for the search box."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<ISearchBoxStyleProps, ISearchBoxStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<ISearchBoxStyleProps, ISearchBoxStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme (provided through customization.)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "underlined": {
          "kind": "property",
          "signature": "underlined?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not the SearchBox is underlined."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "value?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The value of the text in the SearchBox."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISearchBoxState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "hasFocus": {
          "kind": "property",
          "signature": "hasFocus?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "id": {
          "kind": "property",
          "signature": "id?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "value?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISearchBoxStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disableAnimation": {
          "kind": "property",
          "signature": "disableAnimation?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hasFocus": {
          "kind": "property",
          "signature": "hasFocus?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hasInput": {
          "kind": "property",
          "signature": "hasInput?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "underlined": {
          "kind": "property",
          "signature": "underlined?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISearchBoxStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "clearButton": {
          "kind": "property",
          "signature": "clearButton?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "field": {
          "kind": "property",
          "signature": "field?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "icon": {
          "kind": "property",
          "signature": "icon?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconContainer": {
          "kind": "property",
          "signature": "iconContainer?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISelectableDroppableTextProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [
        "TComponent",
        "TListenerElement = TComponent"
      ],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "TComponent - Component used for reference properties, such as componentRef TListenerElement - Listener element associated with HTML event callbacks. Optional. If not provided, TComponent is assumed."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria Label for the ISelectableDroppableText for screen reader users."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "calloutProps": {
          "kind": "property",
          "signature": "calloutProps?: ICalloutProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICalloutProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom properties for ISelectableDroppableText's Callout used to render options."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If provided, additional class name to provide on the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<TComponent>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<TComponent>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the ISelectableDroppableText interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "defaultSelectedKey": {
          "kind": "property",
          "signature": "defaultSelectedKey?: string | number | string[] | number[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | number | string[] | number[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The key(s) that will be initially used to set a selected item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not the ISelectableDroppableText is disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "errorMessage": {
          "kind": "property",
          "signature": "errorMessage?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Descriptive label for the ISelectableDroppableText Error Message"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "id": {
          "kind": "property",
          "signature": "id?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Id of the ISelectableDroppableText"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Descriptive label for the ISelectableDroppableText"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderContainer": {
          "kind": "property",
          "signature": "onRenderContainer?: IRenderFunction<ISelectableDroppableTextProps<TComponent>>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<ISelectableDroppableTextProps<TComponent>>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom renderer for the ISelectableDroppableText container"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderItem": {
          "kind": "property",
          "signature": "onRenderItem?: IRenderFunction<ISelectableOption>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<ISelectableOption>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom renderer for the ISelectableDroppableText options"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderList": {
          "kind": "property",
          "signature": "onRenderList?: IRenderFunction<ISelectableDroppableTextProps<TComponent>>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<ISelectableDroppableTextProps<TComponent>>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom renderer for the ISelectableDroppableText list"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderOption": {
          "kind": "property",
          "signature": "onRenderOption?: IRenderFunction<ISelectableOption>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<ISelectableOption>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom renderer for the ISelectableDroppableText option content"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "options": {
          "kind": "property",
          "signature": "options?: any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Collection of options for this ISelectableDroppableText"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "panelProps": {
          "kind": "property",
          "signature": "panelProps?: IPanelProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IPanelProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom properties for ISelectableDroppableText's Panel used to render options on small devices."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "required": {
          "kind": "property",
          "signature": "required?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not the ISelectableDroppableText is required."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedKey": {
          "kind": "property",
          "signature": "selectedKey?: string | number | string[] | number[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | number | string[] | number[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The key(s) of the selected item. If you provide this, you must maintain selection state by observing onChange events and passing a new value in when changed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISelectableOption": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The aria label for the dropdown option. If not present, the "
            },
            {
              "kind": "code",
              "text": "text",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " will be used."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "data": {
          "kind": "property",
          "signature": "data?: any;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Data available to custom onRender functions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the option is disabled"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "index": {
          "kind": "property",
          "signature": "index?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Index for this option"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "itemType": {
          "kind": "property",
          "signature": "itemType?: SelectableOptionMenuItemType;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SelectableOptionMenuItemType",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Text to render for this option"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "key": {
          "kind": "property",
          "signature": "key: string | number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Arbitrary string associated with this option."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selected": {
          "kind": "property",
          "signature": "selected?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If option is selected."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "text": {
          "kind": "property",
          "signature": "text: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Text to render for this option"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "title": {
          "kind": "property",
          "signature": "title?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Title attribute (built in tooltip) for a given option."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISelectedItemProps": {
      "kind": "interface",
      "extends": "IPickerItemProps",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "onCopyItem": {
          "kind": "property",
          "signature": "onCopyItem: (item: T) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: T) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISelectedPeopleItemProps": {
      "kind": "interface",
      "extends": "ISelectedItemProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "onExpandItem": {
          "kind": "property",
          "signature": "onExpandItem?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "renderPersonaCoin": {
          "kind": "property",
          "signature": "renderPersonaCoin?: IRenderFunction<IPersonaProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IPersonaProps>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "renderPrimaryText": {
          "kind": "property",
          "signature": "renderPrimaryText?: IRenderFunction<IPersonaProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<IPersonaProps>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISelectedPeopleProps": {
      "kind": "interface",
      "extends": "IBaseSelectedItemsListProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "copyMenuItemText": {
          "kind": "property",
          "signature": "copyMenuItemText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "editMenuItemText": {
          "kind": "property",
          "signature": "editMenuItemText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "floatingPickerProps": {
          "kind": "property",
          "signature": "floatingPickerProps?: IBaseFloatingPickerProps<IPersonaProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IBaseFloatingPickerProps<IPersonaProps>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getEditingItemText": {
          "kind": "property",
          "signature": "getEditingItemText?: (item: IExtendedPersonaProps) => string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: IExtendedPersonaProps) => string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onExpandGroup": {
          "kind": "property",
          "signature": "onExpandGroup?: (item: IExtendedPersonaProps) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: IExtendedPersonaProps) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderFloatingPicker": {
          "kind": "property",
          "signature": "onRenderFloatingPicker?: (props: IBaseFloatingPickerProps<IPersonaProps>) => JSX.Element;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(props: IBaseFloatingPickerProps<IPersonaProps>) => JSX.Element",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "removeMenuItemText": {
          "kind": "property",
          "signature": "removeMenuItemText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISelection": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "canSelectItem": {
          "kind": "property",
          "signature": "canSelectItem: (item: IObjectWithKey, index?: number) => boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: IObjectWithKey, index?: number) => boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "count": {
          "kind": "property",
          "signature": "count: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getItems": {
          "kind": "method",
          "signature": "getItems(): IObjectWithKey[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "IObjectWithKey[]",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getSelectedCount": {
          "kind": "method",
          "signature": "getSelectedCount(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getSelectedIndices": {
          "kind": "method",
          "signature": "getSelectedIndices(): number[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number[]",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getSelection": {
          "kind": "method",
          "signature": "getSelection(): IObjectWithKey[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "IObjectWithKey[]",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isAllSelected": {
          "kind": "method",
          "signature": "isAllSelected(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isIndexSelected": {
          "kind": "method",
          "signature": "isIndexSelected(index: number): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isKeySelected": {
          "kind": "method",
          "signature": "isKeySelected(key: string): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "key": {
              "name": "key",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isModal": {
          "kind": "method",
          "signature": "isModal?(): boolean;",
          "accessModifier": "",
          "isOptional": true,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isRangeSelected": {
          "kind": "method",
          "signature": "isRangeSelected(fromIndex: number, count: number): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "fromIndex": {
              "name": "fromIndex",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "count": {
              "name": "count",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "mode": {
          "kind": "property",
          "signature": "mode: SelectionMode;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SelectionMode",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectToIndex": {
          "kind": "method",
          "signature": "selectToIndex(index: number, clearSelection?: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "clearSelection": {
              "name": "clearSelection",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "selectToKey": {
          "kind": "method",
          "signature": "selectToKey(key: string, clearSelection?: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "key": {
              "name": "key",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "clearSelection": {
              "name": "clearSelection",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setAllSelected": {
          "kind": "method",
          "signature": "setAllSelected(isAllSelected: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "isAllSelected": {
              "name": "isAllSelected",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setChangeEvents": {
          "kind": "method",
          "signature": "setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "isEnabled": {
              "name": "isEnabled",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "boolean"
            },
            "suppressChange": {
              "name": "suppressChange",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setIndexSelected": {
          "kind": "method",
          "signature": "setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "isSelected": {
              "name": "isSelected",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "boolean"
            },
            "shouldAnchor": {
              "name": "shouldAnchor",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setItems": {
          "kind": "method",
          "signature": "setItems(items: IObjectWithKey[], shouldClear: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "items": {
              "name": "items",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IObjectWithKey[]"
            },
            "shouldClear": {
              "name": "shouldClear",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setKeySelected": {
          "kind": "method",
          "signature": "setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "key": {
              "name": "key",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "isSelected": {
              "name": "isSelected",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "boolean"
            },
            "shouldAnchor": {
              "name": "shouldAnchor",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setModal": {
          "kind": "method",
          "signature": "setModal?(isModal: boolean): void;",
          "accessModifier": "",
          "isOptional": true,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "isModal": {
              "name": "isModal",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toggleAllSelected": {
          "kind": "method",
          "signature": "toggleAllSelected(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toggleIndexSelected": {
          "kind": "method",
          "signature": "toggleIndexSelected(index: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toggleKeySelected": {
          "kind": "method",
          "signature": "toggleKeySelected(key: string): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "key": {
              "name": "key",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toggleRangeSelected": {
          "kind": "method",
          "signature": "toggleRangeSelected(fromIndex: number, count: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "fromIndex": {
              "name": "fromIndex",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "count": {
              "name": "count",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ISelectionOptions": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "canSelectItem": {
          "kind": "property",
          "signature": "canSelectItem?: (item: IObjectWithKey, index?: number) => boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: IObjectWithKey, index?: number) => boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getKey": {
          "kind": "property",
          "signature": "getKey?: (item: IObjectWithKey, index?: number) => string | number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: IObjectWithKey, index?: number) => string | number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onSelectionChanged": {
          "kind": "property",
          "signature": "onSelectionChanged?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectionMode": {
          "kind": "property",
          "signature": "selectionMode?: SelectionMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SelectionMode",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISelectionZone": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ignoreNextFocus": {
          "kind": "property",
          "signature": "ignoreNextFocus: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISelectionZoneProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disableAutoSelectOnInputElements": {
          "kind": "property",
          "signature": "disableAutoSelectOnInputElements?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "enterModalOnTouch": {
          "kind": "property",
          "signature": "enterModalOnTouch?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isSelectedOnFocus": {
          "kind": "property",
          "signature": "isSelectedOnFocus?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "layout": {
          "kind": "property",
          "signature": "layout?:",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{}",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "No longer in use, focus is now managed by FocusZone"
            }
          ],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onItemContextMenu": {
          "kind": "property",
          "signature": "onItemContextMenu?: (item?: any, index?: number, ev?: Event) => void | boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item?: any, index?: number, ev?: Event) => void | boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onItemInvoked": {
          "kind": "property",
          "signature": "onItemInvoked?: (item?: IObjectWithKey, index?: number, ev?: Event) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item?: IObjectWithKey, index?: number, ev?: Event) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selection": {
          "kind": "property",
          "signature": "selection: ISelection;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISelection",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectionMode": {
          "kind": "property",
          "signature": "selectionMode?: SelectionMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SelectionMode",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectionPreservedOnEmptyClick": {
          "kind": "property",
          "signature": "selectionPreservedOnEmptyClick?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "isElementFocusSubZone": {
      "kind": "function",
      "signature": "export function isElementFocusSubZone(element?: HTMLElement): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {
        "element": {
          "name": "element",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "HTMLElement"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Determines if a given element is a focus sub zone."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "isElementFocusZone": {
      "kind": "function",
      "signature": "export function isElementFocusZone(element?: HTMLElement): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {
        "element": {
          "name": "element",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "HTMLElement"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Determines if a given element is a focus zone."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "isElementTabbable": {
      "kind": "function",
      "signature": "export function isElementTabbable(element: HTMLElement, checkTabIndex?: boolean): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {
        "element": {
          "name": "element",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        },
        "checkTabIndex": {
          "name": "checkTabIndex",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Determines if an element can receive focus programmatically or via a mouse click. If checkTabIndex is true, additionally checks to ensure the element can be focused with the tab key, meaning tabIndex != -1."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "isElementVisible": {
      "kind": "function",
      "signature": "export function isElementVisible(element: HTMLElement | undefined | null): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {
        "element": {
          "name": "element",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement | undefined | null"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Determines if an element is visible."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "ISemanticColors": {
      "kind": "interface",
      "extends": "ISemanticTextColors",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The collection of all semantic slots for colors used in themes."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Note: text colors are defined in ISemanticTextColors.ts."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "## Naming Convention"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "The name of a semantic slot can quickly tell you how it’s meant to be used. It generally follows this format:"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "[category name][element name][checked state][hovered/pressed/disabled state] [category name] – The “family” that this slot belongs to. [element name] – The name of the thing being targeted, such as the background or border. [checked state] – Whether the thing is checked. We assume things are unchecked by default, so no need to specify the unchecked state. (We used “checked” to refer to anything that is on, selected, toggled, highlighted, emphasized, etc.) [hovered/pressed/disabled state] – One of these states, if applicable. Each of these states are mutually exclusive. Pressed styles overwrite hovered styles, and disabled elements cannot be hovered or pressed."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "## Base Slots"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "A basic set of slots that provide many default body styles, such as text, subtext, disabled colors, and so on. If a category doesn't provide the slot you're looking for, use one from this category. For example, the placeholder text on a text input field has no corresponding slot in its category, so you'd use the bodySubtextColor from this category."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "## Invariants"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "When color has meaning, we do not want to change the color much theme to theme. For example, we will always want errors to be some shade of red, but we will need to tweak the exact shade so it's legible depending on whether it's an inverted theme or not. Invariant colors should almost never be changed by the theme, the defaults should suffice."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "## Input Controls"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "This category contains input components commonly used to denote state, including radio buttons, check boxes, toggle switches, sliders, progress bars, and more."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "## Buttons"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Buttons! And all the flavors thereof."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "## Menus"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Any kind of popup menus uses this category."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "## Lists"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Lists differ from menus in that they are designed to show infinite amounts of items, often scroll, and have a large and complex interaction surface. This category covers all kinds of lists, whether they're typical one-item-per-row lists (like DetailsList) or ones with a tiled layout."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "blockingBackground": {
          "kind": "property",
          "signature": "blockingBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background for blocking issues, which is more severe than a warning, but not as bad as an error."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bodyBackground": {
          "kind": "property",
          "signature": "bodyBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The default color for backgrounds."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bodyDivider": {
          "kind": "property",
          "signature": "bodyDivider: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Divider lines; e.g. lines that separate sections in a menu, an "
            },
            {
              "kind": "html-tag",
              "token": "<HR>"
            },
            {
              "kind": "text",
              "text": " element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bodyFrameBackground": {
          "kind": "property",
          "signature": "bodyFrameBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The color for chrome adjacent to an area with bodyBackground. This can be used to provide visual separation of zones when using stronger colors, when using a divider line is not desired. In most themes, this should match the color of bodyBackground. See also: bodyFrameDivider"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bodyFrameDivider": {
          "kind": "property",
          "signature": "bodyFrameDivider: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used as the border between a zone with bodyFrameBackground and a zone with bodyBackground. If bodyBackground and bodyFrameBackground are different, this should be the same color as bodyFrameBackground in order to visually disappear. See also: bodyFrameBackground"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bodyStandoutBackground": {
          "kind": "property",
          "signature": "bodyStandoutBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The standout color for highlighted content backgrounds. For highlighted content when there is no emphasis, use the neutral variant instead. This should be a shade darker than bodyBackground in light themes, and a shade lighter in inverted themes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonBackground": {
          "kind": "property",
          "signature": "buttonBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background of a standard button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonBackgroundChecked": {
          "kind": "property",
          "signature": "buttonBackgroundChecked: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background of a checked standard button; e.g. bold/italicize/underline text button in toolbar"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonBackgroundCheckedHovered": {
          "kind": "property",
          "signature": "buttonBackgroundCheckedHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background of a checked and hovered standard button; e.g. bold/italicize/underline text button in toolbar"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonBackgroundDisabled": {
          "kind": "property",
          "signature": "buttonBackgroundDisabled: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background of a disabled standard button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonBackgroundHovered": {
          "kind": "property",
          "signature": "buttonBackgroundHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background of a hovered standard button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonBackgroundPressed": {
          "kind": "property",
          "signature": "buttonBackgroundPressed: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background of a pressed standard button; i.e. currently being clicked by mouse"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonBorder": {
          "kind": "property",
          "signature": "buttonBorder: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Border of a standard button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonBorderDisabled": {
          "kind": "property",
          "signature": "buttonBorderDisabled: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Border of a disabled standard button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "defaultStateBackground": {
          "kind": "property",
          "signature": "defaultStateBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background color for default/empty state graphical elements; eg default icons, empty section that needs user to fill in content, placeholder graphics, empty seats, etc."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabledBackground": {
          "kind": "property",
          "signature": "disabledBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The default color for backgrounds of disabled controls; e.g. disabled text field."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "errorBackground": {
          "kind": "property",
          "signature": "errorBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background for errors, if necessary, or highlighting the section of the page where the error is present."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focusBorder": {
          "kind": "property",
          "signature": "focusBorder: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The color of the outline around focused controls that don't already have a border; e.g. menu items"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputBackground": {
          "kind": "property",
          "signature": "inputBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background color of an input, e.g. textbox background."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputBackgroundChecked": {
          "kind": "property",
          "signature": "inputBackgroundChecked: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background of a checked control; e.g. checked radio button's dot, checked toggle's background."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputBackgroundCheckedHovered": {
          "kind": "property",
          "signature": "inputBackgroundCheckedHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background of a checked and hovered control; e.g. checked checkbox's background color on hover."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputBorder": {
          "kind": "property",
          "signature": "inputBorder: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The border of a large input control in its resting, state; e.g. the box of dropdown."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputBorderHovered": {
          "kind": "property",
          "signature": "inputBorderHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The border color of a large hovered input control, such as textbox."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputFocusBorderAlt": {
          "kind": "property",
          "signature": "inputFocusBorderAlt: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The alternate focus border color for elements that already have a border; e.g. text field borders on focus."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputForegroundChecked": {
          "kind": "property",
          "signature": "inputForegroundChecked: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The foreground of a checked control; e.g. checked checkbox's checkmark color, checked toggle's thumb color, radio button's background color around the dot."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "listBackground": {
          "kind": "property",
          "signature": "listBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background color for the entire list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "listHeaderBackgroundHovered": {
          "kind": "property",
          "signature": "listHeaderBackgroundHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background color for a hovered list header."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "listHeaderBackgroundPressed": {
          "kind": "property",
          "signature": "listHeaderBackgroundPressed: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background color for a pressed list header."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "listItemBackgroundChecked": {
          "kind": "property",
          "signature": "listItemBackgroundChecked: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background color of a checked list item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "listItemBackgroundCheckedHovered": {
          "kind": "property",
          "signature": "listItemBackgroundCheckedHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background color of a checked and hovered list item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "listItemBackgroundHovered": {
          "kind": "property",
          "signature": "listItemBackgroundHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background color of a hovered list item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "listText": {
          "kind": "property",
          "signature": "listText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The default text color for list item titles and text in column fields."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuBackground": {
          "kind": "property",
          "signature": "menuBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background of a menu."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuDivider": {
          "kind": "property",
          "signature": "menuDivider: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The divider between menu items."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuHeader": {
          "kind": "property",
          "signature": "menuHeader: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The headers in menus that denote title of a section."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuIcon": {
          "kind": "property",
          "signature": "menuIcon: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The default colors of icons in menus."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuItemBackgroundChecked": {
          "kind": "property",
          "signature": "menuItemBackgroundChecked: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "(Checked menu items no longer get a background color.) The background of checked menu item; e.g. a menu item whose submenu is open, a selected dropdown item."
            }
          ],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuItemBackgroundHovered": {
          "kind": "property",
          "signature": "menuItemBackgroundHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background of a hovered menu item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuItemBackgroundPressed": {
          "kind": "property",
          "signature": "menuItemBackgroundPressed: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The background of a pressed menu item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuItemText": {
          "kind": "property",
          "signature": "menuItemText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text color of a menu item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "menuItemTextHovered": {
          "kind": "property",
          "signature": "menuItemTextHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text color of a hovered menu item."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryButtonBackground": {
          "kind": "property",
          "signature": "primaryButtonBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background of a primary button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryButtonBackgroundDisabled": {
          "kind": "property",
          "signature": "primaryButtonBackgroundDisabled: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background of a disabled primary button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryButtonBackgroundHovered": {
          "kind": "property",
          "signature": "primaryButtonBackgroundHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background of a hovered primary button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryButtonBackgroundPressed": {
          "kind": "property",
          "signature": "primaryButtonBackgroundPressed: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background of a pressed primary button; i.e. currently being clicked by mouse"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryButtonBorder": {
          "kind": "property",
          "signature": "primaryButtonBorder: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Border of a primary button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "smallInputBorder": {
          "kind": "property",
          "signature": "smallInputBorder: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The border of a small input control in its resting unchecked state; e.g. the box of an unchecked checkbox."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "successBackground": {
          "kind": "property",
          "signature": "successBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background for success"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "variantBorder": {
          "kind": "property",
          "signature": "variantBorder: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The color of the border that provides contrast between an element, such as a card, and an emphasized background."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "variantBorderHovered": {
          "kind": "property",
          "signature": "variantBorderHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Hover color of border that provides contrast between an element, such as a card, and an emphasized background."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "warningBackground": {
          "kind": "property",
          "signature": "warningBackground: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Background for warning messages."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "warningHighlight": {
          "kind": "property",
          "signature": "warningHighlight: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Foreground color for warning highlights"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISemanticTextColors": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "actionLink": {
          "kind": "property",
          "signature": "actionLink: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Neutral colored links and links for action buttons."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "actionLinkHovered": {
          "kind": "property",
          "signature": "actionLinkHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Hover state for neutral colored links and links for action buttons."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bodySubtext": {
          "kind": "property",
          "signature": "bodySubtext: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "De-emphasized text; e.g. metadata, captions, placeholder text."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bodyText": {
          "kind": "property",
          "signature": "bodyText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The default color for text."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bodyTextChecked": {
          "kind": "property",
          "signature": "bodyTextChecked: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Checked text color, e.g. selected menu item text."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonText": {
          "kind": "property",
          "signature": "buttonText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color of text in a standard button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonTextChecked": {
          "kind": "property",
          "signature": "buttonTextChecked: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color of text in a checked standard button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonTextCheckedHovered": {
          "kind": "property",
          "signature": "buttonTextCheckedHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color of text in a checked and hovered standard button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonTextDisabled": {
          "kind": "property",
          "signature": "buttonTextDisabled: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color of text in a disabled standard button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonTextHovered": {
          "kind": "property",
          "signature": "buttonTextHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color of text in a hovered standard button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonTextPressed": {
          "kind": "property",
          "signature": "buttonTextPressed: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color of text in a pressed standard button; i.e. currently being clicked by mouse"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabledBodyText": {
          "kind": "property",
          "signature": "disabledBodyText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The default color for disabled text on the default background (bodyBackground)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabledSubtext": {
          "kind": "property",
          "signature": "disabledSubtext: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Disabled de-emphasized text, for use on disabledBackground."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabledText": {
          "kind": "property",
          "signature": "disabledText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The default color for disabled text on top of disabledBackground; e.g. text in a disabled text field, disabled button text."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "errorText": {
          "kind": "property",
          "signature": "errorText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The default color of error text, used on bodyBackground."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputPlaceholderText": {
          "kind": "property",
          "signature": "inputPlaceholderText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The color of placeholder text."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "link": {
          "kind": "property",
          "signature": "link: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The color of a link."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "linkHovered": {
          "kind": "property",
          "signature": "linkHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The color of a hovered link. Also used when the link is active."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "listText": {
          "kind": "property",
          "signature": "listText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The default text color for list item titles and text in column fields."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "listTextColor": {
          "kind": "property",
          "signature": "listTextColor: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "This slot was incorrectly named. Use listText instead."
            }
          ],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryButtonText": {
          "kind": "property",
          "signature": "primaryButtonText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color of text in a primary button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryButtonTextDisabled": {
          "kind": "property",
          "signature": "primaryButtonTextDisabled: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color of text in a disabled primary button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryButtonTextHovered": {
          "kind": "property",
          "signature": "primaryButtonTextHovered: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color of text in a hovered primary button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryButtonTextPressed": {
          "kind": "property",
          "signature": "primaryButtonTextPressed: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Color of text in a pressed primary button; i.e. currently being clicked by mouse"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "warningText": {
          "kind": "property",
          "signature": "warningText: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The color of text on errorBackground, warningBackground, blockingBackground, or successBackground."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IShimmer": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IShimmerCircle": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IShimmerCircleProps": {
      "kind": "interface",
      "extends": "React.AllHTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "ShimmerCircle component props."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "borderStyle": {
          "kind": "property",
          "signature": "borderStyle?: IRawStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "styles",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " prop to leverage mergeStyle API."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Use to set custom styling of the shimmerCircle borders."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IShimmerCircle>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IShimmerCircle>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IShimmerCircle interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "height": {
          "kind": "property",
          "signature": "height?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the height of the circle."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IShimmerCircleStyleProps, IShimmerCircleStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IShimmerCircleStyleProps, IShimmerCircleStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IShimmerCircleStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Represents the stylable areas of the control."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "root": {
          "kind": "property",
          "signature": "root?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Root of the ShimmerCircle component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "svg": {
          "kind": "property",
          "signature": "svg?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the circle SVG of the ShimmerCircle component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IShimmerElement": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Shimmer Elements Interface"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "height": {
          "kind": "property",
          "signature": "height?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The height of the element (ICircle, ILine, IGap) in pixels. Read more details for each specific element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "type": {
          "kind": "property",
          "signature": "type: ShimmerElementType;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ShimmerElementType",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Required for every element you intend to use."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "verticalAlign": {
          "kind": "property",
          "signature": "verticalAlign?: 'top' | 'center' | 'bottom';",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "'top' | 'center' | 'bottom'",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The vertical alignemt of the element (ICircle, ILine)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "width": {
          "kind": "property",
          "signature": "width?: number | string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The width value of the element (ILine, IGap) in pixels. Read more details for each specific element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IShimmerElementsGroup": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IShimmerElementsGroupProps": {
      "kind": "interface",
      "extends": "React.AllHTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "ShimmerElementsGroup component props."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IShimmerElementsGroup>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IShimmerElementsGroup>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IShimmerElementsGroup interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "flexWrap": {
          "kind": "property",
          "signature": "flexWrap?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional boolean for enabling flexWrap of the container containing the shimmerElements."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "rowHeight": {
          "kind": "property",
          "signature": "rowHeight?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional maximum row height of the shimmerElements container."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shimmerElements": {
          "kind": "property",
          "signature": "shimmerElements?: IShimmerElement[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IShimmerElement[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Elements to render in one group of the Shimmer."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IShimmerElementsGroupStyleProps, IShimmerElementsGroupStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "width": {
          "kind": "property",
          "signature": "width?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional width for ShimmerElements container."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IShimmerElementsGroupStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "flexWrap": {
          "kind": "property",
          "signature": "flexWrap?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IShimmerElementsGroupStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "root": {
          "kind": "property",
          "signature": "root?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IShimmerGap": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IShimmerGapProps": {
      "kind": "interface",
      "extends": "React.AllHTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "ShimmerGap component props."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "borderStyle": {
          "kind": "property",
          "signature": "borderStyle?: IRawStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "styles",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " prop to leverage mergeStyle API."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Use to set custom styling of the shimmerGap borders."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IShimmerGap>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IShimmerGap>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IShimmerGap interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "height": {
          "kind": "property",
          "signature": "height?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the height of the gap."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IShimmerGapStyleProps, IShimmerGapStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IShimmerGapStyleProps, IShimmerGapStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "width": {
          "kind": "property",
          "signature": "width?: number | string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets width value of the gap."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IShimmerGapStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Represents the stylable areas of the control."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "root": {
          "kind": "property",
          "signature": "root?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Root of the ShimmerGap component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IShimmerLine": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "IShimmerLineProps": {
      "kind": "interface",
      "extends": "React.AllHTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "ShimmerLine component props."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "borderStyle": {
          "kind": "property",
          "signature": "borderStyle?: IRawStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRawStyle",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "styles",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " prop to leverage mergeStyle API."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Use to set custom styling of the shimmerLine borders."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IShimmerLine>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IShimmerLine>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IShimmerLine interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "height": {
          "kind": "property",
          "signature": "height?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the height of the rectangle."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IShimmerLineStyleProps, IShimmerLineStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IShimmerLineStyleProps, IShimmerLineStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "width": {
          "kind": "property",
          "signature": "width?: number | string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets width value of the line."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IShimmerLineStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Represents the stylable areas of the control."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "bottomLeftCorner": {
          "kind": "property",
          "signature": "bottomLeftCorner?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Bottom-left corner SVG of the ShimmerLine component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bottomRightCorner": {
          "kind": "property",
          "signature": "bottomRightCorner?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Bottom-right corner SVG of the ShimmerLine component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Root of the ShimmerLine component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "topLeftCorner": {
          "kind": "property",
          "signature": "topLeftCorner?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Top-left corner SVG of the ShimmerLine component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "topRightCorner": {
          "kind": "property",
          "signature": "topRightCorner?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Top-right corner SVG of the ShimmerLine component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IShimmerProps": {
      "kind": "interface",
      "extends": "React.AllHTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Shimmer component props."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Localized string of the status label for screen reader"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional CSS class(es) to apply to the Shimmer container."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IShimmer>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IShimmer>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IShimmer interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "customElementsGroup": {
          "kind": "property",
          "signature": "customElementsGroup?: React.ReactNode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.ReactNode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom elements when necessary to build complex placeholder skeletons."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDataLoaded": {
          "kind": "property",
          "signature": "isDataLoaded?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Controls when the shimmer is swapped with actual data through an animated transition."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shimmerElements": {
          "kind": "property",
          "signature": "shimmerElements?: IShimmerElement[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IShimmerElement[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Elements to render in one line of the Shimmer."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IShimmerStyleProps, IShimmerStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IShimmerStyleProps, IShimmerStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "width": {
          "kind": "property",
          "signature": "width?: number | string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the width value of the shimmer wave wrapper."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IShimmerState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "contentLoaded": {
          "kind": "property",
          "signature": "contentLoaded?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Flag for knowing when to remove the shimmerWrapper from the DOM."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IShimmerStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isDataLoaded": {
          "kind": "property",
          "signature": "isDataLoaded?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "transitionAnimationInterval": {
          "kind": "property",
          "signature": "transitionAnimationInterval?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IShimmerStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "dataWrapper": {
          "kind": "property",
          "signature": "dataWrapper?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "screenReaderText": {
          "kind": "property",
          "signature": "screenReaderText?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shimmerWrapper": {
          "kind": "property",
          "signature": "shimmerWrapper?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISize": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "height": {
          "kind": "property",
          "signature": "height: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "width": {
          "kind": "property",
          "signature": "width: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISlider": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focus": {
          "kind": "property",
          "signature": "focus: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "value: number | undefined;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | undefined",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISliderProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A description of the Slider for the benefit of screen readers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaValueText": {
          "kind": "property",
          "signature": "ariaValueText?: (value: number) => string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(value: number) => string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A text description of the Slider number value for the benefit of screen readers. This should be used when the Slider number value is not accurately represented by a number."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "buttonProps": {
          "kind": "property",
          "signature": "buttonProps?: React.HTMLAttributes<HTMLButtonElement>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.HTMLAttributes<HTMLButtonElement>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional mixin for additional props on the thumb button within the slider."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional className to attach to the slider root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<ISlider>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<ISlider>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the ISlider interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "defaultValue": {
          "kind": "property",
          "signature": "defaultValue?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The initial value of the Slider. Use this if you intend for the Slider to be an uncontrolled component. This value is mutually exclusive to value. Use one or the other."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional flag to render the Slider as disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Description label of the Slider"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "max": {
          "kind": "property",
          "signature": "max?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The max value of the Slider"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "min": {
          "kind": "property",
          "signature": "min?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The min value of the Slider"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChange": {
          "kind": "property",
          "signature": "onChange?: (value: number) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(value: number) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback when the value has been changed"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChanged": {
          "kind": "property",
          "signature": "onChanged?: (event: MouseEvent | TouchEvent, value: number) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(event: MouseEvent | TouchEvent, value: number) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback on mouse up or touch end"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showValue": {
          "kind": "property",
          "signature": "showValue?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether to show the value on the right of the Slider."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "step": {
          "kind": "property",
          "signature": "step?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The difference between the two adjacent values of the Slider"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<ISliderStyleProps, ISliderStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<ISliderStyleProps, ISliderStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "value?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The initial value of the Slider. Use this if you intend to pass in a new value as a result of onChange events. This value is mutually exclusive to defaultValue. Use one or the other."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "vertical": {
          "kind": "property",
          "signature": "vertical?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional flag to render the slider vertically. Defaults to rendering horizontal."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISliderState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "renderedValue": {
          "kind": "property",
          "signature": "renderedValue?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "value?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISliderStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "activeSection": {
          "kind": "property",
          "signature": "activeSection: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "container": {
          "kind": "property",
          "signature": "container: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inactiveSection": {
          "kind": "property",
          "signature": "inactiveSection: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "line": {
          "kind": "property",
          "signature": "line: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "lineContainer": {
          "kind": "property",
          "signature": "lineContainer: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "slideBox": {
          "kind": "property",
          "signature": "slideBox: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "thumb": {
          "kind": "property",
          "signature": "thumb: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "titleLabel": {
          "kind": "property",
          "signature": "titleLabel: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "valueLabel": {
          "kind": "property",
          "signature": "valueLabel: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISpinButton": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focus": {
          "kind": "property",
          "signature": "focus: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the spin button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "value?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The value of the SpinButton. Use this if you intend to pass in a new value as a result of onChange events. This value is mutually exclusive to defaultValue. Use one or the other."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISpinButtonProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A description of the SpinButton for the benefit of screen readers."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaPositionInSet": {
          "kind": "property",
          "signature": "ariaPositionInSet?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The position in the parent set (if in a set) for aria-posinset."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaSetSize": {
          "kind": "property",
          "signature": "ariaSetSize?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The total size of the parent set (if in a set) for aria-setsize."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaValueNow": {
          "kind": "property",
          "signature": "ariaValueNow?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the aria-valuenow of the spin button. The component must be controlled by the creator who controls the value externally. ariaValueNow would be the numeric form of value."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaValueText": {
          "kind": "property",
          "signature": "ariaValueText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional className for SpinButton."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: (component?: ISpinButton | null) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(component?: ISpinButton | null) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "decrementButtonAriaLabel": {
          "kind": "property",
          "signature": "decrementButtonAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accessibile label text for the decrement button for the benefit of the screen reader."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "decrementButtonIcon": {
          "kind": "property",
          "signature": "decrementButtonIcon?: IIconProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IIconProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Icon for the decrement button of the spinButton"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "defaultValue": {
          "kind": "property",
          "signature": "defaultValue?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The initial value of the SpinButton. Use this if you intend for the SpinButton to be an uncontrolled component. This value is mutually exclusive to value. Use one or the other."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not the SpinButton is disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "downArrowButtonStyles": {
          "kind": "property",
          "signature": "downArrowButtonStyles?: Partial<IButtonStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Partial<IButtonStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom styles for the downArrow button."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Note: The buttons are in a checked state when arrow keys are used to incremenent/decrement the spinButton. Use rootChecked instead of rootPressed for styling when that is the case."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getClassNames": {
          "kind": "property",
          "signature": "getClassNames?: (theme: ITheme, disabled: boolean, isFocused: boolean, keyboardSpinDirection: KeyboardSpinDirection, labelPosition?: Position, className?: string) => ISpinButtonClassNames;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(theme: ITheme, disabled: boolean, isFocused: boolean, keyboardSpinDirection: KeyboardSpinDirection, labelPosition?: Position, className?: string) => ISpinButtonClassNames",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom function for providing the classNames for the spinbutton. Can be used to provide all styles for the component instead of applying them on top of the default styles."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconProps": {
          "kind": "property",
          "signature": "iconProps?: IIconProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IIconProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Icon that goes along with the label for the whole SpinButton"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "incrementButtonAriaLabel": {
          "kind": "property",
          "signature": "incrementButtonAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accessibile label text for the increment button for the benefit of the screen reader."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "incrementButtonIcon": {
          "kind": "property",
          "signature": "incrementButtonIcon?: IIconProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IIconProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Icon for the increment button of the spinButton"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "keytipProps": {
          "kind": "property",
          "signature": "keytipProps?: IKeytipProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IKeytipProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional keytip for this spin button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Descriptive label for the SpinButton."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "labelPosition": {
          "kind": "property",
          "signature": "labelPosition?: Position;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Position",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "max": {
          "kind": "property",
          "signature": "max?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The max value of the SpinButton."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "min": {
          "kind": "property",
          "signature": "min?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The min value of the SpinButton."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onBlur": {
          "kind": "property",
          "signature": "onBlur?: React.FocusEventHandler<HTMLInputElement>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.FocusEventHandler<HTMLInputElement>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for when the user moves the focus away from the picker"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDecrement": {
          "kind": "property",
          "signature": "onDecrement?: (value: string) => string | void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(value: string) => string | void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This callback is triggered when the decrement button is pressed or if the user presses down arrow with focus on the input of the spinButton"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onFocus": {
          "kind": "property",
          "signature": "onFocus?: React.FocusEventHandler<HTMLInputElement>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "React.FocusEventHandler<HTMLInputElement>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A callback for when the user put focus on the picker"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onIncrement": {
          "kind": "property",
          "signature": "onIncrement?: (value: string) => string | void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(value: string) => string | void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This callback is triggered when the increment button is pressed or if the user presses up arrow with focus on the input of the spinButton"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onValidate": {
          "kind": "property",
          "signature": "onValidate?: (value: string, event?: React.SyntheticEvent<HTMLElement>) => string | void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(value: string, event?: React.SyntheticEvent<HTMLElement>) => string | void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "This callback is triggered when the value inside the SpinButton should be validated."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "precision": {
          "kind": "property",
          "signature": "precision?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "To how many decimal places the value should be rounded to. The default value is calculated based on the precision of step. IE: if step = 1, precision = 0. step = 0.0089, precision = 4. step = 300, precision = 2. step = 23.00, precision = 2."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "step": {
          "kind": "property",
          "signature": "step?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The difference between the two adjacent values of the SpinButton. This value is sued to calculate the precision of the input if no precision is given. The precision calculated this way will always be >= 0."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: Partial<ISpinButtonStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Partial<ISpinButtonStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom styling for individual elements within the button DOM."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by HOC."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "title": {
          "kind": "property",
          "signature": "title?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A title for the SpinButton used for a more descriptive name that's also visible on its tooltip."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "upArrowButtonStyles": {
          "kind": "property",
          "signature": "upArrowButtonStyles?: Partial<IButtonStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Partial<IButtonStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom styles for the upArrow button."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Note: The buttons are in a checked state when arrow keys are used to incremenent/decrement the spinButton. Use rootChecked instead of rootPressed for styling when that is the case."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "value?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The value of the SpinButton. Use this if you intend to pass in a new value as a result of onChange events. This value is mutually exclusive to defaultValue. Use one or the other."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISpinButtonState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "isFocused": {
          "kind": "property",
          "signature": "isFocused: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is true when the control has focus."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "keyboardSpinDirection": {
          "kind": "property",
          "signature": "keyboardSpinDirection: KeyboardSpinDirection;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "KeyboardSpinDirection",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "keyboard spin direction, used to style the up or down button as active when up/down arrow is pressed"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "precision": {
          "kind": "property",
          "signature": "precision: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The calculated precision for the value."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "value: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "the value of the spin button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISpinButtonStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "arrowButtonsContainer": {
          "kind": "property",
          "signature": "arrowButtonsContainer: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the arrowButtonsContainer"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "arrowButtonsContainerDisabled": {
          "kind": "property",
          "signature": "arrowButtonsContainerDisabled: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for the arrowButtonsContainer when spin button is disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "icon": {
          "kind": "property",
          "signature": "icon: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the icon."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconDisabled": {
          "kind": "property",
          "signature": "iconDisabled: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the icon."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "input": {
          "kind": "property",
          "signature": "input: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the input."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputDisabled": {
          "kind": "property",
          "signature": "inputDisabled: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override when spinButton is disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputTextSelected": {
          "kind": "property",
          "signature": "inputTextSelected: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override for ::selection"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the label text"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "labelDisabled": {
          "kind": "property",
          "signature": "labelDisabled: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the label text"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "labelWrapper": {
          "kind": "property",
          "signature": "labelWrapper: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the label wrapper element of the component The label wrapper contains the icon and the label."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "labelWrapperBottom": {
          "kind": "property",
          "signature": "labelWrapperBottom: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override when the label is positioned at the bottom."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "labelWrapperEnd": {
          "kind": "property",
          "signature": "labelWrapperEnd: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override when the label is positioned at the end."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "labelWrapperStart": {
          "kind": "property",
          "signature": "labelWrapperStart: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override when the label is positioned at the start."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "labelWrapperTop": {
          "kind": "property",
          "signature": "labelWrapperTop: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override when the label is positioned at the top."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styles for the root of the spin button component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "spinButtonWrapper": {
          "kind": "property",
          "signature": "spinButtonWrapper: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for spinButtonWrapper when enabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "spinButtonWrapperDisabled": {
          "kind": "property",
          "signature": "spinButtonWrapperDisabled: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override when spinButton is disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "spinButtonWrapperFocused": {
          "kind": "property",
          "signature": "spinButtonWrapperFocused: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override when spinButton is enabled/focused."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "spinButtonWrapperHovered": {
          "kind": "property",
          "signature": "spinButtonWrapperHovered: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override when spinButton is enabled/hovered."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "spinButtonWrapperTopBottom": {
          "kind": "property",
          "signature": "spinButtonWrapperTopBottom: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style override when label is positioned at the top/bottom."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISpinner": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "ISpinnerProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Alternative status label for screen reader"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLive": {
          "kind": "property",
          "signature": "ariaLive?: 'assertive' | 'polite' | 'off';",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "'assertive' | 'polite' | 'off'",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Politeness setting for label update announcement."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional CSS class(es) to apply to the Spinner."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<ISpinner>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<ISpinner>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the ISpinner interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The label to show next to the Spinner. Label updates will be announced to the screen readers. Use ariaLive to control politeness level."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "size": {
          "kind": "property",
          "signature": "size?: SpinnerSize;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SpinnerSize",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The size of Spinner to render. { extraSmall, small, medium, large }"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<ISpinnerStyleProps, ISpinnerStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<ISpinnerStyleProps, ISpinnerStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme (provided through customization.)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "type": {
          "kind": "property",
          "signature": "type?: SpinnerType;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SpinnerType",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "SpinnerSize",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated and will be removed at >= 2.0.0. Use "
            },
            {
              "kind": "code",
              "text": "SpinnerSize",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISpinnerStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "size": {
          "kind": "property",
          "signature": "size?: SpinnerSize;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SpinnerSize",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISpinnerStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "circle": {
          "kind": "property",
          "signature": "circle?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "screenReaderText": {
          "kind": "property",
          "signature": "screenReaderText?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "isRelativeUrl": {
      "kind": "function",
      "signature": "export function isRelativeUrl(url: string): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {
        "url": {
          "name": "url",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "IStickyContext": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "scrollablePane": {
          "kind": "property",
          "signature": "scrollablePane: PropTypes.Requireable<object>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "PropTypes.Requireable<object>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IStickyProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IStickyProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IStickyProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets ref to component interface."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isScrollSynced": {
          "kind": "property",
          "signature": "isScrollSynced?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true, then match scrolling position of placeholder element in Sticky."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "stickyBackgroundColor": {
          "kind": "property",
          "signature": "stickyBackgroundColor?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "color to apply as 'background-color' style for sticky element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "stickyClassName": {
          "kind": "property",
          "signature": "stickyClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Class name to apply to the sticky element if component is sticky."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "stickyPosition": {
          "kind": "property",
          "signature": "stickyPosition?: StickyPositionType;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "StickyPositionType",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Region to render sticky component in."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IStickyState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "isStickyBottom": {
          "kind": "property",
          "signature": "isStickyBottom: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isStickyTop": {
          "kind": "property",
          "signature": "isStickyTop: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IStyleSheetConfig": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Stylesheet config."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "defaultPrefix": {
          "kind": "property",
          "signature": "defaultPrefix?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Default 'displayName' to use for a className."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "injectionMode": {
          "kind": "property",
          "signature": "injectionMode?: InjectionMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "InjectionMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Injection mode for how rules are inserted."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "namespace": {
          "kind": "property",
          "signature": "namespace?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Default 'namespace' to attach before the className."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onInsertRule": {
          "kind": "property",
          "signature": "onInsertRule?: (rule: string) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(rule: string) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback executed when a rule is inserted."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISuggestionItemProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<{}>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<{}>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "id": {
          "kind": "property",
          "signature": "id?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isSelectedOverride": {
          "kind": "property",
          "signature": "isSelectedOverride?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onClick": {
          "kind": "property",
          "signature": "onClick: (ev: React.MouseEvent<HTMLButtonElement>) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.MouseEvent<HTMLButtonElement>) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRemoveItem": {
          "kind": "property",
          "signature": "onRemoveItem: (ev: React.MouseEvent<HTMLButtonElement>) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev: React.MouseEvent<HTMLButtonElement>) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "removeButtonAriaLabel": {
          "kind": "property",
          "signature": "removeButtonAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The ARIA label for the button to remove the suggestion from the list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "RenderSuggestion": {
          "kind": "property",
          "signature": "RenderSuggestion: (item: T, suggestionItemProps?: ISuggestionItemProps<T>) => JSX.Element;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(item: T, suggestionItemProps?: ISuggestionItemProps<T>) => JSX.Element",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showRemoveButton": {
          "kind": "property",
          "signature": "showRemoveButton?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionModel": {
          "kind": "property",
          "signature": "suggestionModel: ISuggestionModel<T>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISuggestionModel<T>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISuggestionModel": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "item": {
          "kind": "property",
          "signature": "item: T;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "T",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selected": {
          "kind": "property",
          "signature": "selected: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISuggestionsControlProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The CSS classname of the suggestions list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "completeSuggestion": {
          "kind": "property",
          "signature": "completeSuggestion: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Completes the suggestion"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "footerItemsProps": {
          "kind": "property",
          "signature": "footerItemsProps?: ISuggestionsHeaderFooterProps[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISuggestionsHeaderFooterProps[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The footer items props"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "headerItemsProps": {
          "kind": "property",
          "signature": "headerItemsProps?: ISuggestionsHeaderFooterProps[];",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISuggestionsHeaderFooterProps[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The header items props"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shouldSelectFirstItem": {
          "kind": "property",
          "signature": "shouldSelectFirstItem?: () => boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not the first selectable item in the suggestions list should be selected"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsFooterContainerAriaLabel": {
          "kind": "property",
          "signature": "suggestionsFooterContainerAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An ARIA label for the container that is the parent of the suggestions footer items."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsHeaderContainerAriaLabel": {
          "kind": "property",
          "signature": "suggestionsHeaderContainerAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An ARIA label for the container that is the parent of the suggestions header items."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISuggestionsControlState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "selectedFooterIndex": {
          "kind": "property",
          "signature": "selectedFooterIndex: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedHeaderIndex": {
          "kind": "property",
          "signature": "selectedHeaderIndex: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestions": {
          "kind": "property",
          "signature": "suggestions: ISuggestionModel<T>[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISuggestionModel<T>[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISuggestionsCoreProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<{}>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<{}>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderSuggestion": {
          "kind": "property",
          "signature": "onRenderSuggestion?: (props: T, suggestionItemProps: T) => JSX.Element;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(props: T, suggestionItemProps: T) => JSX.Element",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "How the suggestion should look in the suggestion list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onSuggestionClick": {
          "kind": "property",
          "signature": "onSuggestionClick: (ev?: React.MouseEvent<HTMLElement>, item?: any, index?: number) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLElement>, item?: any, index?: number) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "What should occur when a suggestion is clicked"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onSuggestionRemove": {
          "kind": "property",
          "signature": "onSuggestionRemove?: (ev?: React.MouseEvent<HTMLElement>, item?: IPersonaProps, index?: number) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLElement>, item?: IPersonaProps, index?: number) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function to fire when one of the optional remove buttons on a suggestion is clicked."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "resultsMaximumNumber": {
          "kind": "property",
          "signature": "resultsMaximumNumber?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Maximum number of suggestions to show in the full suggestion list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shouldLoopSelection": {
          "kind": "property",
          "signature": "shouldLoopSelection: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates whether to loop around to the top or bottom of the the suggestions on calling nextSuggestion and previousSuggestion, respectively"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showRemoveButtons": {
          "kind": "property",
          "signature": "showRemoveButtons?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates whether to show a button with each suggestion to remove that suggestion."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestions": {
          "kind": "property",
          "signature": "suggestions: ISuggestionModel<T>[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISuggestionModel<T>[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The list of Suggestions that will be displayed"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsAvailableAlertText": {
          "kind": "property",
          "signature": "suggestionsAvailableAlertText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Screen reader message to read when there are suggestions available."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsContainerAriaLabel": {
          "kind": "property",
          "signature": "suggestionsContainerAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An ARIA label for the container that is the parent of the suggestions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsItemClassName": {
          "kind": "property",
          "signature": "suggestionsItemClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "the classname of the suggestionitem."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISuggestionsHeaderFooterItemProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className: string | undefined;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | undefined",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<{}>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<{}>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "id": {
          "kind": "property",
          "signature": "id: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isSelected": {
          "kind": "property",
          "signature": "isSelected: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onExecute": {
          "kind": "property",
          "signature": "onExecute?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "renderItem": {
          "kind": "property",
          "signature": "renderItem: () => JSX.Element;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => JSX.Element",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISuggestionsHeaderFooterProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onExecute": {
          "kind": "property",
          "signature": "onExecute?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "renderItem": {
          "kind": "property",
          "signature": "renderItem: () => JSX.Element;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => JSX.Element",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shouldShow": {
          "kind": "property",
          "signature": "shouldShow: () => boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISuggestionsProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The CSS classname of the suggestions root."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<{}>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<{}>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "createGenericItem": {
          "kind": "property",
          "signature": "createGenericItem?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The callback that should be called when the user attempts to use the input text as as item"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "forceResolveText": {
          "kind": "property",
          "signature": "forceResolveText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text that appears indicating to the use to force resolve the input"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isLoading": {
          "kind": "property",
          "signature": "isLoading?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used to indicate whether or not the suggestions are loading."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isMostRecentlyUsedVisible": {
          "kind": "property",
          "signature": "isMostRecentlyUsedVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates if a short list of recent suggestions should be shown."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isResultsFooterVisible": {
          "kind": "property",
          "signature": "isResultsFooterVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates if the text in resultsFooter or resultsFooterFull should be shown at the end of the suggestion list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isSearching": {
          "kind": "property",
          "signature": "isSearching?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used to indicate whether or not the component is searching for more results."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "loadingText": {
          "kind": "property",
          "signature": "loadingText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text to display while the results are loading."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "moreSuggestionsAvailable": {
          "kind": "property",
          "signature": "moreSuggestionsAvailable?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used to indicate whether or not the user can request more suggestions. Dictates whether or not the searchForMore button is displayed."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "mostRecentlyUsedHeaderText": {
          "kind": "property",
          "signature": "mostRecentlyUsedHeaderText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text that should appear at the top of the most recenty used box."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "noResultsFoundText": {
          "kind": "property",
          "signature": "noResultsFoundText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text that should appear if no results are found when searching."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onGetMoreResults": {
          "kind": "property",
          "signature": "onGetMoreResults?: () => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The callback that should be called when the user attempts to get more results"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderNoResultFound": {
          "kind": "property",
          "signature": "onRenderNoResultFound?: IRenderFunction<void>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<void>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "How the \"no result found\" should look in the suggestion list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderSuggestion": {
          "kind": "property",
          "signature": "onRenderSuggestion?: (props: T, suggestionItemProps: T) => JSX.Element;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(props: T, suggestionItemProps: T) => JSX.Element",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "How the suggestion should look in the suggestion list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onSuggestionClick": {
          "kind": "property",
          "signature": "onSuggestionClick: (ev?: React.MouseEvent<HTMLElement>, item?: any, index?: number) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLElement>, item?: any, index?: number) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "What should occur when a suggestion is clicked"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onSuggestionRemove": {
          "kind": "property",
          "signature": "onSuggestionRemove?: (ev?: React.MouseEvent<HTMLElement>, item?: IPersonaProps, index?: number) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: React.MouseEvent<HTMLElement>, item?: IPersonaProps, index?: number) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Function to fire when one of the optional remove buttons on a suggestion is clicked."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "refocusSuggestions": {
          "kind": "property",
          "signature": "refocusSuggestions?: (keyCode: KeyCodes) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(keyCode: KeyCodes) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A function that resets focus to the expected item in the suggestion list"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "removeSuggestionAriaLabel": {
          "kind": "property",
          "signature": "removeSuggestionAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An ARIA label to use for the buttons to remove individual suggestions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "resultsFooter": {
          "kind": "property",
          "signature": "resultsFooter?: (props: ISuggestionsProps<T>) => JSX.Element;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(props: ISuggestionsProps<T>) => JSX.Element",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A renderer that adds an element at the end of the suggestions list it has fewer items than resultsMaximumNumber."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "resultsFooterFull": {
          "kind": "property",
          "signature": "resultsFooterFull?: (props: ISuggestionsProps<T>) => JSX.Element;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(props: ISuggestionsProps<T>) => JSX.Element",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A renderer that adds an element at the end of the suggestions list it has more items than resultsMaximumNumber."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "resultsMaximumNumber": {
          "kind": "property",
          "signature": "resultsMaximumNumber?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Maximum number of suggestions to show in the full suggestion list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "searchErrorText": {
          "kind": "property",
          "signature": "searchErrorText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text that should appear if there is a search error."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "searchForMoreText": {
          "kind": "property",
          "signature": "searchForMoreText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text that appears indicating to the user that they can search for more results."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "searchingText": {
          "kind": "property",
          "signature": "searchingText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text to display while searching for more results in a limited sugesstions list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showForceResolve": {
          "kind": "property",
          "signature": "showForceResolve?: () => boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The callback that should be called to see if the force resolve command should be shown"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "showRemoveButtons": {
          "kind": "property",
          "signature": "showRemoveButtons?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicates whether to show a button with each suggestion to remove that suggestion."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestions": {
          "kind": "property",
          "signature": "suggestions: ISuggestionModel<T>[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISuggestionModel<T>[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The list of Suggestions that will be displayed"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsAvailableAlertText": {
          "kind": "property",
          "signature": "suggestionsAvailableAlertText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Screen reader message to read when there are suggestions available."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsClassName": {
          "kind": "property",
          "signature": "suggestionsClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The CSS classname of the suggestionslist"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsContainerAriaLabel": {
          "kind": "property",
          "signature": "suggestionsContainerAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An ARIA label for the container that is the parent of the suggestions."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsHeaderText": {
          "kind": "property",
          "signature": "suggestionsHeaderText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The text that appears at the top of the suggestions list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsItemClassName": {
          "kind": "property",
          "signature": "suggestionsItemClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "the classname of the suggestionitem."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suggestionsListId": {
          "kind": "property",
          "signature": "suggestionsListId?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The string that will be used as the suggestionsListId. Will be used by the basepicker to keep track of the list for aria."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISuggestionsState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "selectedActionType": {
          "kind": "property",
          "signature": "selectedActionType: SuggestionActionType;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SuggestionActionType",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "isValidShade": {
      "kind": "function",
      "signature": "export function isValidShade(shade?: Shade): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {
        "shade": {
          "name": "shade",
          "description": [
            {
              "kind": "text",
              "text": "The Shade value to validate."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "Shade"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Returns true if the argument is a valid Shade value"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "ISwatchColorPicker": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "ISwatchColorPickerProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "cellBorderWidth": {
          "kind": "property",
          "signature": "cellBorderWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Width of the border indicating a hovered/selected cell, in pixels"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "cellHeight": {
          "kind": "property",
          "signature": "cellHeight?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Height of an individual cell, in pixels"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "cellMargin": {
          "kind": "property",
          "signature": "cellMargin?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The distance between cells, in pixels"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "cellShape": {
          "kind": "property",
          "signature": "cellShape?: 'circle' | 'square';",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "'circle' | 'square'",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The shape of the color cells, defaults to circle"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "cellWidth": {
          "kind": "property",
          "signature": "cellWidth?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Width of an individual cell, in pixels"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional class name to provide on the root element"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "colorCells": {
          "kind": "property",
          "signature": "colorCells: IColorCellProps[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IColorCellProps[]",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The color cells that will be made available to the user"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "columnCount": {
          "kind": "property",
          "signature": "columnCount: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "the number of columns for the swatch color picker"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<ISwatchColorPicker>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<ISwatchColorPicker>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the component ref."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is this swatch color picker disabled?"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "doNotContainWithinFocusZone": {
          "kind": "property",
          "signature": "doNotContainWithinFocusZone?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true do not contain the grid inside of a FocusZone. If false contain the grid inside of a FocusZone."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focusOnHover": {
          "kind": "property",
          "signature": "focusOnHover?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, whether to update focus when a cell is hovered."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getColorGridCellStyles": {
          "kind": "property",
          "signature": "getColorGridCellStyles?: IStyleFunctionOrObject<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IColorPickerGridCellStyleProps, IColorPickerGridCellStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional styles for the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "id": {
          "kind": "property",
          "signature": "id?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The id for the swatch color picker"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "mouseLeaveParentSelector": {
          "kind": "property",
          "signature": "mouseLeaveParentSelector?: string | undefined;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Selector to focus on mouseLeave SHOULD ONLY BE USED IN CONJUNCTION WITH focusOnHover"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onCellFocused": {
          "kind": "property",
          "signature": "onCellFocused?: (id?: string, color?: string) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(id?: string, color?: string) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback issued when the user focuses a color cell. Note, if no id or color is given, cells are not longer being focused"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onCellHovered": {
          "kind": "property",
          "signature": "onCellHovered?: (id?: string, color?: string) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(id?: string, color?: string) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback issued when the user hovers over a color cell. Note, if no id or color is given, cells are not longer being hovered"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onColorChanged": {
          "kind": "property",
          "signature": "onColorChanged?: (id?: string, color?: string) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(id?: string, color?: string) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback issued when the user changes the color. Note, if no id or color is given, there is no selected cell (e.g. the user executed the currently selected cell to unselect it)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "positionInSet": {
          "kind": "property",
          "signature": "positionInSet?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The optional position this grid is in the parent set (index in a parent menu, for example)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectedId": {
          "kind": "property",
          "signature": "selectedId?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The id of color cell that is currently selected"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "setSize": {
          "kind": "property",
          "signature": "setSize?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The optional size of the parent set (size of parent menu, for example)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "shouldFocusCircularNavigate": {
          "kind": "property",
          "signature": "shouldFocusCircularNavigate?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Should focus cycle to the beginning of once the user navigates past the end (and vice versa). This prop is only relevant if doNotcontainWithinFocusZone is not true"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<ISwatchColorPickerStyleProps, ISwatchColorPickerStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<ISwatchColorPickerStyleProps, ISwatchColorPickerStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional styles for the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme to apply to the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISwatchColorPickerState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "selectedIndex": {
          "kind": "property",
          "signature": "selectedIndex?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISwatchColorPickerStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Properties required to build the styles for the color picker component."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "cellMargin": {
          "kind": "property",
          "signature": "cellMargin?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The distance between cells"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom className to apply to the container."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme to apply to the container"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ISwatchColorPickerStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Styles for the Color Picker Component."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focusedContainer": {
          "kind": "property",
          "signature": "focusedContainer?: IStyle;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional, style for the FocusZone container for the grid"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style applied to the container grid of the swatchColorPicker"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "tableCell": {
          "kind": "property",
          "signature": "tableCell: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the table cells of the grid."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ITag": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "key": {
          "kind": "property",
          "signature": "key: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "name": {
          "kind": "property",
          "signature": "name: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ITagItemProps": {
      "kind": "interface",
      "extends": "IPickerItemProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "enableTagFocusInDisabledPicker": {
          "kind": "property",
          "signature": "enableTagFocusInDisabledPicker?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ITagPickerProps": {
      "kind": "interface",
      "extends": "IBasePickerProps",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "ITeachingBubble": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the TeachingBubble root element"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ITeachingBubbleProps": {
      "kind": "interface",
      "extends": "React.Props",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "TeachingBubble component props."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaDescribedBy": {
          "kind": "property",
          "signature": "ariaDescribedBy?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the element id referencing the element containing the description for the TeachingBubble."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabelledBy": {
          "kind": "property",
          "signature": "ariaLabelledBy?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Defines the element id referencing the element containing label text for TeachingBubble."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "calloutProps": {
          "kind": "property",
          "signature": "calloutProps?: ICalloutProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICalloutProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Properties to pass through for Callout, reference detail properties in ICalloutProps"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<ITeachingBubble>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<ITeachingBubble>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the ITeachingBubble interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hasCloseIcon": {
          "kind": "property",
          "signature": "hasCloseIcon?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Does the TeachingBubble have a close button in the top right corner?"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hasCondensedHeadline": {
          "kind": "property",
          "signature": "hasCondensedHeadline?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A variation with smaller bold headline and no margins."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hasSmallHeadline": {
          "kind": "property",
          "signature": "hasSmallHeadline?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A variation with smaller bold headline and margins to the body (hasCondensedHeadline takes precedence if it is also set to true)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "headline": {
          "kind": "property",
          "signature": "headline?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A headline for the Teaching Bubble."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "illustrationImage": {
          "kind": "property",
          "signature": "illustrationImage?: IImageProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IImageProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An Image for the Teaching Bubble."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isWide": {
          "kind": "property",
          "signature": "isWide?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not the Teaching Bubble is wide, with image on the left side."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onDismiss": {
          "kind": "property",
          "signature": "onDismiss?: (ev?: any) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: any) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback when the TeachingBubble tries to close."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryButtonProps": {
          "kind": "property",
          "signature": "primaryButtonProps?: IButtonProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IButtonProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The Primary interaction button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "secondaryButtonProps": {
          "kind": "property",
          "signature": "secondaryButtonProps?: IButtonProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IButtonProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The Secondary interaction button"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<ITeachingBubbleStyleProps, ITeachingBubbleStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<ITeachingBubbleStyleProps, ITeachingBubbleStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "targetElement": {
          "kind": "property",
          "signature": "targetElement?: HTMLElement;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "HTMLElement",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Element to anchor the TeachingBubble to."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ITeachingBubbleState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "isTeachingBubbleVisible": {
          "kind": "property",
          "signature": "isTeachingBubbleVisible?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ITeachingBubbleStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "body": {
          "kind": "property",
          "signature": "body: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "bodyContent": {
          "kind": "property",
          "signature": "bodyContent: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "closeButton": {
          "kind": "property",
          "signature": "closeButton: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "content": {
          "kind": "property",
          "signature": "content: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "footer": {
          "kind": "property",
          "signature": "footer: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "header": {
          "kind": "property",
          "signature": "header: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "headline": {
          "kind": "property",
          "signature": "headline: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "imageContent": {
          "kind": "property",
          "signature": "imageContent: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "primaryButton": {
          "kind": "property",
          "signature": "primaryButton: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "secondaryButton": {
          "kind": "property",
          "signature": "secondaryButton: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "subText": {
          "kind": "property",
          "signature": "subText: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ITextField": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "blur": {
          "kind": "property",
          "signature": "blur: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Blurs the input"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "property",
          "signature": "focus: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the input."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "select": {
          "kind": "property",
          "signature": "select: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Select the value of the text field."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectionEnd": {
          "kind": "property",
          "signature": "selectionEnd: number | null;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the selection end of the text field. Returns -1 if there is no selection."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectionStart": {
          "kind": "property",
          "signature": "selectionStart: number | null;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the selection start of the text field. Returns -1 if there is no selection."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "setSelectionEnd": {
          "kind": "property",
          "signature": "setSelectionEnd: (value: number) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(value: number) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the selection end of the text field to a specified value."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "setSelectionRange": {
          "kind": "property",
          "signature": "setSelectionRange: (start: number, end: number) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(start: number, end: number) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the start and end positions of a selection in a text field."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "setSelectionStart": {
          "kind": "property",
          "signature": "setSelectionStart: (value: number) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(value: number) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the selection start of the text field to a specified value."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "value: string | undefined;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the current value of the input."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ITextFieldProps": {
      "kind": "interface",
      "extends": "React.AllHTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "TextField component props."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "addonString": {
          "kind": "property",
          "signature": "addonString?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "prefix",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Aria Label for textfield, if any."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "autoAdjustHeight": {
          "kind": "property",
          "signature": "autoAdjustHeight?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not to auto adjust textField height. Applies only to multiline textfield."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "autoComplete": {
          "kind": "property",
          "signature": "autoComplete?: 'on' | 'off';",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "'on' | 'off'",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether the input field should have autocomplete enabled. This tells the browser to display options based on earlier typed values."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "borderless": {
          "kind": "property",
          "signature": "borderless?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not the textfield is borderless."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional class name that is added to the container of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentId": {
          "kind": "property",
          "signature": "componentId?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Serves no function."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated property. Serves no function."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<ITextField>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<ITextField>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the ITextField interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "defaultValue": {
          "kind": "property",
          "signature": "defaultValue?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Default value of the textfield, if any. Only provide this if the textfield is an uncontrolled component; otherwise, use the \"value\" property."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "deferredValidationTime": {
          "kind": "property",
          "signature": "deferredValidationTime?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Text field will start to validate after users stop typing for "
            },
            {
              "kind": "code",
              "text": "deferredValidationTime",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " milliseconds."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "description": {
          "kind": "property",
          "signature": "description?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The textfield input description"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Disabled state of the textfield."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "errorMessage": {
          "kind": "property",
          "signature": "errorMessage?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If set, this will display an error message for the text field."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconClass": {
          "kind": "property",
          "signature": "iconClass?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "iconProps",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "iconProps": {
          "kind": "property",
          "signature": "iconProps?: IIconProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IIconProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional icon props for an icon."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inputClassName": {
          "kind": "property",
          "signature": "inputClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional class name that is added specifically to the input/textarea element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Label for the textfield."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "mask": {
          "kind": "property",
          "signature": "mask?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The masking string that defines the mask's behavior. A backslash will escape any character. Special format characters are: '9': [0-9] 'a': [a-zA-Z] '*': [a-zA-Z0-9]"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "maskChar": {
          "kind": "property",
          "signature": "maskChar?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The character to show in place of unfilled characters of the mask."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "maskFormat": {
          "kind": "property",
          "signature": "maskFormat?:",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        [key: string]: RegExp;\n    }",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "An object defining the format characters and corresponding regexp values. Default format characters: { '9': /[0-9]/, 'a': /[a-zA-Z]/, '*': /[a-zA-Z0-9]/ }"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "multiline": {
          "kind": "property",
          "signature": "multiline?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not the textfield is a multiline textfield."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onBeforeChange": {
          "kind": "property",
          "signature": "onBeforeChange?: (newValue: any) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(newValue: any) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for the onBeforeChange event."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChange": {
          "kind": "property",
          "signature": "onChange?: (event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(event: React.FormEvent<HTMLInputElement | HTMLTextAreaElement>, newValue?: string) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for when the input value changes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChanged": {
          "kind": "property",
          "signature": "onChanged?: (newValue: any) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(newValue: any) => void",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "onChange",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onGetErrorMessage": {
          "kind": "property",
          "signature": "onGetErrorMessage?: (value: string) => string | PromiseLike<string> | undefined;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(value: string) => string | PromiseLike<string> | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The method is used to get the validation error message and determine whether the input value is valid or not."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "When it returns string: - If valid, it returns empty string. - If invalid, it returns the error message string and the text field will show a red border and show an error message below the text field."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "When it returns Promise"
            },
            {
              "kind": "html-tag",
              "token": "<string>"
            },
            {
              "kind": "text",
              "text": ": - The resolved value is display as error message. - The rejected, the value is thrown away."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onNotifyValidationResult": {
          "kind": "property",
          "signature": "onNotifyValidationResult?: (errorMessage: string, value: string | undefined) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(errorMessage: string, value: string | undefined) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback for the onNotifyValidationResult event."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderAddon": {
          "kind": "property",
          "signature": "onRenderAddon?: IRenderFunction<ITextFieldProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<ITextFieldProps>",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "onRenderPrefix",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderDescription": {
          "kind": "property",
          "signature": "onRenderDescription?: IRenderFunction<ITextFieldProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<ITextFieldProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom renderer for the description."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderLabel": {
          "kind": "property",
          "signature": "onRenderLabel?: IRenderFunction<ITextFieldProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<ITextFieldProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional custom renderer for the label."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderPrefix": {
          "kind": "property",
          "signature": "onRenderPrefix?: IRenderFunction<ITextFieldProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<ITextFieldProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom render function for prefix."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderSuffix": {
          "kind": "property",
          "signature": "onRenderSuffix?: IRenderFunction<ITextFieldProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<ITextFieldProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Custom render function for suffix."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "prefix": {
          "kind": "property",
          "signature": "prefix?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "String for prefix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "readOnly": {
          "kind": "property",
          "signature": "readOnly?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "If true, the textfield is readonly."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "resizable": {
          "kind": "property",
          "signature": "resizable?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not the multiline textfield is resizable."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<ITextFieldStyleProps, ITextFieldStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<ITextFieldStyleProps, ITextFieldStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suffix": {
          "kind": "property",
          "signature": "suffix?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "String for suffix"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme (provided through customization.)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "underlined": {
          "kind": "property",
          "signature": "underlined?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not the textfield is underlined."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "validateOnFocusIn": {
          "kind": "property",
          "signature": "validateOnFocusIn?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Run validation only on input focus"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "validateOnFocusOut": {
          "kind": "property",
          "signature": "validateOnFocusOut?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Run validation only on input focus out"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "validateOnLoad": {
          "kind": "property",
          "signature": "validateOnLoad?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional flag to disable onload validation"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "value?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Current value of the textfield. Only provide this if the textfield is a controlled component where you are maintaining its current state; otherwise, use the \"defaultValue\" property."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ITextFieldState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "errorMessage": {
          "kind": "property",
          "signature": "errorMessage: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "The validation error message."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "- If there is no validation error or we have not validated the input value, errorMessage is an empty string. - If we have done the validation and there is validation error, errorMessage is the validation error message."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isFocused": {
          "kind": "property",
          "signature": "isFocused: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Is true when the control has focus."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "value: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ITextFieldStyles": {
      "kind": "interface",
      "extends": "IStyleSet",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "description": {
          "kind": "property",
          "signature": "description: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for description element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "errorMessage": {
          "kind": "property",
          "signature": "errorMessage: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for error message element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "field": {
          "kind": "property",
          "signature": "field: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for main field entry element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "fieldGroup": {
          "kind": "property",
          "signature": "fieldGroup: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for field group encompassing entry area (prefix, field, icon and suffix)."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "icon": {
          "kind": "property",
          "signature": "icon: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for icon prop element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "prefix": {
          "kind": "property",
          "signature": "prefix: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for prefix element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "subComponentStyles": {
          "kind": "property",
          "signature": "subComponentStyles: ITextFieldSubComponentStyles;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITextFieldSubComponentStyles",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styling for subcomponents."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "suffix": {
          "kind": "property",
          "signature": "suffix: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for suffix element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "wrapper": {
          "kind": "property",
          "signature": "wrapper: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for TextField wrapper element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ITextFieldSubComponentStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "label": {
          "kind": "property",
          "signature": "label: IStyleFunctionOrObject<any, any>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<any, any>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Styling for Label child component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ITheme": {
      "kind": "interface",
      "extends": "IScheme",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {}
    },
    "IThemeRules": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__index": {
          "kind": "method",
          "signature": "[key: string]: IThemeSlotRule;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "IThemeSlotRule",
            "description": []
          },
          "parameters": {
            "key": {
              "name": "key",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "IThemeSlotRule": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "asShade": {
          "kind": "property",
          "signature": "asShade?: Shade;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "Shade",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "color": {
          "kind": "property",
          "signature": "color?: IColor;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IColor",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dependentRules": {
          "kind": "property",
          "signature": "dependentRules: IThemeSlotRule[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IThemeSlotRule[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "inherits": {
          "kind": "property",
          "signature": "inherits?: IThemeSlotRule;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IThemeSlotRule",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isBackgroundShade": {
          "kind": "property",
          "signature": "isBackgroundShade?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "isCustomized": {
          "kind": "property",
          "signature": "isCustomized?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "name": {
          "kind": "property",
          "signature": "name: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "value": {
          "kind": "property",
          "signature": "value?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IToggle": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focus": {
          "kind": "property",
          "signature": "focus: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IToggleProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Toggle component props."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "ariaLabel": {
          "kind": "property",
          "signature": "ariaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Text for screen-reader to announce as the name of the toggle."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "as": {
          "kind": "property",
          "signature": "as?: IComponentAs<React.HTMLAttributes<HTMLElement>>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IComponentAs<React.HTMLAttributes<HTMLElement>>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Render the root element as another type."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "checked": {
          "kind": "property",
          "signature": "checked?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Checked state of the toggle. If you are maintaining state yourself, use this property. Otherwise refer to "
            },
            {
              "kind": "code",
              "text": "defaultChecked",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<IToggle>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<IToggle>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the IToggle interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "defaultChecked": {
          "kind": "property",
          "signature": "defaultChecked?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Initial state of the toggle. If you want the toggle to maintain its own state, use this. Otherwise refer to "
            },
            {
              "kind": "code",
              "text": "checked",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": "."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional disabled flag."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "keytipProps": {
          "kind": "property",
          "signature": "keytipProps?: IKeytipProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IKeytipProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional keytip for this toggle"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "A label for the toggle."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "offAriaLabel": {
          "kind": "property",
          "signature": "offAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "ariaLabel",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " for name, and let the metadata convey state"
            }
          ],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "offText": {
          "kind": "property",
          "signature": "offText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Text to display when toggle is OFF."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onAriaLabel": {
          "kind": "property",
          "signature": "onAriaLabel?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "ariaLabel",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " for name, and let the metadata convey state"
            }
          ],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChange": {
          "kind": "property",
          "signature": "onChange?: (event: React.MouseEvent<HTMLElement>, checked?: boolean) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(event: React.MouseEvent<HTMLElement>, checked?: boolean) => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Callback issued when the value changes."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onChanged": {
          "kind": "property",
          "signature": "onChanged?: (checked: boolean) => void;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(checked: boolean) => void",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "onChange",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onText": {
          "kind": "property",
          "signature": "onText?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Text to display when toggle is ON."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<IToggleStyleProps, IToggleStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<IToggleStyleProps, IToggleStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional styles for the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by HOC."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IToggleState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "checked": {
          "kind": "property",
          "signature": "checked: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IToggleStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Properties required to build the styles for the Toggle component."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "checked": {
          "kind": "property",
          "signature": "checked?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Component is checked."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Root element class name."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "disabled": {
          "kind": "property",
          "signature": "disabled?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Component is disabled."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme values."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IToggleStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Styles for the Toggle component."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "container": {
          "kind": "property",
          "signature": "container: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Container for the toggle pill and the text next to it."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "label": {
          "kind": "property",
          "signature": "label: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Label element above the toggle."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "pill": {
          "kind": "property",
          "signature": "pill: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Pill, rendered as a button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "text": {
          "kind": "property",
          "signature": "text: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Text next to the pill."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "thumb": {
          "kind": "property",
          "signature": "thumb: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Thumb inside of the pill."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ITooltip": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "ITooltipHost": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "ITooltipHostProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Tooltip component props."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "calloutProps": {
          "kind": "property",
          "signature": "calloutProps?: ICalloutProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICalloutProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional properties to pass through for Callout, reference detail properties in ICalloutProps"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "closeDelay": {
          "kind": "property",
          "signature": "closeDelay?: number;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optionally a number of milliseconds to delay closing the tooltip, so that the user has time to hover over the tooltip and interact with it. Hovering over the tooltip will count as hovering over the host, so that the tooltip will stay open if the user is actively interacting with it."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<ITooltipHost>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<ITooltipHost>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the ITooltipHost interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "content": {
          "kind": "property",
          "signature": "content?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "String to be passed to the tooltip"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "delay": {
          "kind": "property",
          "signature": "delay?: TooltipDelay;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "TooltipDelay",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Length of delay"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "directionalHint": {
          "kind": "property",
          "signature": "directionalHint?: DirectionalHint;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DirectionalHint",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicator of how the tooltip should be anchored to its targetElement."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "directionalHintForRTL": {
          "kind": "property",
          "signature": "directionalHintForRTL?: DirectionalHint;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DirectionalHint",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "How the element should be positioned in RTL layouts. If not specified, a mirror of "
            },
            {
              "kind": "code",
              "text": "directionalHint",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " will be used instead"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "hostClassName": {
          "kind": "property",
          "signature": "hostClassName?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional class name to apply to tooltip host."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onTooltipToggle": {
          "kind": "method",
          "signature": "onTooltipToggle?(isTooltipVisible: boolean): void;",
          "accessModifier": "",
          "isOptional": true,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "isTooltipVisible": {
              "name": "isTooltipVisible",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Notifies when tooltip becomes visible or hidden, whatever the trigger was."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "overflowMode": {
          "kind": "property",
          "signature": "overflowMode?: TooltipOverflowMode;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "TooltipOverflowMode",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Only show if there is overflow. If set, the tooltip hosts observes and only shows the tooltip if this element has overflow. It also uses the parent as target element for the tooltip."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "setAriaDescribedBy": {
          "kind": "property",
          "signature": "setAriaDescribedBy?: boolean;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Whether or not to mark the container as described by the tooltip. If not specified, the caller should mark as element as described by the tooltip id."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<ITooltipHostStyleProps, ITooltipHostStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<ITooltipHostStyleProps, ITooltipHostStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme provided by High-Order Component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "tooltipProps": {
          "kind": "property",
          "signature": "tooltipProps?: ITooltipProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITooltipProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Additional properties to pass through for Tooltip, reference detail properties in ITooltipProps"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ITooltipHostState": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "isTooltipVisible": {
          "kind": "property",
          "signature": "isTooltipVisible: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ITooltipHostStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept optional classNames for the host wrapper"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept theme prop."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ITooltipHostStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the host wrapper element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ITooltipProps": {
      "kind": "interface",
      "extends": "React.HTMLAttributes",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Tooltip component props."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "calloutProps": {
          "kind": "property",
          "signature": "calloutProps?: ICalloutProps;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ICalloutProps",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Properties to pass through for Callout, reference detail properties in ICalloutProps"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentRef": {
          "kind": "property",
          "signature": "componentRef?: IRefObject<ITooltip>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRefObject<ITooltip>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional callback to access the ITooltip interface. Use this instead of ref for accessing the public methods and properties of the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "content": {
          "kind": "property",
          "signature": "content?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "String to be passed to the tooltip"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "delay": {
          "kind": "property",
          "signature": "delay?: TooltipDelay;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "TooltipDelay",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Length of delay. Can be set to zero if you do not want a delay."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "directionalHint": {
          "kind": "property",
          "signature": "directionalHint?: DirectionalHint;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DirectionalHint",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Indicator of how the tooltip should be anchored to its targetElement."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "directionalHintForRTL": {
          "kind": "property",
          "signature": "directionalHintForRTL?: DirectionalHint;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "DirectionalHint",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "How the element should be positioned in RTL layouts. If not specified, a mirror of "
            },
            {
              "kind": "code",
              "text": "directionalHint",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " will be used instead"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "maxWidth": {
          "kind": "property",
          "signature": "maxWidth?: string | null;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Max width of tooltip"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onRenderContent": {
          "kind": "property",
          "signature": "onRenderContent?: IRenderFunction<ITooltipProps>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IRenderFunction<ITooltipProps>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Render function to populate content area"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "styles": {
          "kind": "property",
          "signature": "styles?: IStyleFunctionOrObject<ITooltipStyleProps, ITooltipStyles>;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyleFunctionOrObject<ITooltipStyleProps, ITooltipStyles>",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Call to provide customized styling that will layer on top of the variant rules."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "targetElement": {
          "kind": "property",
          "signature": "targetElement?: HTMLElement;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "HTMLElement",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Element to anchor the Tooltip to."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme?: ITheme;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Theme to apply to the component."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ITooltipStyleProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "className": {
          "kind": "property",
          "signature": "className?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept custom classNames"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "delay": {
          "kind": "property",
          "signature": "delay?: TooltipDelay;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "TooltipDelay",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Delay before tooltip appears."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "maxWidth": {
          "kind": "property",
          "signature": "maxWidth?: string;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Maximum width of tooltip."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "theme": {
          "kind": "property",
          "signature": "theme: ITheme;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ITheme",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Accept theme prop."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ITooltipStyles": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "content": {
          "kind": "property",
          "signature": "content: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the content element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "root": {
          "kind": "property",
          "signature": "root: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the root element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "subText": {
          "kind": "property",
          "signature": "subText: IStyle;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IStyle",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Style for the subtext element."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IVerticalDividerClassNames": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "divider": {
          "kind": "property",
          "signature": "divider: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "wrapper": {
          "kind": "property",
          "signature": "wrapper: string;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "string",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "IVerticalDividerProps": {
      "kind": "interface",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "getClassNames": {
          "kind": "property",
          "signature": "getClassNames?: (theme: ITheme) => IVerticalDividerClassNames;",
          "isOptional": true,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(theme: ITheme) => IVerticalDividerClassNames",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Optional function to generate the class names for the divider for custom styling"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "KeyboardSpinDirection": {
      "kind": "enum",
      "values": {
        "down": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "notSpinning": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "up": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "KeyCodes": {
      "kind": "enum",
      "values": {
        "a": {
          "kind": "enum value",
          "value": "65",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "add": {
          "kind": "enum value",
          "value": "107",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "alt": {
          "kind": "enum value",
          "value": "18",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "b": {
          "kind": "enum value",
          "value": "66",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "backSlash": {
          "kind": "enum value",
          "value": "220",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "backspace": {
          "kind": "enum value",
          "value": "8",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "c": {
          "kind": "enum value",
          "value": "67",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "capslock": {
          "kind": "enum value",
          "value": "20",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "closeBracket": {
          "kind": "enum value",
          "value": "221",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "comma": {
          "kind": "enum value",
          "value": "188",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ctrl": {
          "kind": "enum value",
          "value": "17",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "d": {
          "kind": "enum value",
          "value": "68",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "dash": {
          "kind": "enum value",
          "value": "189",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "decimalPoint": {
          "kind": "enum value",
          "value": "110",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "del": {
          "kind": "enum value",
          "value": "46",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "divide": {
          "kind": "enum value",
          "value": "111",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "down": {
          "kind": "enum value",
          "value": "40",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "e": {
          "kind": "enum value",
          "value": "69",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "eight": {
          "kind": "enum value",
          "value": "56",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "eight_numpad": {
          "kind": "enum value",
          "value": "104",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "end": {
          "kind": "enum value",
          "value": "35",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "enter": {
          "kind": "enum value",
          "value": "13",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "equalSign": {
          "kind": "enum value",
          "value": "187",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "escape": {
          "kind": "enum value",
          "value": "27",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "f": {
          "kind": "enum value",
          "value": "70",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "f1": {
          "kind": "enum value",
          "value": "112",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "f10": {
          "kind": "enum value",
          "value": "121",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "f11": {
          "kind": "enum value",
          "value": "122",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "f12": {
          "kind": "enum value",
          "value": "123",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "f2": {
          "kind": "enum value",
          "value": "113",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "f3": {
          "kind": "enum value",
          "value": "114",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "f4": {
          "kind": "enum value",
          "value": "115",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "f5": {
          "kind": "enum value",
          "value": "116",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "f6": {
          "kind": "enum value",
          "value": "117",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "f7": {
          "kind": "enum value",
          "value": "118",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "f8": {
          "kind": "enum value",
          "value": "119",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "f9": {
          "kind": "enum value",
          "value": "120",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "five": {
          "kind": "enum value",
          "value": "53",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "five_numpad": {
          "kind": "enum value",
          "value": "101",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "forwardSlash": {
          "kind": "enum value",
          "value": "191",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "four": {
          "kind": "enum value",
          "value": "52",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "four_numpad": {
          "kind": "enum value",
          "value": "100",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "g": {
          "kind": "enum value",
          "value": "71",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "graveAccent": {
          "kind": "enum value",
          "value": "192",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "h": {
          "kind": "enum value",
          "value": "72",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "home": {
          "kind": "enum value",
          "value": "36",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "i": {
          "kind": "enum value",
          "value": "73",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "insert": {
          "kind": "enum value",
          "value": "45",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "j": {
          "kind": "enum value",
          "value": "74",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "k": {
          "kind": "enum value",
          "value": "75",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "l": {
          "kind": "enum value",
          "value": "76",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "left": {
          "kind": "enum value",
          "value": "37",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "leftWindow": {
          "kind": "enum value",
          "value": "91",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "m": {
          "kind": "enum value",
          "value": "77",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "multiply": {
          "kind": "enum value",
          "value": "106",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "n": {
          "kind": "enum value",
          "value": "78",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "nine": {
          "kind": "enum value",
          "value": "57",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "nine_numpad": {
          "kind": "enum value",
          "value": "105",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "numlock": {
          "kind": "enum value",
          "value": "144",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "o": {
          "kind": "enum value",
          "value": "79",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "one": {
          "kind": "enum value",
          "value": "49",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "one_numpad": {
          "kind": "enum value",
          "value": "97",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "openBracket": {
          "kind": "enum value",
          "value": "219",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "p": {
          "kind": "enum value",
          "value": "80",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "pageDown": {
          "kind": "enum value",
          "value": "34",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "pageUp": {
          "kind": "enum value",
          "value": "33",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "pauseBreak": {
          "kind": "enum value",
          "value": "19",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "period": {
          "kind": "enum value",
          "value": "190",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "q": {
          "kind": "enum value",
          "value": "81",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "r": {
          "kind": "enum value",
          "value": "82",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "right": {
          "kind": "enum value",
          "value": "39",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "rightWindow": {
          "kind": "enum value",
          "value": "92",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "s": {
          "kind": "enum value",
          "value": "83",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "scrollLock": {
          "kind": "enum value",
          "value": "145",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "select": {
          "kind": "enum value",
          "value": "93",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "semicolon": {
          "kind": "enum value",
          "value": "186",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "seven": {
          "kind": "enum value",
          "value": "55",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "seven_numpad": {
          "kind": "enum value",
          "value": "103",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "shift": {
          "kind": "enum value",
          "value": "16",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "singleQuote": {
          "kind": "enum value",
          "value": "222",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "six": {
          "kind": "enum value",
          "value": "54",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "six_numpad": {
          "kind": "enum value",
          "value": "102",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "space": {
          "kind": "enum value",
          "value": "32",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "subtract": {
          "kind": "enum value",
          "value": "109",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "t": {
          "kind": "enum value",
          "value": "84",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "tab": {
          "kind": "enum value",
          "value": "9",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "three": {
          "kind": "enum value",
          "value": "51",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "three_numpad": {
          "kind": "enum value",
          "value": "99",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "two": {
          "kind": "enum value",
          "value": "50",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "two_numpad": {
          "kind": "enum value",
          "value": "98",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "u": {
          "kind": "enum value",
          "value": "85",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "up": {
          "kind": "enum value",
          "value": "38",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "v": {
          "kind": "enum value",
          "value": "86",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "w": {
          "kind": "enum value",
          "value": "87",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "x": {
          "kind": "enum value",
          "value": "88",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "y": {
          "kind": "enum value",
          "value": "89",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "z": {
          "kind": "enum value",
          "value": "90",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "zero": {
          "kind": "enum value",
          "value": "48",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "zero_numpad": {
          "kind": "enum value",
          "value": "96",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Const enum for keycodes."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "keyframes": {
      "kind": "function",
      "signature": "export function keyframes(timeline: {\n    [key: string]: {};\n}): string;",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {
        "timeline": {
          "name": "timeline",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "{\n    [key: string]: {};\n}"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Registers keyframe definitions."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "Keytip": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "IKeytip",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "A callout corresponding to another Fabric component to describe a key sequence that will activate that component"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "KeytipData": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "A small element to help the target component correctly read out its aria-describedby for its Keytip"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "KeytipLayerBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "A layer that holds all keytip items"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IKeytipLayerProps, context: any);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IKeytipLayerProps"
            },
            "context": {
              "name": "context",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "any"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "KeytipLayerBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "KeytipLayerBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IKeytipLayerProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IKeytipLayerProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getCurrentSequence": {
          "kind": "method",
          "signature": "getCurrentSequence(): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getKeytipTree": {
          "kind": "method",
          "signature": "getKeytipTree(): KeytipTree;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "KeytipTree",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "processInput": {
          "kind": "method",
          "signature": "processInput(key: string, ev?: React.KeyboardEvent<HTMLElement>): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "key": {
              "name": "key",
              "description": [
                {
                  "kind": "text",
                  "text": "Key pressed by the user"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "ev": {
              "name": "ev",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "React.KeyboardEvent<HTMLElement>"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Processes inputs from the document listener and traverse the keytip tree"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "processTransitionInput": {
          "kind": "method",
          "signature": "processTransitionInput(transitionKey: IKeytipTransitionKey, ev?: React.KeyboardEvent<HTMLElement>): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "transitionKey": {
              "name": "transitionKey",
              "description": [
                {
                  "kind": "text",
                  "text": "IKeytipTransitionKey received by the layer to process"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "IKeytipTransitionKey"
            },
            "ev": {
              "name": "ev",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "React.KeyboardEvent<HTMLElement>"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Processes an IKeytipTransitionKey entered by the user"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "showKeytips": {
          "kind": "method",
          "signature": "showKeytips(ids: string[]): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "ids": {
              "name": "ids",
              "description": [
                {
                  "kind": "text",
                  "text": "Keytip IDs to show"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "string[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Show the given keytips and hide all others"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "LabelBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "LayerBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: ILayerProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ILayerProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "LayerBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "LayerBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillMount": {
          "kind": "method",
          "signature": "componentWillMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUpdate": {
          "kind": "method",
          "signature": "componentWillUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: ILayerProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "ILayerProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): React.ReactNode;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "React.ReactNode",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "LayerHost": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "shouldComponentUpdate": {
          "kind": "method",
          "signature": "shouldComponentUpdate(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "LinkBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "ILink",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "List": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "IList",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The List renders virtualized pages of items. Each page's item count is determined by the getItemCountForPage callback if provided by the caller, or 10 as default. Each page's height is determined by the getPageHeight callback if provided by the caller, or by cached measurements if available, or by a running average, or a default fallback."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "The algorithm for rendering pages works like this:"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "1. Predict visible pages based on \"current measure data\" (page heights, surface position, visible window) 2. If changes are necessary, apply changes (add/remove pages) 3. For pages that are added, measure the page heights if we need to using getBoundingClientRect 4. If measurements don't match predictions, update measure data and goto step 1 asynchronously"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "Measuring too frequently can pull performance down significantly. To compensate, we cache measured values so that we can avoid re-measuring during operations that should not alter heights, like scrolling."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "To optimize glass rendering performance, onShouldVirtualize can be set. When onShouldVirtualize return false, List will run in fast mode (not virtualized) to render all items without any measurements to improve page load time. And we start doing measurements and rendering in virtualized mode when items grows larger than this threshold."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "However, certain operations can make measure data stale. For example, resizing the list, or passing in new props, or forcing an update change cause pages to shrink/grow. When these operations occur, we increment a measureVersion number, which we associate with cached measurements and use to determine if a remeasure should occur."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IListProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IListProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "List"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "List",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: IListProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IListProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "{\n        startIndex: number;\n        onRenderCell: (item: any, index: number, containsFocus: boolean) => JSX.Element;\n        renderedWindowsAhead: number;\n        renderedWindowsBehind: number;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "forceUpdate": {
          "kind": "method",
          "signature": "forceUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getStartItemIndexInView": {
          "kind": "method",
          "signature": "getStartItemIndexInView(measureItem?: (itemIndex: number) => number): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": []
          },
          "parameters": {
            "measureItem": {
              "name": "measureItem",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "(itemIndex: number) => number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "refs": {
          "kind": "property",
          "signature": "refs:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        [key: string]: React.ReactInstance;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scrollToIndex": {
          "kind": "method",
          "signature": "scrollToIndex(index: number, measureItem?: (itemIndex: number) => number, scrollToMode?: ScrollToMode): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [
                {
                  "kind": "text",
                  "text": "Index of item to scroll to"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "measureItem": {
              "name": "measureItem",
              "description": [
                {
                  "kind": "text",
                  "text": "Optional callback to measure the height of an individual item"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "(itemIndex: number) => number"
            },
            "scrollToMode": {
              "name": "scrollToMode",
              "description": [
                {
                  "kind": "text",
                  "text": "Optional defines where in the window the item should be positioned to when scrolling"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "ScrollToMode"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Scroll to the given index. By default will bring the page the specified item is on into the view. If a callback to measure the height of an individual item is specified, will only scroll to bring the specific item into view."
            },
            {
              "kind": "paragraph"
            },
            {
              "kind": "text",
              "text": "Note: with items of variable height and no passed in "
            },
            {
              "kind": "code",
              "text": "getPageHeight",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " method, the list might jump after scrolling when windows before/ahead are being rendered, and the estimated height is replaced using actual elements."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "shouldComponentUpdate": {
          "kind": "method",
          "signature": "shouldComponentUpdate(newProps: IListProps, newState: IListState): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IListProps"
            },
            "newState": {
              "name": "newState",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IListState"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ListPeoplePicker": {
      "kind": "class",
      "extends": "MemberListPeoplePicker",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "MemberList layout. The selected people show up below the search box."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "{\n        onRenderItem: (props: IPeoplePickerItemProps) => JSX.Element;\n        onRenderSuggestionsItem: (props: IPersonaProps, itemProps?: IBasePickerSuggestionsProps | undefined) => JSX.Element;\n        createGenericItem: typeof createGenericItem;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "loadTheme": {
      "kind": "function",
      "signature": "export function loadTheme(theme: IPartialTheme, depComments?: boolean): ITheme;",
      "returnValue": {
        "type": "ITheme",
        "description": []
      },
      "parameters": {
        "theme": {
          "name": "theme",
          "description": [
            {
              "kind": "text",
              "text": "Partial theme object."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "IPartialTheme"
        },
        "depComments": {
          "name": "depComments",
          "description": [
            {
              "kind": "text",
              "text": "Whether to include deprecated tags as comments for deprecated slots."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Applies the theme, while filling in missing slots."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "mapEnumByName": {
      "kind": "function",
      "signature": "export function mapEnumByName<T>(theEnum: any, callback: (name?: string, value?: string | number) => T | undefined): (T | undefined)[] | undefined;",
      "returnValue": {
        "type": "(T | undefined)[] | undefined",
        "description": []
      },
      "parameters": {
        "theEnum": {
          "name": "theEnum",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "any"
        },
        "callback": {
          "name": "callback",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "(name?: string, value?: string | number) => T | undefined"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "MaskedTextField": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "ITextField",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: ITextFieldProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ITextFieldProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "MaskedTextField"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "MaskedTextField",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "_skipComponentRefResolution": {
          "kind": "property",
          "signature": "protected _skipComponentRefResolution: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Tell BaseComponent to bypass resolution of componentRef."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "blur": {
          "kind": "method",
          "signature": "blur(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: ITextFieldProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ITextFieldProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: ITextFieldProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "ITextFieldProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "select": {
          "kind": "method",
          "signature": "select(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "selectionEnd": {
          "kind": "property",
          "signature": "readonly selectionEnd: number | null;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectionStart": {
          "kind": "property",
          "signature": "readonly selectionStart: number | null;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "setSelectionEnd": {
          "kind": "method",
          "signature": "setSelectionEnd(value: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setSelectionRange": {
          "kind": "method",
          "signature": "setSelectionRange(start: number, end: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "start": {
              "name": "start",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "end": {
              "name": "end",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setSelectionStart": {
          "kind": "method",
          "signature": "setSelectionStart(value: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setValue": {
          "kind": "method",
          "signature": "setValue(newValue: string): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newValue": {
              "name": "newValue",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "value": {
          "kind": "property",
          "signature": "readonly value: string | undefined;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string | undefined",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "MemberListPeoplePicker": {
      "kind": "class",
      "extends": "BasePickerListBelow",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false
    },
    "memoize": {
      "kind": "function",
      "signature": "export function memoize<T extends Function>(target: any, key: string, descriptor: TypedPropertyDescriptor<T>): {\n    configurable: boolean;\n    get(): T;\n};",
      "returnValue": {
        "type": "{\n    configurable: boolean;\n    get(): T;\n}",
        "description": []
      },
      "parameters": {
        "target": {
          "name": "target",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "any"
        },
        "key": {
          "name": "key",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        },
        "descriptor": {
          "name": "descriptor",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "TypedPropertyDescriptor<T>"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Memoize decorator to be used on class methods. Note that the \"this\" reference will be inaccessible within a memoized method, given that a cached method's this would not be instance specific."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "memoizeFunction": {
      "kind": "function",
      "signature": "export function memoizeFunction<T extends (...args: any[]) => RET_TYPE, RET_TYPE>(cb: T, maxCacheSize?: number): T;",
      "returnValue": {
        "type": "T",
        "description": [
          {
            "kind": "text",
            "text": "A memoized version of the function."
          }
        ]
      },
      "parameters": {
        "cb": {
          "name": "cb",
          "description": [
            {
              "kind": "text",
              "text": "The function to memoize."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "T"
        },
        "maxCacheSize": {
          "name": "maxCacheSize",
          "description": [
            {
              "kind": "text",
              "text": "Max results to cache. If the cache exceeds this value, it will reset on the next call."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Memoizes a function; when you pass in the same parameters multiple times, it returns a cached result. Be careful when passing in objects, you need to pass in the same INSTANCE for caching to work. Otherwise it will grow the cache unnecessarily. Also avoid using default values that evaluate functions; passing in undefined for a value and relying on a default function will execute it the first time, but will not re-evaluate subsequent times which may have been unexpected."
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "By default, the cache will reset after 100 permutations, to avoid abuse cases where the function is unintendedly called with unique objects. Without a reset, the cache could grow infinitely, so we safeguard by resetting. To override this behavior, pass a value of 0 to the maxCacheSize parameter."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "merge": {
      "kind": "function",
      "signature": "export function merge<T = {}>(target: Partial<T>, ...args: (Partial<T> | null | undefined | false)[]): T;",
      "returnValue": {
        "type": "T",
        "description": []
      },
      "parameters": {
        "target": {
          "name": "target",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "Partial<T>"
        },
        "args": {
          "name": "args",
          "description": [],
          "isOptional": false,
          "isSpread": true,
          "type": "(Partial<T> | null | undefined | false)[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Simple deep merge function. Takes all arguments and returns a deep copy of the objects merged together in the order provided. If an object creates a circular reference, it will assign the original reference."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "mergeAriaAttributeValues": {
      "kind": "function",
      "signature": "export function mergeAriaAttributeValues(...ariaAttributes: (string | undefined)[]): string | undefined;",
      "returnValue": {
        "type": "string | undefined",
        "description": []
      },
      "parameters": {
        "ariaAttributes": {
          "name": "ariaAttributes",
          "description": [
            {
              "kind": "text",
              "text": "ARIA attributes to merge"
            }
          ],
          "isOptional": false,
          "isSpread": true,
          "type": "(string | undefined)[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "ARIA helper to concatenate attributes, returning undefined if all attributes are undefined. (Empty strings are not a valid ARIA attribute value.)"
        },
        {
          "kind": "paragraph"
        },
        {
          "kind": "text",
          "text": "NOTE: This function will NOT insert whitespace between provided attributes."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "mergeCustomizations": {
      "kind": "function",
      "signature": "export function mergeCustomizations(props: ICustomizerProps, parentContext: ICustomizerContext): ICustomizerContext;",
      "returnValue": {
        "type": "ICustomizerContext",
        "description": []
      },
      "parameters": {
        "props": {
          "name": "props",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "ICustomizerProps"
        },
        "parentContext": {
          "name": "parentContext",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "ICustomizerContext"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "mergeStyles": {
      "kind": "function",
      "signature": "export function mergeStyles(...args: (IStyle | IStyleBaseArray | false | null | undefined)[]): string;",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {
        "args": {
          "name": "args",
          "description": [],
          "isOptional": false,
          "isSpread": true,
          "type": "(IStyle | IStyleBaseArray | false | null | undefined)[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Concatination helper, which can merge class names together. Skips over falsey values."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "mergeStyleSets": {
      "kind": "function",
      "signature": "export function mergeStyleSets(...styleSets: Array<IStyleSet<any> | undefined | false | null>): IProcessedStyleSet<any>;",
      "returnValue": {
        "type": "IProcessedStyleSet<any>",
        "description": []
      },
      "parameters": {
        "styleSets": {
          "name": "styleSets",
          "description": [
            {
              "kind": "text",
              "text": "One or more style sets to be merged."
            }
          ],
          "isOptional": false,
          "isSpread": true,
          "type": "Array<IStyleSet<any> | undefined | false | null>"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Takes in one or more style set objects, each consisting of a set of areas, each which will produce a class name. Using this is analogous to calling "
        },
        {
          "kind": "code",
          "text": "mergeStyles",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " for each property in the object, but ensures we maintain the set ordering when multiple style sets are merged."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "MessageBarBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IMessageBarProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IMessageBarProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "MessageBarBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "MessageBarBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IMessageBarProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IMessageBarProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "MessageBarButton": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "MessageBarType": {
      "kind": "enum",
      "values": {
        "blocked": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Blocked styled MessageBar"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "error": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Error styled MessageBar"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "info": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Info styled MessageBar"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "remove": {
          "kind": "enum value",
          "value": "90000",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "blocked",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated at v0.48.0, to be removed at >= v1.0.0. Use "
            },
            {
              "kind": "code",
              "text": "blocked",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "severeWarning": {
          "kind": "enum value",
          "value": "3",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "SevereWarning styled MessageBar"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "success": {
          "kind": "enum value",
          "value": "4",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Success styled MessageBar"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "warning": {
          "kind": "enum value",
          "value": "5",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Warning styled MessageBar"
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "ModalBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "IModal",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IModalProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IModalProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ModalBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "ModalBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(prevProps: IModalProps, prevState: IDialogState): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "prevProps": {
              "name": "prevProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IModalProps"
            },
            "prevState": {
              "name": "prevState",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IDialogState"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: IModalProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IModalProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IModalProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IModalProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element | null;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element | null",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "NavBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "INav",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: INavProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "INavProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "NavBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "NavBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: INavProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "INavProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: INavProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "INavProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element | null;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element | null",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "selectedKey": {
          "kind": "property",
          "signature": "readonly selectedKey: string | undefined;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string | undefined",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "NormalPeoplePicker": {
      "kind": "class",
      "extends": "BasePeoplePicker",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Standard People Picker."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "{\n        onRenderItem: (props: IPeoplePickerItemProps) => JSX.Element;\n        onRenderSuggestionsItem: (props: IPersonaProps, itemProps?: IBasePickerSuggestionsProps | undefined) => JSX.Element;\n        createGenericItem: typeof createGenericItem;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "nullRender": {
      "kind": "function",
      "signature": "export function nullRender(): JSX.Element | null;",
      "returnValue": {
        "type": "JSX.Element | null",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Simple constant function for returning null, used to render empty templates in JSX."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "OpenCardMode": {
      "kind": "enum",
      "values": {
        "hotKey": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Open card by hot key"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "hover": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Open card by hover"
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "OverflowButtonType": {
      "kind": "enum",
      "values": {
        "descriptive": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "+1 overflow icon"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "downArrow": {
          "kind": "enum value",
          "value": "3",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Chevron overflow icon"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "more": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "More overflow icon"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "none": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "No overflow"
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "OverflowSetBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "IOverflowSet",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IOverflowSetProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IOverflowSetProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "OverflowSetBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "OverflowSetBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUpdate": {
          "kind": "method",
          "signature": "componentWillUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: Pick<IOverflowSetProps, 'vertical' | 'role'>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "Pick<IOverflowSetProps, 'vertical' | 'role'>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(forceIntoFirstElement?: boolean): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "True if focus could be set to an active element, false if no operation was taken."
              }
            ]
          },
          "parameters": {
            "forceIntoFirstElement": {
              "name": "forceIntoFirstElement",
              "description": [
                {
                  "kind": "text",
                  "text": "If true, focus will be forced into the first element, even if focus is already in theOverflowSet"
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the first tabbable item in the OverflowSet."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "focusElement": {
          "kind": "method",
          "signature": "focusElement(childElement?: HTMLElement): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": [
              {
                "kind": "text",
                "text": "True if focus could be set to an active element, false if no operation was taken."
              }
            ]
          },
          "parameters": {
            "childElement": {
              "name": "childElement",
              "description": [
                {
                  "kind": "text",
                  "text": "The child element within the zone to focus."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "HTMLElement"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to a specific child element within the OverflowSet."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "OverlayBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "PanelType": {
      "kind": "enum",
      "values": {
        "custom": {
          "kind": "enum value",
          "value": "7",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Renders the panel in 'custom' mode using customWidth, anchored to the far side (right in LTR mode). Small: <adapts to smallFluid> Medium: <adapts to smallFixedFar> Large: 48px fixed left margin, 32px Left/Right padding XLarge: 644px width, 32px Left/Right padding XXLarge: 643px width, 40px Left/Right padding"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "extraLarge": {
          "kind": "enum value",
          "value": "6",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Renders the panel in 'extra large' mode, anchored to the far side (right in LTR mode). Small: <adapts to smallFluid> Medium: <adapts to smallFixedFar> Large: <adapts to medium> XLarge: <adapts to large> XXLarge: 176px fixed left margin, 40px Left/Right padding XXXLarge: 176px fixed left margin, 40px Left/Right padding"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "large": {
          "kind": "enum value",
          "value": "4",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Renders the panel in 'large' mode, anchored to the far side (right in LTR mode), and is fluid at XXX-Large breakpoint. Small: <adapts to smallFluid> Medium: <adapts to smallFixedFar> Large: <adapts to medium> XLarge: 48px fixed left margin, 32px Left/Right padding XXLarge: 48px fixed left margin, 32px Left/Right padding XXXLarge: 48px fixed left margin, (no redlines for padding, assuming previous breakpoint)"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "largeFixed": {
          "kind": "enum value",
          "value": "5",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Renders the panel in 'large' mode, anchored to the far side (right in LTR mode), and is fixed at XXX-Large breakpoint. Small: <adapts to smallFluid> Medium: <adapts to smallFixedFar> Large: <adapts to medium> XLarge: 48px fixed left margin, 32px Left/Right padding XXLarge: 48px fixed left margin, 32px Left/Right padding XXXLarge: 940px width, (no redlines for padding, assuming previous breakpoint)"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "medium": {
          "kind": "enum value",
          "value": "3",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Renders the panel in 'medium' mode, anchored to the far side (right in LTR mode). Small: <adapts to smallFluid> Medium: <adapts to smallFixedFar> Large: 48px fixed left margin, 32px Left/Right padding XLarge: 644px width, 32px Left/Right padding XXLarge: 643px width, 40px Left/Right padding"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "smallFixedFar": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Renders the panel in 'small' mode, anchored to the far side (right in LTR mode), and has a fixed width. Small: 272px width, 16px Left/Right padding Medium: 340px width, 16px Left/Right padding Large: 340px width, 32px Left/Right padding XLarge: 340px width, 32px Left/Right padding XXLarge: 340px width, 40px Left/Right padding"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "smallFixedNear": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Renders the panel in 'small' mode, anchored to the near side (left in LTR mode), and has a fixed width. Small: 272px width, 16px Left/Right padding Medium: 272px width, 16px Left/Right padding Large: 272px width, 32px Left/Right padding XLarge: 272px width, 32px Left/Right padding XXLarge: 272px width, 32px Left/Right padding"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "smallFluid": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Renders the panel in 'small' mode, anchored to the far side (right in LTR mode), and has a fluid width. Only used on Small screen breakpoints. Small: 320-479px width (full screen), 16px Left/Right padding Medium: <unused> Large: <unused> XLarge: <unused> XXLarge: <unused>"
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "PersonaBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Persona with no default styles. [Use the "
        },
        {
          "kind": "code",
          "text": "styles",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " API to add your own styles.](https://github.com/OfficeDev/office-ui-fabric-react/wiki/Styling)"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IPersonaProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IPersonaProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "PersonaBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "PersonaBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IPersonaProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IPersonaProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "PersonaCoinBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "PersonaCoin with no default styles. [Use the "
        },
        {
          "kind": "code",
          "text": "getStyles",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " API to add your own styles.](https://github.com/OfficeDev/office-ui-fabric-react/wiki/Styling)"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IPersonaCoinProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IPersonaCoinProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "PersonaCoinBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "PersonaCoinBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(nextProps: IPersonaCoinProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "nextProps": {
              "name": "nextProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IPersonaCoinProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IPersonaCoinProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IPersonaCoinProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element | null;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element | null",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "PersonaInitialsColor": {
      "kind": "enum",
      "values": {
        "black": {
          "kind": "enum value",
          "value": "11",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Black is a color that can result in offensive persona coins with some initials combinations, so it can only be set with overrides"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "blue": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "darkBlue": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "darkGreen": {
          "kind": "enum value",
          "value": "6",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "darkRed": {
          "kind": "enum value",
          "value": "14",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "green": {
          "kind": "enum value",
          "value": "5",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "lightBlue": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "lightGreen": {
          "kind": "enum value",
          "value": "4",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "lightPink": {
          "kind": "enum value",
          "value": "7",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "magenta": {
          "kind": "enum value",
          "value": "9",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "orange": {
          "kind": "enum value",
          "value": "12",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "pink": {
          "kind": "enum value",
          "value": "8",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "purple": {
          "kind": "enum value",
          "value": "10",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "red": {
          "kind": "enum value",
          "value": "13",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Red is a color that often has a special meaning, so it is considered a reserved color and can only be set with overrides"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "teal": {
          "kind": "enum value",
          "value": "3",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "transparent": {
          "kind": "enum value",
          "value": "15",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Transparent is not intended to be used with typical initials due to accessibility issues. Its primary use is for overflow buttons, so it is considered a reserved color and can only be set with overrides."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "violet": {
          "kind": "enum value",
          "value": "16",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "PersonaPresence": {
      "kind": "enum",
      "values": {
        "away": {
          "kind": "enum value",
          "value": "3",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "blocked": {
          "kind": "enum value",
          "value": "5",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "busy": {
          "kind": "enum value",
          "value": "6",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "dnd": {
          "kind": "enum value",
          "value": "4",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "none": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "offline": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "online": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "personaPresenceSize": {
      "kind": "namespace",
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "exports": {}
    },
    "personaSize": {
      "kind": "namespace",
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "exports": {}
    },
    "PersonaSize": {
      "kind": "enum",
      "values": {
        "extraExtraSmall": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "size24",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "extraExtraSmall size has been deprecated in favor of standardized numeric sizing. Use "
            },
            {
              "kind": "code",
              "text": "size24",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "extraLarge": {
          "kind": "enum value",
          "value": "6",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "size100",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "extraLarge size has been deprecated in favor of standardized numeric sizing. Use "
            },
            {
              "kind": "code",
              "text": "size100",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "extraSmall": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "size32",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "extraSmall size has been deprecated in favor of standardized numeric sizing. Use "
            },
            {
              "kind": "code",
              "text": "size32",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "large": {
          "kind": "enum value",
          "value": "5",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "size72",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "large size has been deprecated in favor of standardized numeric sizing. Use "
            },
            {
              "kind": "code",
              "text": "size72",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "regular": {
          "kind": "enum value",
          "value": "4",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "size48",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "regular size has been deprecated in favor of standardized numeric sizing. Use "
            },
            {
              "kind": "code",
              "text": "size48",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "size10": {
          "kind": "enum value",
          "value": "9",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "size100": {
          "kind": "enum value",
          "value": "15",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "size16": {
          "kind": "enum value",
          "value": "8",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "size24": {
          "kind": "enum value",
          "value": "10",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "size28": {
          "kind": "enum value",
          "value": "7",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "size32": {
          "kind": "enum value",
          "value": "11",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "size40": {
          "kind": "enum value",
          "value": "12",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "size48": {
          "kind": "enum value",
          "value": "13",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "size72": {
          "kind": "enum value",
          "value": "14",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "small": {
          "kind": "enum value",
          "value": "3",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "size40",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "small size has been deprecated in favor of standardized numeric sizing. Use "
            },
            {
              "kind": "code",
              "text": "size40",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "tiny": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "size10",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "tiny size has been deprecated in favor of standardized numeric sizing. Use "
            },
            {
              "kind": "code",
              "text": "size10",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "PivotBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IPivotProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IPivotProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "PivotBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "PivotBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(nextProps: IPivotProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "nextProps": {
              "name": "nextProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IPivotProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the first pivot tab."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "PivotItem": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "PivotLinkFormat": {
      "kind": "enum",
      "values": {
        "links": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Display Pivot Links as links"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "tabs": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Display Pivot Links as Tabs"
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "PivotLinkSize": {
      "kind": "enum",
      "values": {
        "large": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Display links using large font size"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "normal": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Display Link using normal font size"
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "PlainCardBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "Popup": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "This adds accessibility to Dialog and Panel controls"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IPopupProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IPopupProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Popup"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "Popup",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "_root": {
          "kind": "property",
          "signature": "_root:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        (component: HTMLDivElement | null): void;\n        current: HTMLDivElement | null;\n        value: HTMLDivElement | null;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillMount": {
          "kind": "method",
          "signature": "componentWillMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IPopupProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IPopupProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "portalContainsElement": {
      "kind": "function",
      "signature": "export function portalContainsElement(target: HTMLElement, parent?: HTMLElement): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {
        "target": {
          "name": "target",
          "description": [
            {
              "kind": "text",
              "text": "Element to query portal containment status of."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        },
        "parent": {
          "name": "parent",
          "description": [
            {
              "kind": "text",
              "text": "Optional parent perspective. Search for containing portal stops at parent (or root if parent is undefined or invalid.)"
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "HTMLElement"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Determine whether a target is within a portal from perspective of root or optional parent. This function only works against portal components that use the setPortalAttribute function. If both parent and child are within the same portal this function will return false."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "PositioningContainer": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "PositioningContainer",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IPositioningContainerProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IPositioningContainerProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "PositioningContainer"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "PositioningContainer",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "_dismissOnLostFocus": {
          "kind": "method",
          "signature": "protected _dismissOnLostFocus(ev: Event): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "ev": {
              "name": "ev",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Event"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "_dismissOnScroll": {
          "kind": "method",
          "signature": "protected _dismissOnScroll(ev: Event): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "ev": {
              "name": "ev",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Event"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "_onComponentDidMount": {
          "kind": "property",
          "signature": "protected _onComponentDidMount: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "_setInitialFocus": {
          "kind": "property",
          "signature": "protected _setInitialFocus: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillMount": {
          "kind": "method",
          "signature": "componentWillMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUpdate": {
          "kind": "method",
          "signature": "componentWillUpdate(newProps: IPositioningContainerProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IPositioningContainerProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IPositioningContainerProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IPositioningContainerProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dismiss": {
          "kind": "property",
          "signature": "dismiss: (ev?: Event | React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement> | undefined) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: Event | React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement> | undefined) => void",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "onResize",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated, use "
            },
            {
              "kind": "code",
              "text": "onResize",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "onResize": {
          "kind": "property",
          "signature": "onResize: (ev?: Event | React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement> | undefined) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(ev?: Event | React.KeyboardEvent<HTMLElement> | React.MouseEvent<HTMLElement> | undefined) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element | null;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element | null",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "precisionRound": {
      "kind": "function",
      "signature": "export function precisionRound(value: number, precision: number, base?: number): number;",
      "returnValue": {
        "type": "number",
        "description": []
      },
      "parameters": {
        "value": {
          "name": "value",
          "description": [
            {
              "kind": "text",
              "text": "The value that is being rounded."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "precision": {
          "name": "precision",
          "description": [
            {
              "kind": "text",
              "text": "The number of decimal places to round the number to"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "base": {
          "name": "base",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Rounds a number to a certain level of precision. Accepts negative precision."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "PrimaryButton": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "_skipComponentRefResolution": {
          "kind": "property",
          "signature": "protected _skipComponentRefResolution: boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Set this BaseComponent._skipComponentRefResolution to true, bypassing resolution of componentRef."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ProgressIndicatorBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "ProgressIndicator with no default styles. [Use the "
        },
        {
          "kind": "code",
          "text": "styles",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " API to add your own styles.](https://github.com/OfficeDev/office-ui-fabric-react/wiki/Styling)"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IProgressIndicatorProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IProgressIndicatorProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ProgressIndicatorBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "ProgressIndicatorBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "{\n        label: string;\n        description: string;\n        width: number;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "provideContext": {
      "kind": "function",
      "signature": "export function provideContext<TContext, TProps>(contextTypes: PropTypes.ValidationMap<TContext>, mapPropsToContext: (props: TProps) => TContext): React.ComponentType<TProps>;",
      "returnValue": {
        "type": "React.ComponentType<TProps>",
        "description": []
      },
      "parameters": {
        "contextTypes": {
          "name": "contextTypes",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "PropTypes.ValidationMap<TContext>"
        },
        "mapPropsToContext": {
          "name": "mapPropsToContext",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "(props: TProps) => TContext"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "RatingBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IRatingProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IRatingProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "RatingBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "RatingBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(nextProps: IRatingProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "nextProps": {
              "name": "nextProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IRatingProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IRatingProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IRatingProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "RatingSize": {
      "kind": "enum",
      "values": {
        "Large": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Small": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "Rectangle": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Rectangle helper class."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(left?: number, right?: number, top?: number, bottom?: number);",
          "parameters": {
            "left": {
              "name": "left",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "right": {
              "name": "right",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "top": {
              "name": "top",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            },
            "bottom": {
              "name": "bottom",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Rectangle"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "Rectangle",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "bottom": {
          "kind": "property",
          "signature": "bottom: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "equals": {
          "kind": "method",
          "signature": "equals(rect: Rectangle): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "rect": {
              "name": "rect",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Rectangle"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Tests if another rect is approximately equal to this rect (within 4 decimal places.)"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "height": {
          "kind": "property",
          "signature": "readonly height: number;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Calculated automatically by subtracting the bottom from top."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "left": {
          "kind": "property",
          "signature": "left: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "right": {
          "kind": "property",
          "signature": "right: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "top": {
          "kind": "property",
          "signature": "top: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "width": {
          "kind": "property",
          "signature": "readonly width: number;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Calculated automatically by subtracting the right from left"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "registerDefaultFontFaces": {
      "kind": "function",
      "signature": "export function registerDefaultFontFaces(baseUrl: string): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "baseUrl": {
          "name": "baseUrl",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "registerIconAlias": {
      "kind": "function",
      "signature": "export function registerIconAlias(iconName: string, mappedToName: string): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "iconName": {
          "name": "iconName",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        },
        "mappedToName": {
          "name": "mappedToName",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Remaps one icon name to another."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "registerIcons": {
      "kind": "function",
      "signature": "export function registerIcons(iconSubset: IIconSubset, options?: Partial<IIconOptions>): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "iconSubset": {
          "name": "iconSubset",
          "description": [
            {
              "kind": "text",
              "text": "the icon subset definition."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "IIconSubset"
        },
        "options": {
          "name": "options",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "Partial<IIconOptions>"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Registers a given subset of icons."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "registerOnThemeChangeCallback": {
      "kind": "function",
      "signature": "export function registerOnThemeChangeCallback(callback: (theme: ITheme) => void): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "callback": {
          "name": "callback",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "(theme: ITheme) => void"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Registers a callback that gets called whenever the theme changes. This should only be used when the component cannot automatically get theme changes through its state. This will not register duplicate callbacks."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "removeIndex": {
      "kind": "function",
      "signature": "export function removeIndex<T>(array: T[], index: number): T[];",
      "returnValue": {
        "type": "T[]",
        "description": []
      },
      "parameters": {
        "array": {
          "name": "array",
          "description": [
            {
              "kind": "text",
              "text": "The array to operate on"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "T[]"
        },
        "index": {
          "name": "index",
          "description": [
            {
              "kind": "text",
              "text": "The index of the element to remove"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Given an array, it returns a new array that does not contain the item at the given index."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "removeOnThemeChangeCallback": {
      "kind": "function",
      "signature": "export function removeOnThemeChangeCallback(callback: (theme: ITheme) => void): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "callback": {
          "name": "callback",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "(theme: ITheme) => void"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "See registerOnThemeChangeCallback(). Removes previously registered callbacks."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "replaceElement": {
      "kind": "function",
      "signature": "export function replaceElement<T>(array: T[], newElement: T, index: number): T[];",
      "returnValue": {
        "type": "T[]",
        "description": []
      },
      "parameters": {
        "array": {
          "name": "array",
          "description": [
            {
              "kind": "text",
              "text": "The array to operate on"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "T[]"
        },
        "newElement": {
          "name": "newElement",
          "description": [
            {
              "kind": "text",
              "text": "The element that will be placed in the new array"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "T"
        },
        "index": {
          "name": "index",
          "description": [
            {
              "kind": "text",
              "text": "The index of the element that should be replaced"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Given an array, this function returns a new array where the element at a given index has been replaced."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "resetIds": {
      "kind": "function",
      "signature": "export function resetIds(counter?: number): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "counter": {
          "name": "counter",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Resets id counter to an (optional) number."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "resetMemoizations": {
      "kind": "function",
      "signature": "export function resetMemoizations(): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Reset memoizations."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "ResizeGroupBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IResizeGroupProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IResizeGroupProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ResizeGroupBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "ResizeGroupBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(prevProps: IResizeGroupProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "prevProps": {
              "name": "prevProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IResizeGroupProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(nextProps: IResizeGroupProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "nextProps": {
              "name": "nextProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IResizeGroupProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "remeasure": {
          "kind": "method",
          "signature": "remeasure(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "rgb2hex": {
      "kind": "function",
      "signature": "export function rgb2hex(r: number, g: number, b: number): string;",
      "returnValue": {
        "type": "string",
        "description": []
      },
      "parameters": {
        "r": {
          "name": "r",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "g": {
          "name": "g",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "b": {
          "name": "b",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "rgb2hsv": {
      "kind": "function",
      "signature": "export function rgb2hsv(r: number, g: number, b: number): IHSV;",
      "returnValue": {
        "type": "IHSV",
        "description": []
      },
      "parameters": {
        "r": {
          "name": "r",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "g": {
          "name": "g",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "b": {
          "name": "b",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "ScrollablePaneBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "IScrollablePane",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IScrollablePaneProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IScrollablePaneProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ScrollablePaneBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "ScrollablePaneBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "addSticky": {
          "kind": "property",
          "signature": "addSticky: (sticky: Sticky) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(sticky: Sticky) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "childContextTypes": {
          "kind": "property",
          "signature": "static childContextTypes: React.ValidationMap<IScrollablePaneContext>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "React.ValidationMap<IScrollablePaneContext>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(prevProps: IScrollablePaneProps, prevState: IScrollablePaneState): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "prevProps": {
              "name": "prevProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IScrollablePaneProps"
            },
            "prevState": {
              "name": "prevState",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IScrollablePaneState"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "contentContainer": {
          "kind": "property",
          "signature": "readonly contentContainer: HTMLDivElement | null;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "HTMLDivElement | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "forceLayoutUpdate": {
          "kind": "method",
          "signature": "forceLayoutUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getChildContext": {
          "kind": "method",
          "signature": "getChildContext(): IScrollablePaneContext;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "IScrollablePaneContext",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getScrollPosition": {
          "kind": "property",
          "signature": "getScrollPosition: () => number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "notifySubscribers": {
          "kind": "property",
          "signature": "notifySubscribers: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "removeSticky": {
          "kind": "property",
          "signature": "removeSticky: (sticky: Sticky) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(sticky: Sticky) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "root": {
          "kind": "property",
          "signature": "readonly root: HTMLDivElement | null;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "HTMLDivElement | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "setStickiesDistanceFromTop": {
          "kind": "method",
          "signature": "setStickiesDistanceFromTop(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "shouldComponentUpdate": {
          "kind": "method",
          "signature": "shouldComponentUpdate(nextProps: IScrollablePaneProps, nextState: IScrollablePaneState): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "nextProps": {
              "name": "nextProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IScrollablePaneProps"
            },
            "nextState": {
              "name": "nextState",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IScrollablePaneState"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "sortSticky": {
          "kind": "property",
          "signature": "sortSticky: (sticky: Sticky) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(sticky: Sticky) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "stickyAbove": {
          "kind": "property",
          "signature": "readonly stickyAbove: HTMLDivElement | null;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "HTMLDivElement | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "stickyBelow": {
          "kind": "property",
          "signature": "readonly stickyBelow: HTMLDivElement | null;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "HTMLDivElement | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "subscribe": {
          "kind": "property",
          "signature": "subscribe: (handler: Function) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(handler: Function) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "unsubscribe": {
          "kind": "property",
          "signature": "unsubscribe: (handler: Function) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(handler: Function) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "updateStickyRefHeights": {
          "kind": "property",
          "signature": "updateStickyRefHeights: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ScrollbarVisibility": {
      "kind": "enum",
      "values": {
        "always": {
          "kind": "enum value",
          "value": "\"always\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "auto": {
          "kind": "enum value",
          "value": "\"auto\"",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "ScrollToMode": {
      "kind": "enum",
      "values": {
        "auto": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Does not make any consideration to where in the viewport the item should align to."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "bottom": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Attempts to scroll the list so the bottom of the desired item is aligned with the bottom of the viewport."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "center": {
          "kind": "enum value",
          "value": "3",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Attempts to scroll the list so the desired item is in the exact center of the viewport."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "top": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Attempts to scroll the list so the top of the desired item is aligned with the top of the viewport."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "SearchBoxBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: ISearchBoxProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ISearchBoxProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "SearchBoxBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "SearchBoxBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: ISearchBoxProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ISearchBoxProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: Pick<ISearchBoxProps, 'disableAnimation' | 'clearButtonProps'>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "Pick<ISearchBoxProps, 'disableAnimation' | 'clearButtonProps'>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus to the search box input field"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "hasFocus": {
          "kind": "method",
          "signature": "hasFocus(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns whether or not the SearchBox has focus"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "SelectableOptionMenuItemType": {
      "kind": "enum",
      "values": {
        "Divider": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Header": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Normal": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "SelectedPeopleList": {
      "kind": "class",
      "extends": "BasePeopleSelectedItemsList",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Standard People Picker."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: any;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "any",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "renderItems": {
          "kind": "property",
          "signature": "protected renderItems: () => JSX.Element[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => JSX.Element[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "replaceItem": {
          "kind": "property",
          "signature": "replaceItem: (itemToReplace: IExtendedPersonaProps, itemsToReplaceWith: IExtendedPersonaProps[]) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(itemToReplace: IExtendedPersonaProps, itemsToReplaceWith: IExtendedPersonaProps[]) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "Selection": {
      "kind": "class",
      "extends": "",
      "implements": "ISelection",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(options?: ISelectionOptions);",
          "parameters": {
            "options": {
              "name": "options",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "ISelectionOptions"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Selection"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "Selection",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "canSelectItem": {
          "kind": "method",
          "signature": "canSelectItem(item: IObjectWithKey, index?: number): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "item": {
              "name": "item",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IObjectWithKey"
            },
            "index": {
              "name": "index",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "count": {
          "kind": "property",
          "signature": "count: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "getItems": {
          "kind": "method",
          "signature": "getItems(): IObjectWithKey[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "IObjectWithKey[]",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getKey": {
          "kind": "method",
          "signature": "getKey(item: IObjectWithKey, index?: number): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": []
          },
          "parameters": {
            "item": {
              "name": "item",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IObjectWithKey"
            },
            "index": {
              "name": "index",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getSelectedCount": {
          "kind": "method",
          "signature": "getSelectedCount(): number;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getSelectedIndices": {
          "kind": "method",
          "signature": "getSelectedIndices(): number[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "number[]",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getSelection": {
          "kind": "method",
          "signature": "getSelection(): IObjectWithKey[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "IObjectWithKey[]",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isAllSelected": {
          "kind": "method",
          "signature": "isAllSelected(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isIndexSelected": {
          "kind": "method",
          "signature": "isIndexSelected(index: number): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isKeySelected": {
          "kind": "method",
          "signature": "isKeySelected(key: string): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "key": {
              "name": "key",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isModal": {
          "kind": "method",
          "signature": "isModal(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "isRangeSelected": {
          "kind": "method",
          "signature": "isRangeSelected(fromIndex: number, count: number): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "fromIndex": {
              "name": "fromIndex",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "count": {
              "name": "count",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "mode": {
          "kind": "property",
          "signature": "readonly mode: SelectionMode;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "SelectionMode",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectToIndex": {
          "kind": "method",
          "signature": "selectToIndex(index: number, clearSelection?: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "clearSelection": {
              "name": "clearSelection",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "selectToKey": {
          "kind": "method",
          "signature": "selectToKey(key: string, clearSelection?: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "key": {
              "name": "key",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "clearSelection": {
              "name": "clearSelection",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setAllSelected": {
          "kind": "method",
          "signature": "setAllSelected(isAllSelected: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "isAllSelected": {
              "name": "isAllSelected",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setChangeEvents": {
          "kind": "method",
          "signature": "setChangeEvents(isEnabled: boolean, suppressChange?: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "isEnabled": {
              "name": "isEnabled",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "boolean"
            },
            "suppressChange": {
              "name": "suppressChange",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setIndexSelected": {
          "kind": "method",
          "signature": "setIndexSelected(index: number, isSelected: boolean, shouldAnchor: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "isSelected": {
              "name": "isSelected",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "boolean"
            },
            "shouldAnchor": {
              "name": "shouldAnchor",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setItems": {
          "kind": "method",
          "signature": "setItems(items: IObjectWithKey[], shouldClear?: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "items": {
              "name": "items",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IObjectWithKey[]"
            },
            "shouldClear": {
              "name": "shouldClear",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Selection needs the items, call this method to set them. If the set of items is the same, this will re-evaluate selection and index maps. Otherwise, shouldClear should be set to true, so that selection is cleared."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setKeySelected": {
          "kind": "method",
          "signature": "setKeySelected(key: string, isSelected: boolean, shouldAnchor: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "key": {
              "name": "key",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "isSelected": {
              "name": "isSelected",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "boolean"
            },
            "shouldAnchor": {
              "name": "shouldAnchor",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setModal": {
          "kind": "method",
          "signature": "setModal(isModal: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "isModal": {
              "name": "isModal",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toggleAllSelected": {
          "kind": "method",
          "signature": "toggleAllSelected(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toggleIndexSelected": {
          "kind": "method",
          "signature": "toggleIndexSelected(index: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toggleKeySelected": {
          "kind": "method",
          "signature": "toggleKeySelected(key: string): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "key": {
              "name": "key",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "toggleRangeSelected": {
          "kind": "method",
          "signature": "toggleRangeSelected(fromIndex: number, count: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "fromIndex": {
              "name": "fromIndex",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "count": {
              "name": "count",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "SelectionDirection": {
      "kind": "enum",
      "values": {
        "horizontal": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "vertical": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "SelectionMode": {
      "kind": "enum",
      "values": {
        "multiple": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "none": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "single": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "SelectionZone": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "{\n        isMultiSelectEnabled: boolean;\n        isSelectedOnFocus: boolean;\n        selectionMode: SelectionMode;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "ignoreNextFocus": {
          "kind": "property",
          "signature": "ignoreNextFocus: () => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "() => void",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "In some cases, the consuming scenario requires to set focus on a row without having SelectionZone react to the event. Note that focus events in IE <= 11 will occur asynchronously after .focus() has been called on an element, so we need a flag to store the idea that we will bypass the \"next\" focus event that occurs. This method does that."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "SemanticColorSlots": {
      "kind": "enum",
      "values": {
        "bodyBackground": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "bodyText": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "disabledBackground": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "disabledText": {
          "kind": "enum value",
          "value": "3",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "setBaseUrl": {
      "kind": "function",
      "signature": "export function setBaseUrl(baseUrl: string): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "baseUrl": {
          "name": "baseUrl",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Gets the current base url used for fetching images."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "setIconOptions": {
      "kind": "function",
      "signature": "export function setIconOptions(options: Partial<IIconOptions>): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "options": {
          "name": "options",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "Partial<IIconOptions>"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Sets the icon options."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "setLanguage": {
      "kind": "function",
      "signature": "export function setLanguage(language: string, avoidPersisting?: boolean): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "language": {
          "name": "language",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        },
        "avoidPersisting": {
          "name": "avoidPersisting",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Sets the rtl state of the page (by adjusting the dir attribute of the html element.)"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "setPortalAttribute": {
      "kind": "function",
      "signature": "export function setPortalAttribute(element: HTMLElement): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "element": {
          "name": "element",
          "description": [
            {
              "kind": "text",
              "text": "Element to mark as a portal."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Identify element as a portal by setting an attribute."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "setRTL": {
      "kind": "function",
      "signature": "export function setRTL(isRTL: boolean, persistSetting?: boolean): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "isRTL": {
          "name": "isRTL",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "boolean"
        },
        "persistSetting": {
          "name": "persistSetting",
          "description": [],
          "isOptional": true,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Sets the rtl state of the page (by adjusting the dir attribute of the html element.)"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "setSSR": {
      "kind": "function",
      "signature": "export function setSSR(isEnabled: boolean): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "isEnabled": {
          "name": "isEnabled",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Helper to set ssr mode to simulate no window object returned from getWindow helper."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "setVirtualParent": {
      "kind": "function",
      "signature": "export function setVirtualParent(child: HTMLElement, parent: HTMLElement): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "child": {
          "name": "child",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        },
        "parent": {
          "name": "parent",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Sets the virtual parent of an element. Pass "
        },
        {
          "kind": "code",
          "text": "undefined",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " as the "
        },
        {
          "kind": "code",
          "text": "parent",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " to clear the virtual parent."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "setWarningCallback": {
      "kind": "function",
      "signature": "export function setWarningCallback(warningCallback?: (message: string) => void): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "warningCallback": {
          "name": "warningCallback",
          "description": [
            {
              "kind": "text",
              "text": "Callback to override the generated warnings."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "(message: string) => void"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Configures the warning callback. Passing in undefined will reset it to use the default console.warn function."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "Shade": {
      "kind": "enum",
      "values": {
        "Shade1": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Shade2": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Shade3": {
          "kind": "enum value",
          "value": "3",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Shade4": {
          "kind": "enum value",
          "value": "4",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Shade5": {
          "kind": "enum value",
          "value": "5",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Shade6": {
          "kind": "enum value",
          "value": "6",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Shade7": {
          "kind": "enum value",
          "value": "7",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Shade8": {
          "kind": "enum value",
          "value": "8",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Unshaded": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Shades of a given color, from softest to strongest."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "shallowCompare": {
      "kind": "function",
      "signature": "export function shallowCompare<TA, TB>(a: TA, b: TB): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": []
      },
      "parameters": {
        "a": {
          "name": "a",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "TA"
        },
        "b": {
          "name": "b",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "TB"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Compares a to b and b to a."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "ShimmerBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IShimmerProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IShimmerProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ShimmerBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "ShimmerBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(nextProps: IShimmerProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "nextProps": {
              "name": "nextProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IShimmerProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IShimmerProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IShimmerProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ShimmerCircleBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IShimmerCircleProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IShimmerCircleProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ShimmerCircleBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "ShimmerCircleBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ShimmeredDetailsListBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IShimmeredDetailsListProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IShimmeredDetailsListProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ShimmeredDetailsListBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "ShimmeredDetailsListBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ShimmerElementsDefaultHeights": {
      "kind": "enum",
      "values": {
        "circle": {
          "kind": "enum value",
          "value": "24",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Default height of the circle element when not provided by user: 24px"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "gap": {
          "kind": "enum value",
          "value": "16",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Default height of the gap element when not provided by user: 16px"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "line": {
          "kind": "enum value",
          "value": "16",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Default height of the line element when not provided by user: 16px"
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "ShimmerElementsGroupBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IShimmerElementsGroupProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IShimmerElementsGroupProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ShimmerElementsGroupBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "ShimmerElementsGroupBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IShimmerElementsGroupProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IShimmerElementsGroupProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ShimmerElementType": {
      "kind": "enum",
      "values": {
        "circle": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Circle element type"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "gap": {
          "kind": "enum value",
          "value": "3",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gap element type"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "line": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Line element type"
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "ShimmerGapBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IShimmerGapProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IShimmerGapProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ShimmerGapBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "ShimmerGapBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "ShimmerLineBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IShimmerLineProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IShimmerLineProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ShimmerLineBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "ShimmerLineBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "shouldWrapFocus": {
      "kind": "function",
      "signature": "export function shouldWrapFocus(element: HTMLElement, noWrapDataAttribute: 'data-no-vertical-wrap' | 'data-no-horizontal-wrap'): boolean;",
      "returnValue": {
        "type": "boolean",
        "description": [
          {
            "kind": "text",
            "text": "true if focus should wrap, false otherwise"
          }
        ]
      },
      "parameters": {
        "element": {
          "name": "element",
          "description": [
            {
              "kind": "text",
              "text": "element to start searching from"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "HTMLElement"
        },
        "noWrapDataAttribute": {
          "name": "noWrapDataAttribute",
          "description": [
            {
              "kind": "text",
              "text": "the no wrap data attribute to match (either)"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "'data-no-vertical-wrap' | 'data-no-horizontal-wrap'"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Determines if an, or any of its ancestors, sepcificies that it doesn't want focus to wrap"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "SliderBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "ISlider",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: ISliderProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ISliderProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "SliderBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "SliderBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: ISliderProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ISliderProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Invoked when a component is receiving new props. This method is not called for the initial render."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: ISliderProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "ISliderProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): React.ReactElement<{}>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "React.ReactElement<{}>",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "value": {
          "kind": "property",
          "signature": "readonly value: number | undefined;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number | undefined",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "SpinButton": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "ISpinButton",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: ISpinButtonProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ISpinButtonProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "SpinButton"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "SpinButton",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: ISpinButtonProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ISpinButtonProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Invoked when a component is receiving new props. This method is not called for the initial render."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: ISpinButtonProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "ISpinButtonProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "value": {
          "kind": "property",
          "signature": "readonly value: string | undefined;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the value of the spin button."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "SpinnerBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: ISpinnerProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "ISpinnerProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "SpinnerSize": {
      "kind": "enum",
      "values": {
        "large": {
          "kind": "enum value",
          "value": "3",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "28px Spinner diameter"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "medium": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "20px Spinner diameter"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "small": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "16px Spinner diameter"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "xSmall": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "12px Spinner diameter"
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "SpinnerType": {
      "kind": "enum",
      "values": {
        "large": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "SpinnerSize.large",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated and will be removed at >= 2.0.0. Use "
            },
            {
              "kind": "code",
              "text": "SpinnerSize.large",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "normal": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Use "
            },
            {
              "kind": "code",
              "text": "SpinnerSize.medium",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "summary": [
            {
              "kind": "text",
              "text": "Deprecated and will be removed at >= 2.0.0. Use "
            },
            {
              "kind": "code",
              "text": "SpinnerSize.medium",
              "highlighter": "plain"
            },
            {
              "kind": "text",
              "text": " instead."
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [
        {
          "kind": "text",
          "text": "Use "
        },
        {
          "kind": "code",
          "text": "SpinnerSize",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " instead."
        }
      ],
      "summary": [
        {
          "kind": "text",
          "text": "Deprecated at v2.0.0, use "
        },
        {
          "kind": "code",
          "text": "SpinnerSize",
          "highlighter": "plain"
        },
        {
          "kind": "text",
          "text": " instead."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "Sticky": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IStickyProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IStickyProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Sticky"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "Sticky",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "addSticky": {
          "kind": "method",
          "signature": "addSticky(stickyContent: HTMLDivElement): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "stickyContent": {
              "name": "stickyContent",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "HTMLDivElement"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "canStickyBottom": {
          "kind": "property",
          "signature": "readonly canStickyBottom: boolean;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "canStickyTop": {
          "kind": "property",
          "signature": "readonly canStickyTop: boolean;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(prevProps: IStickyProps, prevState: IStickyState): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "prevProps": {
              "name": "prevProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IStickyProps"
            },
            "prevState": {
              "name": "prevState",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IStickyState"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "context": {
          "kind": "property",
          "signature": "context: IScrollablePaneContext;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IScrollablePaneContext",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "contextTypes": {
          "kind": "property",
          "signature": "static contextTypes: IStickyContext;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IStickyContext",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: IStickyProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "IStickyProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "distanceFromTop": {
          "kind": "property",
          "signature": "distanceFromTop: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "nonStickyContent": {
          "kind": "property",
          "signature": "readonly nonStickyContent: HTMLDivElement | null;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "HTMLDivElement | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "resetSticky": {
          "kind": "method",
          "signature": "resetSticky(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "root": {
          "kind": "property",
          "signature": "readonly root: HTMLDivElement | null;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "HTMLDivElement | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "setDistanceFromTop": {
          "kind": "method",
          "signature": "setDistanceFromTop(container: HTMLDivElement): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "container": {
              "name": "container",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "HTMLDivElement"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "shouldComponentUpdate": {
          "kind": "method",
          "signature": "shouldComponentUpdate(nextProps: IStickyProps, nextState: IStickyState): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "nextProps": {
              "name": "nextProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IStickyProps"
            },
            "nextState": {
              "name": "nextState",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IStickyState"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "stickyContentBottom": {
          "kind": "property",
          "signature": "readonly stickyContentBottom: HTMLDivElement | null;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "HTMLDivElement | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "stickyContentTop": {
          "kind": "property",
          "signature": "readonly stickyContentTop: HTMLDivElement | null;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "HTMLDivElement | null",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "syncScroll": {
          "kind": "property",
          "signature": "syncScroll: (container: HTMLElement) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(container: HTMLElement) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "StickyPositionType": {
      "kind": "enum",
      "values": {
        "Both": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Footer": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Header": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "styled": {
      "kind": "function",
      "signature": "export function styled<TComponentProps extends IPropsWithStyles<TStyleProps, TStyleSet>, TStyleProps, TStyleSet extends IStyleSet<TStyleSet>>(Component: React.ComponentClass<TComponentProps> | React.StatelessComponent<TComponentProps>, baseStyles: IStyleFunctionOrObject<TStyleProps, TStyleSet>, getProps?: (props: TComponentProps) => Partial<TComponentProps>, customizable?: ICustomizableProps): (props: TComponentProps) => JSX.Element;",
      "returnValue": {
        "type": "(props: TComponentProps) => JSX.Element",
        "description": []
      },
      "parameters": {
        "Component": {
          "name": "Component",
          "description": [
            {
              "kind": "text",
              "text": "The unstyled base component to render, which receives styles."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "React.ComponentClass<TComponentProps> | React.StatelessComponent<TComponentProps>"
        },
        "baseStyles": {
          "name": "baseStyles",
          "description": [
            {
              "kind": "text",
              "text": "The styles which should be curried with the component."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "IStyleFunctionOrObject<TStyleProps, TStyleSet>"
        },
        "getProps": {
          "name": "getProps",
          "description": [
            {
              "kind": "text",
              "text": "A helper which provides default props."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "(props: TComponentProps) => Partial<TComponentProps>"
        },
        "customizable": {
          "name": "customizable",
          "description": [
            {
              "kind": "text",
              "text": "An object which defines which props can be customized using the Customizer."
            }
          ],
          "isOptional": true,
          "isSpread": false,
          "type": "ICustomizableProps"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "The styled HOC wrapper allows you to create a functional wrapper around a given component which will resolve getStyles functional props, and mix customized props passed in using concatStyleSets."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "Stylesheet": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Represents the state of styles registered in the page. Abstracts the surface for adding styles to the stylesheet, exposes helpers for reading the styles registered in server rendered scenarios."
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(config?: IStyleSheetConfig);",
          "parameters": {
            "config": {
              "name": "config",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "IStyleSheetConfig"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Stylesheet"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "Stylesheet",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "argsFromClassName": {
          "kind": "method",
          "signature": "argsFromClassName(className: string): IStyle[] | undefined;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "IStyle[] | undefined",
            "description": []
          },
          "parameters": {
            "className": {
              "name": "className",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the arguments associated with a given classname which was previously registered using cacheClassName."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "cacheClassName": {
          "kind": "method",
          "signature": "cacheClassName(className: string, key: string, args: IStyle[], rules: string[]): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "className": {
              "name": "className",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "key": {
              "name": "key",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "args": {
              "name": "args",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IStyle[]"
            },
            "rules": {
              "name": "rules",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Used internally to cache information about a class which was registered with the stylesheet."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "classNameFromKey": {
          "kind": "method",
          "signature": "classNameFromKey(key: string): string | undefined;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string | undefined",
            "description": []
          },
          "parameters": {
            "key": {
              "name": "key",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the appropriate classname given a key which was previously registered using cacheClassName."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getClassName": {
          "kind": "method",
          "signature": "getClassName(displayName?: string): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": []
          },
          "parameters": {
            "displayName": {
              "name": "displayName",
              "description": [
                {
                  "kind": "text",
                  "text": "Optional value to use as a prefix."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Generates a unique classname."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getInstance": {
          "kind": "method",
          "signature": "static getInstance(): Stylesheet;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "Stylesheet",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the singleton instance."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getRules": {
          "kind": "method",
          "signature": "getRules(includePreservedRules?: boolean): string;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string",
            "description": []
          },
          "parameters": {
            "includePreservedRules": {
              "name": "includePreservedRules",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets all rules registered with the stylesheet; only valid when using InsertionMode.none."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "insertedRulesFromClassName": {
          "kind": "method",
          "signature": "insertedRulesFromClassName(className: string): string[] | undefined;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "string[] | undefined",
            "description": []
          },
          "parameters": {
            "className": {
              "name": "className",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the arguments associated with a given classname which was previously registered using cacheClassName."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "insertRule": {
          "kind": "method",
          "signature": "insertRule(rule: string, preserve?: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "rule": {
              "name": "rule",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string"
            },
            "preserve": {
              "name": "preserve",
              "description": [
                {
                  "kind": "text",
                  "text": "Preserves the rule beyond a reset boundary."
                }
              ],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Inserts a css rule into the stylesheet."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "onReset": {
          "kind": "method",
          "signature": "onReset(callback: () => void): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "callback": {
              "name": "callback",
              "description": [
                {
                  "kind": "text",
                  "text": "A callback which will be called when the Stylesheet is reset."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "() => void"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Configures a reset callback."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "reset": {
          "kind": "method",
          "signature": "reset(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Resets the internal state of the stylesheet. Only used in server rendered scenarios where we're using InsertionMode.none."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "resetKeys": {
          "kind": "method",
          "signature": "resetKeys(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setConfig": {
          "kind": "method",
          "signature": "setConfig(config?: IStyleSheetConfig): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "config": {
              "name": "config",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "IStyleSheetConfig"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Configures the stylesheet."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "SuggestionActionType": {
      "kind": "enum",
      "values": {
        "forceResolve": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "none": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "searchMore": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "SuggestionItemType": {
      "kind": "enum",
      "values": {
        "footer": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "header": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "suggestion": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "Suggestions": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(suggestionsProps: ISuggestionsProps<T>);",
          "parameters": {
            "suggestionsProps": {
              "name": "suggestionsProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ISuggestionsProps<T>"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "Suggestions"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "Suggestions",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "_forceResolveButton": {
          "kind": "property",
          "signature": "protected _forceResolveButton:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        (component: IButton | null): void;\n        current: IButton | null;\n        value: IButton | null;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "_searchForMoreButton": {
          "kind": "property",
          "signature": "protected _searchForMoreButton:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        (component: IButton | null): void;\n        current: IButton | null;\n        value: IButton | null;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "_selectedElement": {
          "kind": "property",
          "signature": "protected _selectedElement:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        (component: HTMLDivElement | null): void;\n        current: HTMLDivElement | null;\n        value: HTMLDivElement | null;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "executeSelectedAction": {
          "kind": "method",
          "signature": "executeSelectedAction(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "focusAboveSuggestions": {
          "kind": "method",
          "signature": "focusAboveSuggestions(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "focusBelowSuggestions": {
          "kind": "method",
          "signature": "focusBelowSuggestions(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "focusSearchForMoreButton": {
          "kind": "method",
          "signature": "focusSearchForMoreButton(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "hasSuggestedAction": {
          "kind": "method",
          "signature": "hasSuggestedAction(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "hasSuggestedActionSelected": {
          "kind": "method",
          "signature": "hasSuggestedActionSelected(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scrollSelected": {
          "kind": "method",
          "signature": "scrollSelected(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "tryHandleKeyDown": {
          "kind": "property",
          "signature": "tryHandleKeyDown: (keyCode: number, currentSuggestionIndex: number) => boolean;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(keyCode: number, currentSuggestionIndex: number) => boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Returns true if the event was handled, false otherwise"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "SuggestionsControl": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Class when used with SuggestionsStore, renders a suggestions control with customizable headers and footers"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(suggestionsProps: ISuggestionsControlProps<T>);",
          "parameters": {
            "suggestionsProps": {
              "name": "suggestionsProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ISuggestionsControlProps<T>"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "SuggestionsControl"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "SuggestionsControl",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "_forceResolveButton": {
          "kind": "property",
          "signature": "protected _forceResolveButton: IButton;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IButton",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "_renderSuggestions": {
          "kind": "method",
          "signature": "protected _renderSuggestions(): JSX.Element;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "_searchForMoreButton": {
          "kind": "property",
          "signature": "protected _searchForMoreButton: IButton;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "IButton",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "_selectedElement": {
          "kind": "property",
          "signature": "protected _selectedElement: HTMLDivElement;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "HTMLDivElement",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "_suggestions": {
          "kind": "property",
          "signature": "protected _suggestions: SuggestionsCore<T>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "SuggestionsCore<T>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: ISuggestionsControlProps<T>): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ISuggestionsControlProps<T>"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "currentSuggestion": {
          "kind": "property",
          "signature": "readonly currentSuggestion: ISuggestionModel<T>;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "ISuggestionModel<T>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "currentSuggestionIndex": {
          "kind": "property",
          "signature": "readonly currentSuggestionIndex: number;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "executeSelectedAction": {
          "kind": "method",
          "signature": "executeSelectedAction(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "handleKeyDown": {
          "kind": "method",
          "signature": "handleKeyDown(keyCode: number): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {
            "keyCode": {
              "name": "keyCode",
              "description": [
                {
                  "kind": "text",
                  "text": "The keyCode to handle"
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Handles the key down, returns true, if the event was handled, false otherwise"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "hasSelection": {
          "kind": "method",
          "signature": "hasSelection(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "hasSuggestionSelected": {
          "kind": "method",
          "signature": "hasSuggestionSelected(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "removeSuggestion": {
          "kind": "method",
          "signature": "removeSuggestion(index?: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "renderFooterItems": {
          "kind": "method",
          "signature": "protected renderFooterItems(): JSX.Element | null;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element | null",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "renderHeaderItems": {
          "kind": "method",
          "signature": "protected renderHeaderItems(): JSX.Element | null;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element | null",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "resetSelectedItem": {
          "kind": "method",
          "signature": "protected resetSelectedItem(): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Resets the selected state and selects the first selectable item"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scrollSelected": {
          "kind": "method",
          "signature": "scrollSelected(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "selectedElement": {
          "kind": "property",
          "signature": "readonly selectedElement: HTMLDivElement | undefined;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "HTMLDivElement | undefined",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectFirstItem": {
          "kind": "method",
          "signature": "protected selectFirstItem(): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Selects the first item"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "selectLastItem": {
          "kind": "method",
          "signature": "protected selectLastItem(): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Selects the last item"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "selectNextItem": {
          "kind": "method",
          "signature": "protected selectNextItem(itemType: SuggestionItemType, originalItemType?: SuggestionItemType): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "itemType": {
              "name": "itemType",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "SuggestionItemType"
            },
            "originalItemType": {
              "name": "originalItemType",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "SuggestionItemType"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Selects the next selectable item"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "selectPreviousItem": {
          "kind": "method",
          "signature": "protected selectPreviousItem(itemType: SuggestionItemType, originalItemType?: SuggestionItemType): void;",
          "accessModifier": "protected",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "itemType": {
              "name": "itemType",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "SuggestionItemType"
            },
            "originalItemType": {
              "name": "originalItemType",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "SuggestionItemType"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Selects the previous selectable item"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "SuggestionsController": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor();",
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "SuggestionsController"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "SuggestionsController",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "convertSuggestionsToSuggestionItems": {
          "kind": "method",
          "signature": "convertSuggestionsToSuggestionItems(suggestions: Array<ISuggestionModel<T> | T>): ISuggestionModel<T>[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "ISuggestionModel<T>[]",
            "description": []
          },
          "parameters": {
            "suggestions": {
              "name": "suggestions",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Array<ISuggestionModel<T> | T>"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "createGenericSuggestion": {
          "kind": "method",
          "signature": "createGenericSuggestion(itemToConvert: ISuggestionModel<T> | T): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "itemToConvert": {
              "name": "itemToConvert",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ISuggestionModel<T> | T"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "currentIndex": {
          "kind": "property",
          "signature": "currentIndex: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "currentSuggestion": {
          "kind": "property",
          "signature": "currentSuggestion: ISuggestionModel<T> | undefined;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISuggestionModel<T> | undefined",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "deselectAllSuggestions": {
          "kind": "method",
          "signature": "deselectAllSuggestions(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getCurrentItem": {
          "kind": "method",
          "signature": "getCurrentItem(): ISuggestionModel<T>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "ISuggestionModel<T>",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getSuggestionAtIndex": {
          "kind": "method",
          "signature": "getSuggestionAtIndex(index: number): ISuggestionModel<T>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "ISuggestionModel<T>",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getSuggestions": {
          "kind": "method",
          "signature": "getSuggestions(): ISuggestionModel<T>[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "ISuggestionModel<T>[]",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "hasSelectedSuggestion": {
          "kind": "method",
          "signature": "hasSelectedSuggestion(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "nextSuggestion": {
          "kind": "method",
          "signature": "nextSuggestion(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Increments the suggestion index and gets the next suggestion in the list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "previousSuggestion": {
          "kind": "method",
          "signature": "previousSuggestion(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Decrements the suggestion index and gets the previous suggestion in the list."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "removeSuggestion": {
          "kind": "method",
          "signature": "removeSuggestion(index: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setSelectedSuggestion": {
          "kind": "method",
          "signature": "setSelectedSuggestion(index: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "suggestions": {
          "kind": "property",
          "signature": "suggestions: ISuggestionModel<T>[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISuggestionModel<T>[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "updateSuggestions": {
          "kind": "method",
          "signature": "updateSuggestions(newSuggestions: T[], selectedIndex?: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newSuggestions": {
              "name": "newSuggestions",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "T[]"
            },
            "selectedIndex": {
              "name": "selectedIndex",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "SuggestionsCore": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Class when used with SuggestionsStore, renders a basic suggestions control"
        }
      ],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(suggestionsProps: ISuggestionsCoreProps<T>);",
          "parameters": {
            "suggestionsProps": {
              "name": "suggestionsProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ISuggestionsCoreProps<T>"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "SuggestionsCore"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "SuggestionsCore",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "_selectedElement": {
          "kind": "property",
          "signature": "protected _selectedElement: HTMLDivElement;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "HTMLDivElement",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentDidUpdate": {
          "kind": "method",
          "signature": "componentDidUpdate(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "currentIndex": {
          "kind": "property",
          "signature": "currentIndex: number;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "number",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "currentSuggestion": {
          "kind": "property",
          "signature": "currentSuggestion: ISuggestionModel<T> | undefined;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISuggestionModel<T> | undefined",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "deselectAllSuggestions": {
          "kind": "method",
          "signature": "deselectAllSuggestions(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getCurrentItem": {
          "kind": "method",
          "signature": "getCurrentItem(): ISuggestionModel<T>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "ISuggestionModel<T>",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getSuggestionAtIndex": {
          "kind": "method",
          "signature": "getSuggestionAtIndex(index: number): ISuggestionModel<T>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "ISuggestionModel<T>",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "hasSuggestionSelected": {
          "kind": "method",
          "signature": "hasSuggestionSelected(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "nextSuggestion": {
          "kind": "method",
          "signature": "nextSuggestion(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Increments the selected suggestion index"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "previousSuggestion": {
          "kind": "method",
          "signature": "previousSuggestion(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Decrements the selected suggestion index"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "removeSuggestion": {
          "kind": "method",
          "signature": "removeSuggestion(index: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "scrollSelected": {
          "kind": "method",
          "signature": "scrollSelected(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "selectedElement": {
          "kind": "property",
          "signature": "readonly selectedElement: HTMLDivElement | undefined;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "HTMLDivElement | undefined",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "setSelectedSuggestion": {
          "kind": "method",
          "signature": "setSelectedSuggestion(index: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "SuggestionsHeaderFooterItem": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "SuggestionsItem": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "SuggestionsStore": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [
        "T"
      ],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor();",
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "SuggestionsStore"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "SuggestionsStore",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "convertSuggestionsToSuggestionItems": {
          "kind": "method",
          "signature": "convertSuggestionsToSuggestionItems(suggestions: Array<ISuggestionModel<T> | T>): ISuggestionModel<T>[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "ISuggestionModel<T>[]",
            "description": []
          },
          "parameters": {
            "suggestions": {
              "name": "suggestions",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "Array<ISuggestionModel<T> | T>"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getSuggestionAtIndex": {
          "kind": "method",
          "signature": "getSuggestionAtIndex(index: number): ISuggestionModel<T>;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "ISuggestionModel<T>",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getSuggestions": {
          "kind": "method",
          "signature": "getSuggestions(): ISuggestionModel<T>[];",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "ISuggestionModel<T>[]",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "removeSuggestion": {
          "kind": "method",
          "signature": "removeSuggestion(index: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "index": {
              "name": "index",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "suggestions": {
          "kind": "property",
          "signature": "suggestions: ISuggestionModel<T>[];",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "ISuggestionModel<T>[]",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "updateSuggestions": {
          "kind": "method",
          "signature": "updateSuggestions(newSuggestions: T[]): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newSuggestions": {
              "name": "newSuggestions",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "T[]"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "SwatchColorPickerBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "ISwatchColorPicker",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: ISwatchColorPickerProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ISwatchColorPickerProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "SwatchColorPickerBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "SwatchColorPickerBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: ISwatchColorPickerProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ISwatchColorPickerProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: ISwatchColorPickerProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "ISwatchColorPickerProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element | null;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element | null",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "TagPicker": {
      "kind": "class",
      "extends": "BasePicker",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "defaultProps": {
          "kind": "property",
          "signature": "protected static defaultProps:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "{\n        onRenderItem: (props: ITagItemProps) => JSX.Element;\n        onRenderSuggestionsItem: (props: ITag) => JSX.Element;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "TeachingBubbleBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: ITeachingBubbleProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ITeachingBubbleProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "TeachingBubbleBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "TeachingBubbleBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "{\n        calloutProps: {\n            beakWidth: number;\n            gapSpace: number;\n            setInitialFocus: boolean;\n            doNotLayer: boolean;\n            directionalHint: DirectionalHint;\n        };\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "rootElement": {
          "kind": "property",
          "signature": "rootElement:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        (component: HTMLDivElement | null): void;\n        current: HTMLDivElement | null;\n        value: HTMLDivElement | null;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "TeachingBubbleContentBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: ITeachingBubbleProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ITeachingBubbleProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "TeachingBubbleContentBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "TeachingBubbleContentBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "{\n        hasCondensedHeadline: boolean;\n        imageProps: {\n            imageFit: ImageFit;\n            width: number;\n            height: number;\n        };\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "rootElement": {
          "kind": "property",
          "signature": "rootElement:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "{\n        (component: HTMLDivElement | null): void;\n        current: HTMLDivElement | null;\n        value: HTMLDivElement | null;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "TextFieldBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "ITextField",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: ITextFieldProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ITextFieldProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "TextFieldBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "TextFieldBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "blur": {
          "kind": "method",
          "signature": "blur(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Blurs the text field."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentDidMount": {
          "kind": "method",
          "signature": "componentDidMount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: ITextFieldProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ITextFieldProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "componentWillUnmount": {
          "kind": "method",
          "signature": "componentWillUnmount(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: ITextFieldProps;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "ITextFieldProps",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets focus on the text field"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "select": {
          "kind": "method",
          "signature": "select(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Selects the text field"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "selectionEnd": {
          "kind": "property",
          "signature": "readonly selectionEnd: number | null;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the selection end of the text field"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "selectionStart": {
          "kind": "property",
          "signature": "readonly selectionStart: number | null;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "number | null",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the selection start of the text field"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "setSelectionEnd": {
          "kind": "method",
          "signature": "setSelectionEnd(value: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the selection end of the text field to a specified value"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setSelectionRange": {
          "kind": "method",
          "signature": "setSelectionRange(start: number, end: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "start": {
              "name": "start",
              "description": [
                {
                  "kind": "text",
                  "text": "Index of the start of the selection."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            },
            "end": {
              "name": "end",
              "description": [
                {
                  "kind": "text",
                  "text": "Index of the end of the selection."
                }
              ],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the start and end positions of a selection in a text field."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setSelectionStart": {
          "kind": "method",
          "signature": "setSelectionStart(value: number): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "value": {
              "name": "value",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "number"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Sets the selection start of the text field to a specified value"
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "value": {
          "kind": "property",
          "signature": "readonly value: string | undefined;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "string | undefined",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the current value of the text field."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        }
      }
    },
    "ThemeGenerator": {
      "kind": "class",
      "extends": "",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "getThemeAsCode": {
          "kind": "method",
          "signature": "static getThemeAsCode(slotRules: IThemeRules): any;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "any",
            "description": []
          },
          "parameters": {
            "slotRules": {
              "name": "slotRules",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IThemeRules"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getThemeAsJson": {
          "kind": "method",
          "signature": "static getThemeAsJson(slotRules: IThemeRules): any;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "any",
            "description": []
          },
          "parameters": {
            "slotRules": {
              "name": "slotRules",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IThemeRules"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getThemeAsSass": {
          "kind": "method",
          "signature": "static getThemeAsSass(slotRules: IThemeRules): any;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "any",
            "description": []
          },
          "parameters": {
            "slotRules": {
              "name": "slotRules",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IThemeRules"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "getThemeForPowerShell": {
          "kind": "method",
          "signature": "static getThemeForPowerShell(slotRules: IThemeRules): any;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "any",
            "description": []
          },
          "parameters": {
            "slotRules": {
              "name": "slotRules",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IThemeRules"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "insureSlots": {
          "kind": "method",
          "signature": "static insureSlots(slotRules: IThemeRules, isInverted: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "slotRules": {
              "name": "slotRules",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IThemeRules"
            },
            "isInverted": {
              "name": "isInverted",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "setSlot": {
          "kind": "method",
          "signature": "static setSlot(rule: IThemeSlotRule, color: string | IColor, isInverted?: boolean, isCustomization?: boolean, overwriteCustomColor?: boolean): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": true,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "rule": {
              "name": "rule",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IThemeSlotRule"
            },
            "color": {
              "name": "color",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "string | IColor"
            },
            "isInverted": {
              "name": "isInverted",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            },
            "isCustomization": {
              "name": "isCustomization",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            },
            "overwriteCustomColor": {
              "name": "overwriteCustomColor",
              "description": [],
              "isOptional": true,
              "isSpread": false,
              "type": "boolean"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "themeRulesStandardCreator": {
      "kind": "function",
      "signature": "export function themeRulesStandardCreator(): IThemeRules;",
      "returnValue": {
        "type": "IThemeRules",
        "description": []
      },
      "parameters": {},
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "ToggleBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "IToggle",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: IToggleProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IToggleProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "ToggleBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "ToggleBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "checked": {
          "kind": "property",
          "signature": "readonly checked: boolean;",
          "isOptional": false,
          "isReadOnly": true,
          "isStatic": false,
          "type": "boolean",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Gets the current checked state of the toggle."
            }
          ],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "componentWillReceiveProps": {
          "kind": "method",
          "signature": "componentWillReceiveProps(newProps: IToggleProps): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {
            "newProps": {
              "name": "newProps",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "IToggleProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "toMatrix": {
      "kind": "function",
      "signature": "export function toMatrix<T>(items: T[], columnCount: number): T[][];",
      "returnValue": {
        "type": "T[][]",
        "description": [
          {
            "kind": "text",
            "text": "A matrix of items"
          }
        ]
      },
      "parameters": {
        "items": {
          "name": "items",
          "description": [
            {
              "kind": "text",
              "text": "The array to convert"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "T[]"
        },
        "columnCount": {
          "name": "columnCount",
          "description": [
            {
              "kind": "text",
              "text": "The number of columns for the resulting matrix"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Convert the given array to a matrix with columnCount number of columns."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "TooltipBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps: Partial<ITooltipProps>;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "Partial<ITooltipProps>",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "TooltipDelay": {
      "kind": "enum",
      "values": {
        "long": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "medium": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "zero": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "TooltipHostBase": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "__constructor": {
          "kind": "constructor",
          "signature": "constructor(props: ITooltipHostProps);",
          "parameters": {
            "props": {
              "name": "props",
              "description": [],
              "isOptional": false,
              "isSpread": false,
              "type": "ITooltipHostProps"
            }
          },
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Constructs a new instance of the "
            },
            {
              "kind": "api-link",
              "elements": [
                {
                  "kind": "text",
                  "text": "TooltipHostBase"
                }
              ],
              "target": {
                "scopeName": "",
                "packageName": "office-ui-fabric-react",
                "exportName": "TooltipHostBase",
                "memberName": ""
              }
            },
            {
              "kind": "text",
              "text": " class"
            }
          ],
          "remarks": []
        },
        "defaultProps": {
          "kind": "property",
          "signature": "static defaultProps:",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": true,
          "type": "{\n        delay: TooltipDelay;\n    }",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "TooltipOverflowMode": {
      "kind": "enum",
      "values": {
        "Parent": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Only show tooltip if parent DOM element is overflowing"
            }
          ],
          "remarks": [],
          "isBeta": false
        },
        "Self": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [
            {
              "kind": "text",
              "text": "Only show tooltip if tooltip host's content is overflowing"
            }
          ],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "unhoistMethods": {
      "kind": "function",
      "signature": "export function unhoistMethods(source: any, methodNames: string[]): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "source": {
          "name": "source",
          "description": [
            {
              "kind": "text",
              "text": "The source object upon which methods were hoisted."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "any"
        },
        "methodNames": {
          "name": "methodNames",
          "description": [
            {
              "kind": "text",
              "text": "An array of method names to unhoist."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "string[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Provides a method for convenience to unhoist hoisted methods."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "unregisterIcons": {
      "kind": "function",
      "signature": "export function unregisterIcons(iconNames: string[]): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "iconNames": {
          "name": "iconNames",
          "description": [
            {
              "kind": "text",
              "text": "List of icons to unregister."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "string[]"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Unregisters icons by name."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "updateA": {
      "kind": "function",
      "signature": "export function updateA(color: IColor, a: number): IColor;",
      "returnValue": {
        "type": "IColor",
        "description": []
      },
      "parameters": {
        "color": {
          "name": "color",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "IColor"
        },
        "a": {
          "name": "a",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "updateH": {
      "kind": "function",
      "signature": "export function updateH(color: IColor, h: number): IColor;",
      "returnValue": {
        "type": "IColor",
        "description": []
      },
      "parameters": {
        "color": {
          "name": "color",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "IColor"
        },
        "h": {
          "name": "h",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "updateSV": {
      "kind": "function",
      "signature": "export function updateSV(color: IColor, s: number, v: number): IColor;",
      "returnValue": {
        "type": "IColor",
        "description": []
      },
      "parameters": {
        "color": {
          "name": "color",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "IColor"
        },
        "s": {
          "name": "s",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        },
        "v": {
          "name": "v",
          "description": [],
          "isOptional": false,
          "isSpread": false,
          "type": "number"
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "ValidationState": {
      "kind": "enum",
      "values": {
        "invalid": {
          "kind": "enum value",
          "value": "2",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "valid": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "warning": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "ValuePosition": {
      "kind": "enum",
      "values": {
        "Next": {
          "kind": "enum value",
          "value": "1",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Unused."
            }
          ],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Previous": {
          "kind": "enum value",
          "value": "0",
          "deprecatedMessage": [
            {
              "kind": "text",
              "text": "Unused."
            }
          ],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      },
      "deprecatedMessage": [
        {
          "kind": "text",
          "text": "Unused."
        }
      ],
      "summary": [],
      "remarks": [],
      "isBeta": false
    },
    "values": {
      "kind": "function",
      "signature": "export function values<T>(obj: any): T[];",
      "returnValue": {
        "type": "T[]",
        "description": []
      },
      "parameters": {
        "obj": {
          "name": "obj",
          "description": [
            {
              "kind": "text",
              "text": "The dictionary to get values for"
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "any"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Get all values in an object dictionary"
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "VirtualizedComboBox": {
      "kind": "class",
      "extends": "BaseComponent",
      "implements": "IComboBox",
      "typeParameters": [],
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "isSealed": false,
      "members": {
        "_onRenderList": {
          "kind": "property",
          "signature": "protected _onRenderList: (props: IComboBoxProps) => JSX.Element;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(props: IComboBoxProps) => JSX.Element",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "_onScrollToItem": {
          "kind": "property",
          "signature": "protected _onScrollToItem: (itemIndex: number) => void;",
          "isOptional": false,
          "isReadOnly": false,
          "isStatic": false,
          "type": "(itemIndex: number) => void",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false,
          "isEventProperty": false
        },
        "dismissMenu": {
          "kind": "method",
          "signature": "dismissMenu(): void;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "void",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "focus": {
          "kind": "method",
          "signature": "focus(): boolean;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "boolean",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        },
        "render": {
          "kind": "method",
          "signature": "render(): JSX.Element;",
          "accessModifier": "",
          "isOptional": false,
          "isStatic": false,
          "returnValue": {
            "type": "JSX.Element",
            "description": []
          },
          "parameters": {},
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false,
          "isSealed": false,
          "isVirtual": false,
          "isOverride": false
        }
      }
    },
    "warn": {
      "kind": "function",
      "signature": "export function warn(message: string): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "message": {
          "name": "message",
          "description": [
            {
              "kind": "text",
              "text": "Warning message."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Sends a warning to console, if the api is present."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "warnConditionallyRequiredProps": {
      "kind": "function",
      "signature": "export function warnConditionallyRequiredProps<P>(componentName: string, props: P, requiredProps: string[], conditionalPropName: string, condition: boolean): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "componentName": {
          "name": "componentName",
          "description": [
            {
              "kind": "text",
              "text": "The name of the component being used."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        },
        "props": {
          "name": "props",
          "description": [
            {
              "kind": "text",
              "text": "The props passed into the component."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "P"
        },
        "requiredProps": {
          "name": "requiredProps",
          "description": [
            {
              "kind": "text",
              "text": "The name of the props that are required when the condition is met."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "string[]"
        },
        "conditionalPropName": {
          "name": "conditionalPropName",
          "description": [
            {
              "kind": "text",
              "text": "The name of the prop that the condition is based on."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        },
        "condition": {
          "name": "condition",
          "description": [
            {
              "kind": "text",
              "text": "Whether the condition is met."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "boolean"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Warns when props are required if a condition is met."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "warnDeprecations": {
      "kind": "function",
      "signature": "export function warnDeprecations<P>(componentName: string, props: P, deprecationMap: ISettingsMap<P>): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "componentName": {
          "name": "componentName",
          "description": [
            {
              "kind": "text",
              "text": "The name of the component being used."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        },
        "props": {
          "name": "props",
          "description": [
            {
              "kind": "text",
              "text": "The props passed into the component."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "P"
        },
        "deprecationMap": {
          "name": "deprecationMap",
          "description": [
            {
              "kind": "text",
              "text": "The map of deprecations, where key is the prop name and the value is either null or a replacement prop name."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "ISettingsMap<P>"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Warns when a deprecated props are being used."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "warnMutuallyExclusive": {
      "kind": "function",
      "signature": "export function warnMutuallyExclusive<P>(componentName: string, props: P, exclusiveMap: ISettingsMap<P>): void;",
      "returnValue": {
        "type": "void",
        "description": []
      },
      "parameters": {
        "componentName": {
          "name": "componentName",
          "description": [
            {
              "kind": "text",
              "text": "The name of the component being used."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "string"
        },
        "props": {
          "name": "props",
          "description": [
            {
              "kind": "text",
              "text": "The props passed into the component."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "P"
        },
        "exclusiveMap": {
          "name": "exclusiveMap",
          "description": [
            {
              "kind": "text",
              "text": "A map where the key is a parameter, and the value is the other parameter."
            }
          ],
          "isOptional": false,
          "isSpread": false,
          "type": "ISettingsMap<P>"
        }
      },
      "deprecatedMessage": [],
      "summary": [
        {
          "kind": "text",
          "text": "Warns when two props which are mutually exclusive are both being used."
        }
      ],
      "remarks": [],
      "isBeta": false
    },
    "ZIndexes": {
      "kind": "namespace",
      "deprecatedMessage": [],
      "summary": [],
      "remarks": [],
      "isBeta": false,
      "exports": {
        "Coachmark": {
          "kind": "module variable",
          "signature": "Coachmark: number",
          "type": "number",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "FocusStyle": {
          "kind": "module variable",
          "signature": "FocusStyle: number",
          "type": "number",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "KeytipLayer": {
          "kind": "module variable",
          "signature": "KeytipLayer: number",
          "type": "number",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Layer": {
          "kind": "module variable",
          "signature": "Layer: number",
          "type": "number",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "Nav": {
          "kind": "module variable",
          "signature": "Nav: number",
          "type": "number",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        },
        "ScrollablePane": {
          "kind": "module variable",
          "signature": "ScrollablePane: number",
          "type": "number",
          "value": "",
          "deprecatedMessage": [],
          "summary": [],
          "remarks": [],
          "isBeta": false
        }
      }
    }
  }
}
